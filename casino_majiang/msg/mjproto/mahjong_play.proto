syntax = "proto2";

import public "base.proto";
package mjproto;
option optimize_for = LITE_RUNTIME;


////////////////////////////////////////////////////////////////////
// 通信协议

// 开局（接收服务端消息）
message game_Opening {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
}


// 发牌
message game_DealCards {
    optional ProtoHeader header = 1;
    optional PlayerPoker playerPoker = 2;
}


// 换牌（3张）
message game_ExchangeCards {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
    repeated CardInfo exchangeOutCards = 5; // 要换出的 3 张牌
    optional uint32 userId = 6; // 操作人 (广播给其它用户时用到)
}
message game_AckExchangeCards {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
    repeated CardInfo exchangeOutCards = 5; // 要换出的 3 张牌
    optional int32 exchangeOutseat = 6; // 换给谁
    repeated CardInfo exchangeInCards = 7; // 换入的 3 张牌
    optional int32 exchangeInseat = 8; // 谁换给我的
    optional int32 dice = 9; // 庄家掷出的骰子点数（决定换三张的方向，服务器返回这个只是展示用）
}

// 定缺（和个人玩家ACK）
message game_DingQue {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 color = 4; // 定缺的花色
    optional uint32 userId = 5; // 操作人 (广播给其它用户时用到)
}

// 定缺开始广播（和ACK）
message game_BroadcastBeginDingQue {
    optional ProtoHeader header = 1;
    repeated int32 color = 2; // 定缺的花色
}

// 换牌开始(广播)
message game_BroadcastBeginExchange {
    optional ProtoHeader header = 1;
}

// 摸牌
message game_GetInCard {
    optional ProtoHeader header = 1;
    optional CardInfo card = 2;
}


// 出牌
message game_SendOutCard {
    optional ProtoHeader header = 1;
    optional int32 cardId = 2; //要出的牌id
}

message game_AckSendOutCard {
    optional ProtoHeader header = 1;
    optional int32 result = 2; // 0:出牌成功 1:有人可碰/胡
}

// 碰牌
message game_ActPeng {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
    optional CardInfo pengCard = 5; // 被碰的牌
}
message game_AckActPeng {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    repeated CardInfo pengCard = 4;
    repeated CardInfo HandCard = 5;
    repeated CardInfo GangCard = 6;
}

// 杠牌
message game_ActGang {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
    optional CardInfo gangCard = 5; // 被杠的牌
}
message game_AckActGang {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
    repeated CardInfo pengCard = 5;
    repeated CardInfo HandCard = 6;
    repeated CardInfo GangCard = 7;
}

// 胡牌
message game_ActHu {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
    optional CardInfo huCard = 5; // 胡的牌
}
message game_AckActHu {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
    repeated CardInfo pengCard = 5;
    repeated CardInfo HandCard = 6;
    repeated CardInfo GangCard = 7;
    optional CardInfo huCard = 8;
}

// 过牌
message game_ActGuo {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
}

// 过牌收到服务器确认后，还是要协议 【PID_game_SENDOVERTURN ：game_SendOverTurn】 后结束此轮
message game_AckActGuo {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
}

// 出牌（和ACK）后，轮到下一轮的玩家，【当前玩家出牌结束】或【过牌、胡牌后】，结束自己的回合
message game_OverTurn {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    optional int32 seat = 4;
    optional int32 nextseat = 5; // 接收到本 message 时，表示下一位玩家是谁
    optional CardInfo chuCard = 6; // 如果有出牌，表示出的是哪张牌，否则置为空
}


// 发送游戏信息
message game_SendGameInfo {
    optional ProtoHeader header = 1;
    optional int32 matchId = 2;
    optional int32 tableId = 3;
    // 1. 首先是牌桌的玩家数据（玩家数据包括其id昵称筹码头像等基本信息，其手牌数据，以及自己打出的牌的数据，还有状态是否已经胡牌了，玩家在整局的总输赢）
    repeated PlayerInfo playerInfo = 4;
    // 2. 桌面信息（包括：游戏是否结束，当前轮到哪个玩家，倒计时剩余时间）
    optional DeskGameInfo deskGameInfo = 5;
    // 
    optional uint32 senderUserId = 6; // 发起请求的人
}

