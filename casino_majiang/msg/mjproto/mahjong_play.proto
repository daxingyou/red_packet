syntax = "proto2";

import public "base.proto";
package mjproto;
option optimize_for = LITE_RUNTIME;

////////////////////////////////////////////////////////////////////
// 通信协议

// 开局（接收服务端消息）
message game_Opening {
    optional ProtoHeader header = 1;
}

// 发牌
message game_DealCards {
    optional ProtoHeader header = 1;
    repeated PlayerCard playerCard = 2; //发给我的牌
    optional uint32 dealerUserId = 3; //庄家的userId
}

// 换牌（3张）
message game_ExchangeCards {
    optional ProtoHeader header = 1;
    repeated CardInfo exchangeOutCards = 2; // 要换出的 3 张牌
    optional uint32 userId = 3; // 操作人 (广播给其它用户时用到)
    optional int32 exchangeNum = 4; //换几张: 3张, 2张
}

//
message game_AckExchangeCards {
    optional ProtoHeader header = 1;
}

message Game_ExchangeCardsEnd {
    optional ProtoHeader header = 1;
    repeated CardInfo exchangeInCards = 2; // 要换出的 3 张牌
    optional int32 exchangeNum = 3; //换几张: 3张, 2张
}

// 定缺（和个人玩家ACK）
message game_DingQue {
    optional ProtoHeader header = 1;
    optional int32 color = 2; // 定缺的花色
    optional uint32 userId = 3; // 操作人 (广播给其它用户时用到)
}

message DingQueEndBean {
    optional uint32 userId = 1; // 定缺的人
    optional int32 flower = 2; // 定缺的花色
}

message game_DingQueEnd {
    optional ProtoHeader header = 1;
    repeated DingQueEndBean Ques = 2;
}

// 定缺开始广播（和ACK）
message game_BroadcastBeginDingQue {
    optional ProtoHeader header = 1;
    repeated int32 color = 2; // 定缺的花色
}

// 换牌开始(广播)
message game_BroadcastBeginExchange {
    optional ProtoHeader header = 1;
}

// 摸牌
message game_GetInCard {
    optional ProtoHeader header = 1;
    optional CardInfo card = 2;
}

// 出牌
message game_SendOutCard {
    optional ProtoHeader header = 1;
    optional int32 cardId = 2; //要出的牌id
}

message game_AckSendOutCard {
    optional ProtoHeader header = 1;
    optional int32 result = 2; // 0:出牌成功 1:有人可碰/胡
    optional uint32 userId = 3; //出牌的人(广播)
    optional CardInfo card = 4; // 出的牌(广播)
}

// 碰牌
message game_ActPeng {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
    optional CardInfo pengCard = 3; // 被碰的牌
}

message game_AckActPeng {
    optional ProtoHeader header = 1;
    repeated CardInfo pengCard = 2; //广播碰的哪几张牌
    optional uint32 userIdOut = 3; //出牌的人
    optional uint32 userIdIn = 4; //碰牌的人
}

// 杠牌
message game_ActGang {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
    optional CardInfo gangCard = 3; // 被杠的牌
}
message game_AckActGang {
    optional ProtoHeader header = 1;
    optional int32 gangType = 2; //1:点杠  2:巴杠  3:暗杠
    repeated CardInfo GangCard = 3;
    optional uint32 userIdOut = 4; //出牌的人
    optional uint32 userIdIn = 5; //杠牌的人
}

// 胡牌
message game_ActHu {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
    optional CardInfo huCard = 3; // 胡的牌
}

message game_AckActHu {
    optional ProtoHeader header = 1;
    optional int32 huType = 2; //胡牌类型: 1=点炮、2=自摸、3=抢杠、4=杠上炮、5=杠上花、6=海底捞、7=一炮双响、8=一炮三响
    optional CardInfo huCard = 3;
    optional uint32 userIdOut = 4; //出牌的人
    optional uint32 userIdIn = 5; //胡牌的人
    optional bool isZiMo = 6; //是否是自摸
}

// 过牌
message game_ActGuo {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
}

// 过牌收到服务器确认后，还是要协议 【PID_game_SENDOVERTURN ：game_SendOverTurn】 后结束此轮
message game_AckActGuo {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //操作人(广播时用)
}

// 轮到谁操作(摸牌、碰/杠/过/胡)
message game_OverTurn {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 当前谁正在操作
    optional uint32 nextUserId = 3;
    optional int32 actType = 4; // 1:正常摸牌 2:其它
    optional bool canPeng = 5;
    optional bool canGang = 6;
    optional bool canHu = 7;
    optional CardInfo actCard = 8; // 如果有出牌，表示出的是哪张牌，否则置为空 别人打牌的判断
    repeated CardInfo gangCards = 9; // 手牌中可杠的牌(可能多张) 自己摸牌的时候
    optional int32 time = 10;
    optional int32 paiCount = 11; //剩余多少牌还没有摸

}

// 发送游戏信息(广播)
message game_SendGameInfo {
    optional ProtoHeader header = 1;
    // 1. 首先是牌桌的玩家数据（玩家数据包括其id昵称筹码头像等基本信息，其手牌数据，以及自己打出的牌的数据，还有状态是否已经胡牌了，玩家在整局的总输赢）
    repeated PlayerInfo playerInfo = 2;
    // 2. 桌面信息（包括：游戏是否结束，当前轮到哪个玩家，倒计时剩余时间）
    optional DeskGameInfo deskGameInfo = 3;
    // 
    optional uint32 senderUserId = 4; // 发起请求的人
}

