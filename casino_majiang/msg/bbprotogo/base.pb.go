// Code generated by protoc-gen-go.
// source: base.proto
// DO NOT EDIT!

package bbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EProtoId int32

const (
	EProtoId_PID_GAME_UPDATE             EProtoId = 1
	EProtoId_PID_GAME_LOGIN              EProtoId = 2
	EProtoId_PID_GAME_ACKLOGIN           EProtoId = 3
	EProtoId_PID_GAME_ENTERROOM          EProtoId = 4
	EProtoId_PID_GAME_ACKENTERROOM       EProtoId = 5
	EProtoId_PID_GAME_SENDGAMEINFO       EProtoId = 6
	EProtoId_PID_GAME_CREATEDESK         EProtoId = 7
	EProtoId_PID_GAME_ACKCREATEDESK      EProtoId = 8
	EProtoId_PID_GAME_ACTPENG            EProtoId = 9
	EProtoId_PID_GAME_ACKACTPENG         EProtoId = 10
	EProtoId_PID_GAME_ACTGANG            EProtoId = 11
	EProtoId_PID_GAME_ACKACTGANG         EProtoId = 12
	EProtoId_PID_GAME_ACTHU              EProtoId = 13
	EProtoId_PID_GAME_ACKACTHU           EProtoId = 14
	EProtoId_PID_GAME_ACTGUO             EProtoId = 15
	EProtoId_PID_GAME_ACKACTGUO          EProtoId = 16
	EProtoId_PID_GAME_SENDOVERTURN       EProtoId = 17
	EProtoId_PID_GAME_TESTRESULT         EProtoId = 18
	EProtoId_PID_GAME_GAMEBULLETIN       EProtoId = 19
	EProtoId_PID_GAME_ACKGAMEBULLETIN    EProtoId = 20
	EProtoId_PID_GAME_GAMEMESSAGE        EProtoId = 21
	EProtoId_PID_GAME_ACKGAMEMESSAGE     EProtoId = 22
	EProtoId_PID_GAME_GAMEHELP           EProtoId = 23
	EProtoId_PID_GAME_ACKGAMEHELP        EProtoId = 24
	EProtoId_PID_GAME_GAMERECORDS        EProtoId = 25
	EProtoId_PID_GAME_ACKGAMERECORDS     EProtoId = 26
	EProtoId_PID_GAME_GAMEREADY          EProtoId = 27
	EProtoId_PID_GAME_ACKGAMEREADY       EProtoId = 28
	EProtoId_PID_GAME_GAMEBEGIN          EProtoId = 29
	EProtoId_PID_GAME_DISSOLVEDESK       EProtoId = 30
	EProtoId_PID_GAME_ACKDISSOLVEDESK    EProtoId = 31
	EProtoId_PID_GAME_LEAVEDESK          EProtoId = 32
	EProtoId_PID_GAME_ACKLEAVEDESK       EProtoId = 33
	EProtoId_PID_GAME_SENDDESKENDLOTTERY EProtoId = 34
	EProtoId_PID_GAME_MESSAGE            EProtoId = 35
	EProtoId_PID_GAME_SENDMESSAGE        EProtoId = 36
	EProtoId_PID_GAME_FEEDBACK           EProtoId = 37
	EProtoId_PID_GAME_GAMEOVER           EProtoId = 38
)

var EProtoId_name = map[int32]string{
	1:  "PID_GAME_UPDATE",
	2:  "PID_GAME_LOGIN",
	3:  "PID_GAME_ACKLOGIN",
	4:  "PID_GAME_ENTERROOM",
	5:  "PID_GAME_ACKENTERROOM",
	6:  "PID_GAME_SENDGAMEINFO",
	7:  "PID_GAME_CREATEDESK",
	8:  "PID_GAME_ACKCREATEDESK",
	9:  "PID_GAME_ACTPENG",
	10: "PID_GAME_ACKACTPENG",
	11: "PID_GAME_ACTGANG",
	12: "PID_GAME_ACKACTGANG",
	13: "PID_GAME_ACTHU",
	14: "PID_GAME_ACKACTHU",
	15: "PID_GAME_ACTGUO",
	16: "PID_GAME_ACKACTGUO",
	17: "PID_GAME_SENDOVERTURN",
	18: "PID_GAME_TESTRESULT",
	19: "PID_GAME_GAMEBULLETIN",
	20: "PID_GAME_ACKGAMEBULLETIN",
	21: "PID_GAME_GAMEMESSAGE",
	22: "PID_GAME_ACKGAMEMESSAGE",
	23: "PID_GAME_GAMEHELP",
	24: "PID_GAME_ACKGAMEHELP",
	25: "PID_GAME_GAMERECORDS",
	26: "PID_GAME_ACKGAMERECORDS",
	27: "PID_GAME_GAMEREADY",
	28: "PID_GAME_ACKGAMEREADY",
	29: "PID_GAME_GAMEBEGIN",
	30: "PID_GAME_DISSOLVEDESK",
	31: "PID_GAME_ACKDISSOLVEDESK",
	32: "PID_GAME_LEAVEDESK",
	33: "PID_GAME_ACKLEAVEDESK",
	34: "PID_GAME_SENDDESKENDLOTTERY",
	35: "PID_GAME_MESSAGE",
	36: "PID_GAME_SENDMESSAGE",
	37: "PID_GAME_FEEDBACK",
	38: "PID_GAME_GAMEOVER",
}
var EProtoId_value = map[string]int32{
	"PID_GAME_UPDATE":             1,
	"PID_GAME_LOGIN":              2,
	"PID_GAME_ACKLOGIN":           3,
	"PID_GAME_ENTERROOM":          4,
	"PID_GAME_ACKENTERROOM":       5,
	"PID_GAME_SENDGAMEINFO":       6,
	"PID_GAME_CREATEDESK":         7,
	"PID_GAME_ACKCREATEDESK":      8,
	"PID_GAME_ACTPENG":            9,
	"PID_GAME_ACKACTPENG":         10,
	"PID_GAME_ACTGANG":            11,
	"PID_GAME_ACKACTGANG":         12,
	"PID_GAME_ACTHU":              13,
	"PID_GAME_ACKACTHU":           14,
	"PID_GAME_ACTGUO":             15,
	"PID_GAME_ACKACTGUO":          16,
	"PID_GAME_SENDOVERTURN":       17,
	"PID_GAME_TESTRESULT":         18,
	"PID_GAME_GAMEBULLETIN":       19,
	"PID_GAME_ACKGAMEBULLETIN":    20,
	"PID_GAME_GAMEMESSAGE":        21,
	"PID_GAME_ACKGAMEMESSAGE":     22,
	"PID_GAME_GAMEHELP":           23,
	"PID_GAME_ACKGAMEHELP":        24,
	"PID_GAME_GAMERECORDS":        25,
	"PID_GAME_ACKGAMERECORDS":     26,
	"PID_GAME_GAMEREADY":          27,
	"PID_GAME_ACKGAMEREADY":       28,
	"PID_GAME_GAMEBEGIN":          29,
	"PID_GAME_DISSOLVEDESK":       30,
	"PID_GAME_ACKDISSOLVEDESK":    31,
	"PID_GAME_LEAVEDESK":          32,
	"PID_GAME_ACKLEAVEDESK":       33,
	"PID_GAME_SENDDESKENDLOTTERY": 34,
	"PID_GAME_MESSAGE":            35,
	"PID_GAME_SENDMESSAGE":        36,
	"PID_GAME_FEEDBACK":           37,
	"PID_GAME_GAMEOVER":           38,
}

func (x EProtoId) Enum() *EProtoId {
	p := new(EProtoId)
	*p = x
	return p
}
func (x EProtoId) String() string {
	return proto.EnumName(EProtoId_name, int32(x))
}
func (x *EProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProtoId_value, data, "EProtoId")
	if err != nil {
		return err
	}
	*x = EProtoId(value)
	return nil
}
func (EProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type DDErrorCode int32

const (
	DDErrorCode_ERRORCODE_SUCC DDErrorCode = 0
	// -101   -200	游戏异常
	DDErrorCode_ERRORCODE_CREATE_DESK_DIAMOND_NOTENOUGH DDErrorCode = -101
	DDErrorCode_ERRORCODE_CREATE_DESK_USER_NOTFOUND     DDErrorCode = -102
	DDErrorCode_ERRORCODE_INTO_DESK_NOTFOUND            DDErrorCode = -103
	DDErrorCode_ERRORCODE_GAME_READY_REPEAT             DDErrorCode = -110
	DDErrorCode_ERRORCODE_GAME_READY_CHIP_NOT_ENOUGH    DDErrorCode = -111
)

var DDErrorCode_name = map[int32]string{
	0:    "ERRORCODE_SUCC",
	-101: "ERRORCODE_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "ERRORCODE_CREATE_DESK_USER_NOTFOUND",
	-103: "ERRORCODE_INTO_DESK_NOTFOUND",
	-110: "ERRORCODE_GAME_READY_REPEAT",
	-111: "ERRORCODE_GAME_READY_CHIP_NOT_ENOUGH",
}
var DDErrorCode_value = map[string]int32{
	"ERRORCODE_SUCC":                          0,
	"ERRORCODE_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"ERRORCODE_CREATE_DESK_USER_NOTFOUND":     -102,
	"ERRORCODE_INTO_DESK_NOTFOUND":            -103,
	"ERRORCODE_GAME_READY_REPEAT":             -110,
	"ERRORCODE_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x DDErrorCode) Enum() *DDErrorCode {
	p := new(DDErrorCode)
	*p = x
	return p
}
func (x DDErrorCode) String() string {
	return proto.EnumName(DDErrorCode_name, int32(x))
}
func (x *DDErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DDErrorCode_value, data, "DDErrorCode")
	if err != nil {
		return err
	}
	*x = DDErrorCode(value)
	return nil
}
func (DDErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// ProtoHeader 需要在每个 Message 中作为第一个字段
type ProtoHeader struct {
	Version          *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Code             *int32  `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	Error            *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProtoHeader) Reset()                    { *m = ProtoHeader{} }
func (m *ProtoHeader) String() string            { return proto.CompactTextString(m) }
func (*ProtoHeader) ProtoMessage()               {}
func (*ProtoHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ProtoHeader) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ProtoHeader) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ProtoHeader) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ProtoHeader) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*ProtoHeader)(nil), "bbproto.ProtoHeader")
	proto.RegisterEnum("bbproto.EProtoId", EProtoId_name, EProtoId_value)
	proto.RegisterEnum("bbproto.DDErrorCode", DDErrorCode_name, DDErrorCode_value)
}

var fileDescriptor1 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0x5b, 0x73, 0xd2, 0x40,
	0x14, 0x96, 0xde, 0x68, 0x4f, 0x2f, 0x9c, 0x2e, 0xb7, 0xb4, 0xa0, 0xad, 0x6d, 0xd5, 0xda, 0x07,
	0x47, 0x67, 0xfc, 0x03, 0x21, 0x39, 0x84, 0x0c, 0x21, 0x9b, 0xc9, 0xa5, 0x33, 0x7d, 0x62, 0x8a,
	0xe4, 0xc1, 0x17, 0x71, 0x82, 0xfa, 0x3f, 0xea, 0x9b, 0xfa, 0x7b, 0xfc, 0x5d, 0xba, 0x9b, 0x40,
	0xc2, 0x06, 0x78, 0x08, 0x9b, 0xef, 0x72, 0xce, 0xe6, 0xdb, 0xb3, 0x00, 0x93, 0xc7, 0x79, 0xfc,
	0xee, 0x6b, 0x32, 0xfb, 0x36, 0x63, 0xd5, 0xc9, 0x24, 0x5d, 0x5c, 0x0d, 0xe1, 0xd0, 0x93, 0x8b,
	0x41, 0xfc, 0x38, 0x8d, 0x13, 0x56, 0x83, 0xea, 0x8f, 0x38, 0x99, 0x7f, 0x9e, 0x7d, 0xd1, 0x2a,
	0x97, 0x95, 0xdb, 0x03, 0x76, 0x02, 0x7b, 0xdf, 0xe7, 0x71, 0x62, 0x4f, 0xb5, 0x2d, 0xf1, 0x7e,
	0xcc, 0x8e, 0x60, 0xe7, 0xd3, 0x6c, 0x1a, 0x6b, 0xdb, 0xe2, 0x6d, 0x97, 0x1d, 0xc3, 0x6e, 0x9c,
	0x24, 0xb3, 0x44, 0xdb, 0x91, 0xe2, 0xbb, 0xbf, 0x55, 0xd8, 0xa7, 0xb4, 0x9c, 0x3d, 0x65, 0x75,
	0xa8, 0x79, 0xb6, 0x39, 0xb6, 0xf4, 0x11, 0x8d, 0x23, 0xcf, 0xd4, 0x43, 0xc2, 0x0a, 0x63, 0x70,
	0x92, 0x83, 0x0e, 0xb7, 0x6c, 0x17, 0xb7, 0x58, 0x13, 0x4e, 0x73, 0x4c, 0x37, 0x86, 0x19, 0xbc,
	0xcd, 0x5a, 0xc0, 0x72, 0x98, 0xdc, 0x90, 0x7c, 0x9f, 0xf3, 0x11, 0xee, 0xb0, 0x33, 0x68, 0xae,
	0xca, 0x0b, 0x6a, 0x57, 0xa1, 0x02, 0x72, 0x4d, 0xb9, 0xb0, 0xdd, 0x3e, 0xc7, 0x3d, 0xd6, 0x86,
	0x7a, 0x4e, 0x19, 0x3e, 0x89, 0xdd, 0x98, 0x14, 0x0c, 0xb1, 0xca, 0xce, 0xa1, 0xb5, 0x5a, 0x6e,
	0x85, 0xdb, 0x67, 0x0d, 0xc0, 0x15, 0x2e, 0xf4, 0xc8, 0xb5, 0xf0, 0x40, 0x29, 0x25, 0x1c, 0x4b,
	0x02, 0xca, 0x72, 0x4b, 0x17, 0xe8, 0xe1, 0x06, 0x79, 0x4a, 0x1c, 0x29, 0x59, 0x08, 0x74, 0x10,
	0xe1, 0x71, 0x39, 0x8b, 0x0c, 0x3e, 0x51, 0xb2, 0x94, 0x05, 0x22, 0x8e, 0x35, 0x25, 0xa0, 0x45,
	0x61, 0x81, 0xe3, 0x5a, 0x0a, 0xfc, 0x9e, 0xfc, 0x30, 0xf2, 0x5d, 0x3c, 0x55, 0xf6, 0x12, 0x52,
	0x10, 0xfa, 0x14, 0x44, 0x4e, 0x88, 0x4c, 0xf1, 0xc8, 0x47, 0x2f, 0x72, 0x1c, 0x0a, 0xc5, 0x39,
	0xd4, 0x59, 0x17, 0xb4, 0xd5, 0x36, 0x0a, 0xdb, 0x60, 0x1a, 0x34, 0x14, 0xe3, 0x88, 0x82, 0x40,
	0xb7, 0x08, 0x9b, 0xac, 0x03, 0xed, 0xb2, 0x6f, 0x49, 0xb6, 0x94, 0xef, 0x94, 0x8f, 0x01, 0x39,
	0x1e, 0xb6, 0x95, 0x6a, 0x0b, 0x4f, 0xca, 0x68, 0x6b, 0x7d, 0x7c, 0x32, 0xb8, 0x6f, 0x06, 0x78,
	0xb6, 0xa9, 0xcf, 0x92, 0x3c, 0x57, 0x32, 0xca, 0x18, 0xdd, 0x7c, 0xc0, 0x4e, 0x79, 0x88, 0x0a,
	0xaa, 0xbb, 0x66, 0xe9, 0x91, 0x9c, 0xc7, 0xe7, 0x8a, 0xc5, 0xb4, 0x83, 0x80, 0x3b, 0xf7, 0xd9,
	0x9c, 0xbc, 0x28, 0x47, 0xa4, 0xb0, 0x17, 0x4a, 0x41, 0x87, 0xf4, 0x05, 0x7e, 0x59, 0xde, 0x43,
	0x41, 0xbd, 0x64, 0x17, 0xd0, 0x51, 0x8e, 0x50, 0xc2, 0xe2, 0xcf, 0xe1, 0xa1, 0x18, 0xf6, 0x07,
	0xbc, 0x52, 0x46, 0x6d, 0x99, 0xea, 0xb5, 0x12, 0x92, 0xb4, 0x2d, 0x99, 0x1b, 0x25, 0xef, 0x3e,
	0x91, 0xd9, 0x13, 0x0d, 0xf1, 0xd5, 0xda, 0x31, 0xc8, 0x51, 0xc1, 0xd7, 0x77, 0x4f, 0x5b, 0x70,
	0x28, 0x7a, 0xca, 0x9b, 0x6d, 0x88, 0xcb, 0x2e, 0x27, 0x55, 0xde, 0x31, 0xdf, 0xe0, 0xa6, 0x28,
	0x1c, 0x19, 0x06, 0x3e, 0x63, 0x1f, 0xe1, 0x4d, 0x81, 0x65, 0xb7, 0x66, 0x2c, 0xb7, 0x29, 0xb2,
	0xd1, 0x47, 0xdc, 0x35, 0xc7, 0x2e, 0x0f, 0xc9, 0xe5, 0x91, 0x35, 0xc0, 0x3f, 0xff, 0x16, 0xbf,
	0x0a, 0x7b, 0x0f, 0xd7, 0x9b, 0x5d, 0x51, 0x40, 0xbe, 0xb4, 0xf4, 0x79, 0xe4, 0x9a, 0xf8, 0xbb,
	0x70, 0xbc, 0x85, 0x6e, 0xe1, 0xb0, 0xdd, 0x90, 0x67, 0xfa, 0x5c, 0xfa, 0xab, 0x90, 0xde, 0x42,
	0xa7, 0x90, 0xa6, 0xdf, 0x94, 0x9e, 0xa9, 0x78, 0x7a, 0xa2, 0x11, 0xfe, 0x2c, 0x94, 0x1f, 0xe0,
	0x66, 0xa3, 0xd2, 0x18, 0xd8, 0x9e, 0x2c, 0x3d, 0x5e, 0xec, 0xfc, 0x29, 0xb7, 0xfc, 0x0f, 0x00,
	0x00, 0xff, 0xff, 0x58, 0x23, 0x04, 0xa7, 0x3e, 0x05, 0x00, 0x00,
}
