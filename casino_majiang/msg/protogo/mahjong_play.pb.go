// Code generated by protoc-gen-go.
// source: mahjong_play.proto
// DO NOT EDIT!

package mjproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from base.proto

// Ignoring public import of WeixinInfo from base.proto

// Ignoring public import of CardInfo from base.proto

// Ignoring public import of PlayOptions from base.proto

// Ignoring public import of RoomTypeInfo from base.proto

// Ignoring public import of ComposeCard from base.proto

// Ignoring public import of PlayerCard from base.proto

// Ignoring public import of PlayerInfo from base.proto

// Ignoring public import of DeskGameInfo from base.proto

// Ignoring public import of EProtoId from base.proto

// Ignoring public import of ErrorCode from base.proto

// Ignoring public import of MJRoomType from base.proto

// Ignoring public import of MahjongColor from base.proto

// 开局（接收服务端消息）
type Game_Opening struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_Opening) Reset()                    { *m = Game_Opening{} }
func (m *Game_Opening) String() string            { return proto.CompactTextString(m) }
func (*Game_Opening) ProtoMessage()               {}
func (*Game_Opening) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Game_Opening) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_Opening) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_Opening) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

// 发牌
type Game_DealCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PlayerCard       *PlayerCard  `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_DealCards) Reset()                    { *m = Game_DealCards{} }
func (m *Game_DealCards) String() string            { return proto.CompactTextString(m) }
func (*Game_DealCards) ProtoMessage()               {}
func (*Game_DealCards) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Game_DealCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_DealCards) GetPlayerCard() *PlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

// 换牌（3张）
type Game_ExchangeCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	ExchangeOutCards []*CardInfo  `protobuf:"bytes,5,rep,name=exchangeOutCards" json:"exchangeOutCards,omitempty"`
	UserId           *uint32      `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_ExchangeCards) Reset()                    { *m = Game_ExchangeCards{} }
func (m *Game_ExchangeCards) String() string            { return proto.CompactTextString(m) }
func (*Game_ExchangeCards) ProtoMessage()               {}
func (*Game_ExchangeCards) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Game_ExchangeCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_ExchangeCards) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_ExchangeCards) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_ExchangeCards) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_ExchangeCards) GetExchangeOutCards() []*CardInfo {
	if m != nil {
		return m.ExchangeOutCards
	}
	return nil
}

func (m *Game_ExchangeCards) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type Game_AckExchangeCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	ExchangeOutCards []*CardInfo  `protobuf:"bytes,5,rep,name=exchangeOutCards" json:"exchangeOutCards,omitempty"`
	ExchangeOutseat  *int32       `protobuf:"varint,6,opt,name=exchangeOutseat" json:"exchangeOutseat,omitempty"`
	ExchangeInCards  []*CardInfo  `protobuf:"bytes,7,rep,name=exchangeInCards" json:"exchangeInCards,omitempty"`
	ExchangeInseat   *int32       `protobuf:"varint,8,opt,name=exchangeInseat" json:"exchangeInseat,omitempty"`
	Dice             *int32       `protobuf:"varint,9,opt,name=dice" json:"dice,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_AckExchangeCards) Reset()                    { *m = Game_AckExchangeCards{} }
func (m *Game_AckExchangeCards) String() string            { return proto.CompactTextString(m) }
func (*Game_AckExchangeCards) ProtoMessage()               {}
func (*Game_AckExchangeCards) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Game_AckExchangeCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_AckExchangeCards) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_AckExchangeCards) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_AckExchangeCards) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckExchangeCards) GetExchangeOutCards() []*CardInfo {
	if m != nil {
		return m.ExchangeOutCards
	}
	return nil
}

func (m *Game_AckExchangeCards) GetExchangeOutseat() int32 {
	if m != nil && m.ExchangeOutseat != nil {
		return *m.ExchangeOutseat
	}
	return 0
}

func (m *Game_AckExchangeCards) GetExchangeInCards() []*CardInfo {
	if m != nil {
		return m.ExchangeInCards
	}
	return nil
}

func (m *Game_AckExchangeCards) GetExchangeInseat() int32 {
	if m != nil && m.ExchangeInseat != nil {
		return *m.ExchangeInseat
	}
	return 0
}

func (m *Game_AckExchangeCards) GetDice() int32 {
	if m != nil && m.Dice != nil {
		return *m.Dice
	}
	return 0
}

// 定缺（和个人玩家ACK）
type Game_DingQue struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Color            *int32       `protobuf:"varint,4,opt,name=color" json:"color,omitempty"`
	UserId           *uint32      `protobuf:"varint,5,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_DingQue) Reset()                    { *m = Game_DingQue{} }
func (m *Game_DingQue) String() string            { return proto.CompactTextString(m) }
func (*Game_DingQue) ProtoMessage()               {}
func (*Game_DingQue) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Game_DingQue) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_DingQue) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_DingQue) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_DingQue) GetColor() int32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *Game_DingQue) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 定缺开始广播（和ACK）
type Game_BroadcastBeginDingQue struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Color            []int32      `protobuf:"varint,2,rep,name=color" json:"color,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_BroadcastBeginDingQue) Reset()                    { *m = Game_BroadcastBeginDingQue{} }
func (m *Game_BroadcastBeginDingQue) String() string            { return proto.CompactTextString(m) }
func (*Game_BroadcastBeginDingQue) ProtoMessage()               {}
func (*Game_BroadcastBeginDingQue) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *Game_BroadcastBeginDingQue) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_BroadcastBeginDingQue) GetColor() []int32 {
	if m != nil {
		return m.Color
	}
	return nil
}

// 换牌开始(广播)
type Game_BroadcastBeginExchange struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_BroadcastBeginExchange) Reset()                    { *m = Game_BroadcastBeginExchange{} }
func (m *Game_BroadcastBeginExchange) String() string            { return proto.CompactTextString(m) }
func (*Game_BroadcastBeginExchange) ProtoMessage()               {}
func (*Game_BroadcastBeginExchange) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *Game_BroadcastBeginExchange) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 摸牌
type Game_GetInCard struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Card             *CardInfo    `protobuf:"bytes,2,opt,name=card" json:"card,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_GetInCard) Reset()                    { *m = Game_GetInCard{} }
func (m *Game_GetInCard) String() string            { return proto.CompactTextString(m) }
func (*Game_GetInCard) ProtoMessage()               {}
func (*Game_GetInCard) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *Game_GetInCard) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_GetInCard) GetCard() *CardInfo {
	if m != nil {
		return m.Card
	}
	return nil
}

// 出牌
type Game_SendOutCard struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	CardId           *int32       `protobuf:"varint,2,opt,name=cardId" json:"cardId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_SendOutCard) Reset()                    { *m = Game_SendOutCard{} }
func (m *Game_SendOutCard) String() string            { return proto.CompactTextString(m) }
func (*Game_SendOutCard) ProtoMessage()               {}
func (*Game_SendOutCard) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *Game_SendOutCard) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_SendOutCard) GetCardId() int32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

type Game_AckSendOutCard struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Result           *int32       `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_AckSendOutCard) Reset()                    { *m = Game_AckSendOutCard{} }
func (m *Game_AckSendOutCard) String() string            { return proto.CompactTextString(m) }
func (*Game_AckSendOutCard) ProtoMessage()               {}
func (*Game_AckSendOutCard) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *Game_AckSendOutCard) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_AckSendOutCard) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 碰牌
type Game_ActPeng struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	PengCard         *CardInfo    `protobuf:"bytes,5,opt,name=pengCard" json:"pengCard,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_ActPeng) Reset()                    { *m = Game_ActPeng{} }
func (m *Game_ActPeng) String() string            { return proto.CompactTextString(m) }
func (*Game_ActPeng) ProtoMessage()               {}
func (*Game_ActPeng) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *Game_ActPeng) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_ActPeng) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_ActPeng) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_ActPeng) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_ActPeng) GetPengCard() *CardInfo {
	if m != nil {
		return m.PengCard
	}
	return nil
}

type Game_AckActPeng struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	PengCard         []*CardInfo  `protobuf:"bytes,4,rep,name=pengCard" json:"pengCard,omitempty"`
	HandCard         []*CardInfo  `protobuf:"bytes,5,rep,name=HandCard" json:"HandCard,omitempty"`
	GangCard         []*CardInfo  `protobuf:"bytes,6,rep,name=GangCard" json:"GangCard,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_AckActPeng) Reset()                    { *m = Game_AckActPeng{} }
func (m *Game_AckActPeng) String() string            { return proto.CompactTextString(m) }
func (*Game_AckActPeng) ProtoMessage()               {}
func (*Game_AckActPeng) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *Game_AckActPeng) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_AckActPeng) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_AckActPeng) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_AckActPeng) GetPengCard() []*CardInfo {
	if m != nil {
		return m.PengCard
	}
	return nil
}

func (m *Game_AckActPeng) GetHandCard() []*CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *Game_AckActPeng) GetGangCard() []*CardInfo {
	if m != nil {
		return m.GangCard
	}
	return nil
}

// 杠牌
type Game_ActGang struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	GangCard         *CardInfo    `protobuf:"bytes,5,opt,name=gangCard" json:"gangCard,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_ActGang) Reset()                    { *m = Game_ActGang{} }
func (m *Game_ActGang) String() string            { return proto.CompactTextString(m) }
func (*Game_ActGang) ProtoMessage()               {}
func (*Game_ActGang) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *Game_ActGang) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_ActGang) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_ActGang) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_ActGang) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_ActGang) GetGangCard() *CardInfo {
	if m != nil {
		return m.GangCard
	}
	return nil
}

type Game_AckActGang struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	PengCard         []*CardInfo  `protobuf:"bytes,5,rep,name=pengCard" json:"pengCard,omitempty"`
	HandCard         []*CardInfo  `protobuf:"bytes,6,rep,name=HandCard" json:"HandCard,omitempty"`
	GangCard         []*CardInfo  `protobuf:"bytes,7,rep,name=GangCard" json:"GangCard,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_AckActGang) Reset()                    { *m = Game_AckActGang{} }
func (m *Game_AckActGang) String() string            { return proto.CompactTextString(m) }
func (*Game_AckActGang) ProtoMessage()               {}
func (*Game_AckActGang) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *Game_AckActGang) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_AckActGang) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_AckActGang) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_AckActGang) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckActGang) GetPengCard() []*CardInfo {
	if m != nil {
		return m.PengCard
	}
	return nil
}

func (m *Game_AckActGang) GetHandCard() []*CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *Game_AckActGang) GetGangCard() []*CardInfo {
	if m != nil {
		return m.GangCard
	}
	return nil
}

// 胡牌
type Game_ActHu struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	HuCard           *CardInfo    `protobuf:"bytes,5,opt,name=huCard" json:"huCard,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_ActHu) Reset()                    { *m = Game_ActHu{} }
func (m *Game_ActHu) String() string            { return proto.CompactTextString(m) }
func (*Game_ActHu) ProtoMessage()               {}
func (*Game_ActHu) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *Game_ActHu) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_ActHu) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_ActHu) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_ActHu) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_ActHu) GetHuCard() *CardInfo {
	if m != nil {
		return m.HuCard
	}
	return nil
}

type Game_AckActHu struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	PengCard         []*CardInfo  `protobuf:"bytes,5,rep,name=pengCard" json:"pengCard,omitempty"`
	HandCard         []*CardInfo  `protobuf:"bytes,6,rep,name=HandCard" json:"HandCard,omitempty"`
	GangCard         []*CardInfo  `protobuf:"bytes,7,rep,name=GangCard" json:"GangCard,omitempty"`
	HuCard           *CardInfo    `protobuf:"bytes,8,opt,name=huCard" json:"huCard,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_AckActHu) Reset()                    { *m = Game_AckActHu{} }
func (m *Game_AckActHu) String() string            { return proto.CompactTextString(m) }
func (*Game_AckActHu) ProtoMessage()               {}
func (*Game_AckActHu) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

func (m *Game_AckActHu) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_AckActHu) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_AckActHu) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_AckActHu) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckActHu) GetPengCard() []*CardInfo {
	if m != nil {
		return m.PengCard
	}
	return nil
}

func (m *Game_AckActHu) GetHandCard() []*CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *Game_AckActHu) GetGangCard() []*CardInfo {
	if m != nil {
		return m.GangCard
	}
	return nil
}

func (m *Game_AckActHu) GetHuCard() *CardInfo {
	if m != nil {
		return m.HuCard
	}
	return nil
}

// 过牌
type Game_ActGuo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_ActGuo) Reset()                    { *m = Game_ActGuo{} }
func (m *Game_ActGuo) String() string            { return proto.CompactTextString(m) }
func (*Game_ActGuo) ProtoMessage()               {}
func (*Game_ActGuo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{16} }

func (m *Game_ActGuo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_ActGuo) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_ActGuo) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_ActGuo) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

// 过牌收到服务器确认后，还是要协议 【PID_game_SENDOVERTURN ：game_SendOverTurn】 后结束此轮
type Game_AckActGuo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_AckActGuo) Reset()                    { *m = Game_AckActGuo{} }
func (m *Game_AckActGuo) String() string            { return proto.CompactTextString(m) }
func (*Game_AckActGuo) ProtoMessage()               {}
func (*Game_AckActGuo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

func (m *Game_AckActGuo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_AckActGuo) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_AckActGuo) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_AckActGuo) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

// 出牌（和ACK）后，轮到下一轮的玩家，【当前玩家出牌结束】或【过牌、胡牌后】，结束自己的回合
type Game_OverTurn struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId          *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId          *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	Seat             *int32       `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	Nextseat         *int32       `protobuf:"varint,5,opt,name=nextseat" json:"nextseat,omitempty"`
	ChuCard          *CardInfo    `protobuf:"bytes,6,opt,name=chuCard" json:"chuCard,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Game_OverTurn) Reset()                    { *m = Game_OverTurn{} }
func (m *Game_OverTurn) String() string            { return proto.CompactTextString(m) }
func (*Game_OverTurn) ProtoMessage()               {}
func (*Game_OverTurn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{18} }

func (m *Game_OverTurn) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_OverTurn) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_OverTurn) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_OverTurn) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_OverTurn) GetNextseat() int32 {
	if m != nil && m.Nextseat != nil {
		return *m.Nextseat
	}
	return 0
}

func (m *Game_OverTurn) GetChuCard() *CardInfo {
	if m != nil {
		return m.ChuCard
	}
	return nil
}

// 发送游戏信息(广播)
type Game_SendGameInfo struct {
	Header  *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MatchId *int32       `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	TableId *int32       `protobuf:"varint,3,opt,name=tableId" json:"tableId,omitempty"`
	// 1. 首先是牌桌的玩家数据（玩家数据包括其id昵称筹码头像等基本信息，其手牌数据，以及自己打出的牌的数据，还有状态是否已经胡牌了，玩家在整局的总输赢）
	PlayerInfo []*PlayerInfo `protobuf:"bytes,4,rep,name=playerInfo" json:"playerInfo,omitempty"`
	// 2. 桌面信息（包括：游戏是否结束，当前轮到哪个玩家，倒计时剩余时间）
	DeskGameInfo *DeskGameInfo `protobuf:"bytes,5,opt,name=deskGameInfo" json:"deskGameInfo,omitempty"`
	//
	SenderUserId     *uint32 `protobuf:"varint,6,opt,name=senderUserId" json:"senderUserId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_SendGameInfo) Reset()                    { *m = Game_SendGameInfo{} }
func (m *Game_SendGameInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_SendGameInfo) ProtoMessage()               {}
func (*Game_SendGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{19} }

func (m *Game_SendGameInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Game_SendGameInfo) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *Game_SendGameInfo) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Game_SendGameInfo) GetPlayerInfo() []*PlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *Game_SendGameInfo) GetDeskGameInfo() *DeskGameInfo {
	if m != nil {
		return m.DeskGameInfo
	}
	return nil
}

func (m *Game_SendGameInfo) GetSenderUserId() uint32 {
	if m != nil && m.SenderUserId != nil {
		return *m.SenderUserId
	}
	return 0
}

func init() {
	proto.RegisterType((*Game_Opening)(nil), "mjproto.game_Opening")
	proto.RegisterType((*Game_DealCards)(nil), "mjproto.game_DealCards")
	proto.RegisterType((*Game_ExchangeCards)(nil), "mjproto.game_ExchangeCards")
	proto.RegisterType((*Game_AckExchangeCards)(nil), "mjproto.game_AckExchangeCards")
	proto.RegisterType((*Game_DingQue)(nil), "mjproto.game_DingQue")
	proto.RegisterType((*Game_BroadcastBeginDingQue)(nil), "mjproto.game_BroadcastBeginDingQue")
	proto.RegisterType((*Game_BroadcastBeginExchange)(nil), "mjproto.game_BroadcastBeginExchange")
	proto.RegisterType((*Game_GetInCard)(nil), "mjproto.game_GetInCard")
	proto.RegisterType((*Game_SendOutCard)(nil), "mjproto.game_SendOutCard")
	proto.RegisterType((*Game_AckSendOutCard)(nil), "mjproto.game_AckSendOutCard")
	proto.RegisterType((*Game_ActPeng)(nil), "mjproto.game_ActPeng")
	proto.RegisterType((*Game_AckActPeng)(nil), "mjproto.game_AckActPeng")
	proto.RegisterType((*Game_ActGang)(nil), "mjproto.game_ActGang")
	proto.RegisterType((*Game_AckActGang)(nil), "mjproto.game_AckActGang")
	proto.RegisterType((*Game_ActHu)(nil), "mjproto.game_ActHu")
	proto.RegisterType((*Game_AckActHu)(nil), "mjproto.game_AckActHu")
	proto.RegisterType((*Game_ActGuo)(nil), "mjproto.game_ActGuo")
	proto.RegisterType((*Game_AckActGuo)(nil), "mjproto.game_AckActGuo")
	proto.RegisterType((*Game_OverTurn)(nil), "mjproto.game_OverTurn")
	proto.RegisterType((*Game_SendGameInfo)(nil), "mjproto.game_SendGameInfo")
}

var fileDescriptor3 = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0x5f, 0x6e, 0xd3, 0x4e,
	0x10, 0xfe, 0x39, 0x89, 0x9d, 0xfc, 0x26, 0x7f, 0xeb, 0xb6, 0x10, 0x95, 0x07, 0xca, 0x82, 0x04,
	0xa2, 0x52, 0x1e, 0x7a, 0x83, 0xa6, 0x41, 0x49, 0xc4, 0x43, 0x52, 0xf1, 0xef, 0x31, 0xda, 0xda,
	0x53, 0x27, 0x6d, 0xb2, 0x8e, 0xd6, 0x36, 0x2a, 0x07, 0xe8, 0x03, 0x67, 0xe0, 0x00, 0x1c, 0x05,
	0x4e, 0xc0, 0x55, 0x78, 0x65, 0xbd, 0x59, 0x3b, 0x6e, 0xc1, 0xd4, 0x45, 0x31, 0xe2, 0x25, 0x72,
	0x66, 0x67, 0xbf, 0xf9, 0xe6, 0x9b, 0xd9, 0xd9, 0x05, 0x73, 0x41, 0xa7, 0xe7, 0x2e, 0x73, 0x26,
	0xcb, 0x39, 0xfd, 0xd0, 0x59, 0x72, 0xd7, 0x77, 0xcd, 0xf2, 0xe2, 0x5c, 0x7e, 0xec, 0xc1, 0x29,
	0xf5, 0x70, 0x65, 0x24, 0x6f, 0xa1, 0xe6, 0xd0, 0x05, 0x4e, 0x46, 0x4b, 0x64, 0x33, 0xe6, 0x98,
	0x4f, 0xc0, 0x98, 0x22, 0xb5, 0x91, 0xb7, 0xb5, 0x7d, 0xed, 0x59, 0xf5, 0x70, 0xa7, 0xa3, 0x76,
	0x75, 0xc6, 0xe1, 0xef, 0x40, 0xae, 0x99, 0x4d, 0x28, 0x2f, 0xa8, 0x6f, 0x4d, 0x87, 0x76, 0xbb,
	0x20, 0xdc, 0xf4, 0xd0, 0xe0, 0xd3, 0xd3, 0x39, 0x0a, 0x43, 0x31, 0x34, 0x90, 0x09, 0x34, 0x24,
	0x6e, 0x0f, 0xe9, 0xfc, 0x98, 0x72, 0xdb, 0xcb, 0x88, 0xfc, 0x14, 0x20, 0xa4, 0x8c, 0x3c, 0xdc,
	0x24, 0xc1, 0xab, 0x87, 0xdb, 0x6b, 0xcf, 0x78, 0x89, 0x7c, 0xd6, 0xc0, 0x94, 0x11, 0x5e, 0x5c,
	0x5a, 0x53, 0xca, 0x1c, 0xbc, 0x4b, 0x94, 0x5b, 0xf9, 0x9b, 0x35, 0x28, 0x79, 0x48, 0xfd, 0x76,
	0x49, 0xfe, 0x3b, 0x80, 0x16, 0xaa, 0x30, 0xa3, 0xc0, 0x97, 0x91, 0xda, 0xfa, 0x7e, 0x51, 0xe0,
	0x6f, 0xc5, 0xf8, 0xa1, 0x75, 0xc8, 0xce, 0x5c, 0xb3, 0x01, 0x46, 0xe0, 0x21, 0x17, 0x50, 0x86,
	0xd8, 0x5c, 0x27, 0x57, 0x05, 0xd8, 0x95, 0x4c, 0x8f, 0xac, 0x8b, 0x7f, 0x8e, 0xec, 0x7d, 0x68,
	0x26, 0x9c, 0x25, 0x8a, 0x21, 0x51, 0x9e, 0xaf, 0x17, 0x86, 0x6c, 0x05, 0x52, 0x4e, 0x03, 0xb9,
	0x07, 0x8d, 0xb5, 0xaf, 0xc4, 0xa8, 0x44, 0xbc, 0xec, 0x99, 0x85, 0xed, 0xff, 0x65, 0x4b, 0x04,
	0xaa, 0xd5, 0x7a, 0xa2, 0xcf, 0x4e, 0x02, 0xdc, 0x58, 0xf6, 0x75, 0xd0, 0x2d, 0x77, 0xee, 0x72,
	0x95, 0xfe, 0x5a, 0x7e, 0x5d, 0xca, 0x7f, 0x02, 0x7b, 0x32, 0x6c, 0x97, 0xbb, 0xd4, 0xb6, 0xa8,
	0xe7, 0x77, 0xd1, 0x99, 0xb1, 0xbb, 0x91, 0x88, 0x43, 0x14, 0x84, 0x04, 0x3a, 0x39, 0x86, 0x07,
	0xbf, 0x80, 0x8c, 0x6a, 0x9b, 0x0d, 0x93, 0xbc, 0x53, 0x27, 0xa4, 0x8f, 0xfe, 0x4a, 0xe0, 0x8c,
	0x5c, 0x1e, 0x42, 0xc9, 0x5a, 0x9f, 0x8d, 0x9f, 0xab, 0x41, 0x06, 0xd0, 0x92, 0xc0, 0xaf, 0x90,
	0xd9, 0xaa, 0x01, 0x32, 0x42, 0x0b, 0xe9, 0x42, 0xe8, 0x48, 0x6a, 0xf2, 0x12, 0xb6, 0xa3, 0xc6,
	0xfd, 0x23, 0x30, 0x8e, 0x5e, 0x30, 0xf7, 0x15, 0xd8, 0x47, 0x4d, 0xd5, 0xff, 0xc8, 0xf2, 0xc7,
	0xb8, 0xb9, 0x51, 0x73, 0xa3, 0xfb, 0x1f, 0x43, 0x45, 0x8c, 0x32, 0x47, 0x8e, 0x0f, 0x3d, 0x4d,
	0xa2, 0xaf, 0x1a, 0x34, 0xa3, 0xcc, 0x36, 0x4d, 0x27, 0x49, 0xa0, 0x94, 0x76, 0x62, 0x84, 0xd3,
	0x80, 0x32, 0x5b, 0xb1, 0x4c, 0x77, 0xea, 0x53, 0x85, 0x64, 0xa4, 0x38, 0x5d, 0x93, 0x35, 0xf4,
	0xce, 0x4f, 0x56, 0x87, 0xde, 0x26, 0xeb, 0xb7, 0xeb, 0xb2, 0xe6, 0x4b, 0x27, 0x51, 0xe5, 0x0c,
	0x22, 0x1b, 0x59, 0x44, 0x4e, 0x1b, 0x70, 0xe4, 0x4a, 0x03, 0x88, 0x44, 0x1e, 0x04, 0x39, 0xe5,
	0xf4, 0x48, 0xa0, 0x06, 0xbf, 0x17, 0xf8, 0xbb, 0x06, 0xf5, 0x84, 0xc0, 0xb9, 0x51, 0xf9, 0xbb,
	0xf2, 0x26, 0x32, 0xaf, 0xa4, 0x65, 0x6e, 0x41, 0x35, 0xee, 0xf2, 0xc0, 0xcd, 0x27, 0x6d, 0x72,
	0xa6, 0x46, 0xb2, 0x6a, 0xdf, 0xdc, 0xe2, 0x7c, 0x8a, 0xca, 0x38, 0x7a, 0x8f, 0xfc, 0x75, 0xc0,
	0x59, 0x4e, 0x65, 0x6c, 0x41, 0x85, 0xe1, 0xe5, 0xea, 0x56, 0xd7, 0xa5, 0x85, 0x40, 0xd9, 0x52,
	0x52, 0x1b, 0x69, 0x52, 0x7f, 0xd1, 0x60, 0x2b, 0xbe, 0x40, 0xfa, 0xe2, 0x43, 0xd6, 0x68, 0x53,
	0x0c, 0xe3, 0x07, 0x5e, 0x88, 0xaa, 0x06, 0xe4, 0xcd, 0x07, 0x9e, 0x0c, 0x78, 0x00, 0x35, 0x1b,
	0xbd, 0x8b, 0x88, 0x80, 0x3a, 0x14, 0xbb, 0xb1, 0x6b, 0x2f, 0xb1, 0x68, 0xee, 0x40, 0xcd, 0x13,
	0x6c, 0x91, 0xbf, 0x49, 0xbc, 0xbc, 0xba, 0x85, 0x41, 0x71, 0xfc, 0xdf, 0x8f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xca, 0xe9, 0xeb, 0x77, 0x0c, 0x0b, 0x00, 0x00,
}
