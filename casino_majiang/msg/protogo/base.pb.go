// Code generated by protoc-gen-go.
// source: base.proto
// DO NOT EDIT!

/*
Package mjproto is a generated protocol buffer package.

It is generated from these files:
	base.proto
	mahjong_desk.proto
	mahjong_hall.proto
	mahjong_play.proto

It has these top-level messages:
	ProtoHeader
	WeixinInfo
	CardInfo
	PlayOptions
	RoomTypeInfo
	Game_DissolveDesk
	Game_AckDissolveDesk
	Game_LeaveDesk
	Game_AckLeaveDesk
	Game_Ready
	Game_AckReady
	Game_Message
	Game_SendMessage
	CardType
	WinCoinInfo
	Game_CurrentResult
	EndLotteryInfo
	Game_SendEndLottery
	Game_QuickConn
	Game_AckQuickConn
	Game_Login
	Game_AckLogin
	Game_Notice
	Game_AckNotice
	Game_GameRecord
	Game_BeanUserRecord
	Game_BeanGameRecord
	Game_AckGameRecord
	Game_Feedback
	Game_CreateRoom
	Game_AckCreateRoom
	Game_EnterRoom
	Game_AckEnterRoom
	ComposePoker
	PlayerPoker
	PlayerInfo
	DeskGameInfo
	Game_Opening
	Game_DealCards
	Game_ExchangeCards
	Game_AckExchangeCards
	Game_DingQue
	Game_BroadcastBeginDingQue
	Game_BroadcastBeginExchange
	Game_GetInCard
	Game_SendOutCard
	Game_AckSendOutCard
	Game_ActPeng
	Game_AckActPeng
	Game_ActGang
	Game_AckActGang
	Game_ActHu
	Game_AckActHu
	Game_ActGuo
	Game_AckActGuo
	Game_OverTurn
	Game_SendGameInfo
*/
package mjproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EProtoId int32

const (
	EProtoId_PID_QUICK_CONN               EProtoId = 1
	EProtoId_PID_QUICK_CONN_ACK           EProtoId = 2
	EProtoId_PID_GAME_LOGIN               EProtoId = 3
	EProtoId_PID_GAME_LOGIN_ACK           EProtoId = 4
	EProtoId_PID_CREATEROOM               EProtoId = 5
	EProtoId_PID_CREATEROOM_ACK           EProtoId = 6
	EProtoId_PID_ENTER_ROOM               EProtoId = 7
	EProtoId_PID_ENTER_ROOM_ACK           EProtoId = 8
	EProtoId_PID_SEND_GAMEINFO            EProtoId = 9
	EProtoId_PID_READY                    EProtoId = 10
	EProtoId_PID_READY_ACK                EProtoId = 11
	EProtoId_PID_EXCHANGECARDS            EProtoId = 12
	EProtoId_PID_EXCHANGECARDS_ACK        EProtoId = 13
	EProtoId_PID_DINGQUE                  EProtoId = 14
	EProtoId_PID_OPENING                  EProtoId = 15
	EProtoId_PID_DEAL_CARDS               EProtoId = 16
	EProtoId_PID_GET_IN_CARD              EProtoId = 17
	EProtoId_PID_SEND_OUT_CARD            EProtoId = 18
	EProtoId_PID_PENG_CARD                EProtoId = 19
	EProtoId_PID_PENG_CARD_ACK            EProtoId = 20
	EProtoId_PID_GANG_CARD                EProtoId = 21
	EProtoId_PID_GANG_CARD_ACK            EProtoId = 22
	EProtoId_PID_GUO_CARD                 EProtoId = 23
	EProtoId_PID_GUO_CARD_ACK             EProtoId = 24
	EProtoId_PID_HU_CARD                  EProtoId = 25
	EProtoId_PID_HU_CARD_ACK              EProtoId = 26
	EProtoId_PID_BROADCAST_BEGIN_DINGQUE  EProtoId = 27
	EProtoId_PID_BROADCAST_BEGIN_EXCHANGE EProtoId = 28
	EProtoId_PID_OVERTURN                 EProtoId = 29
	EProtoId_PID_CURRENTRESULT            EProtoId = 30
	EProtoId_PID_SENDENDLOTTERY           EProtoId = 31
	EProtoId_PID_DISSOLVE_DESK            EProtoId = 32
	EProtoId_PID_DISSOLVE_DESK_ACK        EProtoId = 33
	EProtoId_PID_LEAVE_DESK               EProtoId = 34
	EProtoId_PID_LEAVE_DESK_ACK           EProtoId = 35
	EProtoId_PID_MESSAGE                  EProtoId = 36
	EProtoId_PID_SEND_MESSAGE             EProtoId = 37
)

var EProtoId_name = map[int32]string{
	1:  "PID_QUICK_CONN",
	2:  "PID_QUICK_CONN_ACK",
	3:  "PID_GAME_LOGIN",
	4:  "PID_GAME_LOGIN_ACK",
	5:  "PID_CREATEROOM",
	6:  "PID_CREATEROOM_ACK",
	7:  "PID_ENTER_ROOM",
	8:  "PID_ENTER_ROOM_ACK",
	9:  "PID_SEND_GAMEINFO",
	10: "PID_READY",
	11: "PID_READY_ACK",
	12: "PID_EXCHANGECARDS",
	13: "PID_EXCHANGECARDS_ACK",
	14: "PID_DINGQUE",
	15: "PID_OPENING",
	16: "PID_DEAL_CARDS",
	17: "PID_GET_IN_CARD",
	18: "PID_SEND_OUT_CARD",
	19: "PID_PENG_CARD",
	20: "PID_PENG_CARD_ACK",
	21: "PID_GANG_CARD",
	22: "PID_GANG_CARD_ACK",
	23: "PID_GUO_CARD",
	24: "PID_GUO_CARD_ACK",
	25: "PID_HU_CARD",
	26: "PID_HU_CARD_ACK",
	27: "PID_BROADCAST_BEGIN_DINGQUE",
	28: "PID_BROADCAST_BEGIN_EXCHANGE",
	29: "PID_OVERTURN",
	30: "PID_CURRENTRESULT",
	31: "PID_SENDENDLOTTERY",
	32: "PID_DISSOLVE_DESK",
	33: "PID_DISSOLVE_DESK_ACK",
	34: "PID_LEAVE_DESK",
	35: "PID_LEAVE_DESK_ACK",
	36: "PID_MESSAGE",
	37: "PID_SEND_MESSAGE",
}
var EProtoId_value = map[string]int32{
	"PID_QUICK_CONN":               1,
	"PID_QUICK_CONN_ACK":           2,
	"PID_GAME_LOGIN":               3,
	"PID_GAME_LOGIN_ACK":           4,
	"PID_CREATEROOM":               5,
	"PID_CREATEROOM_ACK":           6,
	"PID_ENTER_ROOM":               7,
	"PID_ENTER_ROOM_ACK":           8,
	"PID_SEND_GAMEINFO":            9,
	"PID_READY":                    10,
	"PID_READY_ACK":                11,
	"PID_EXCHANGECARDS":            12,
	"PID_EXCHANGECARDS_ACK":        13,
	"PID_DINGQUE":                  14,
	"PID_OPENING":                  15,
	"PID_DEAL_CARDS":               16,
	"PID_GET_IN_CARD":              17,
	"PID_SEND_OUT_CARD":            18,
	"PID_PENG_CARD":                19,
	"PID_PENG_CARD_ACK":            20,
	"PID_GANG_CARD":                21,
	"PID_GANG_CARD_ACK":            22,
	"PID_GUO_CARD":                 23,
	"PID_GUO_CARD_ACK":             24,
	"PID_HU_CARD":                  25,
	"PID_HU_CARD_ACK":              26,
	"PID_BROADCAST_BEGIN_DINGQUE":  27,
	"PID_BROADCAST_BEGIN_EXCHANGE": 28,
	"PID_OVERTURN":                 29,
	"PID_CURRENTRESULT":            30,
	"PID_SENDENDLOTTERY":           31,
	"PID_DISSOLVE_DESK":            32,
	"PID_DISSOLVE_DESK_ACK":        33,
	"PID_LEAVE_DESK":               34,
	"PID_LEAVE_DESK_ACK":           35,
	"PID_MESSAGE":                  36,
	"PID_SEND_MESSAGE":             37,
}

func (x EProtoId) Enum() *EProtoId {
	p := new(EProtoId)
	*p = x
	return p
}
func (x EProtoId) String() string {
	return proto.EnumName(EProtoId_name, int32(x))
}
func (x *EProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProtoId_value, data, "EProtoId")
	if err != nil {
		return err
	}
	*x = EProtoId(value)
	return nil
}
func (EProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DDErrorCode int32

const (
	DDErrorCode_ERRORCODE_SUCC DDErrorCode = 0
	// -101   -200	游戏异常
	DDErrorCode_ERRORCODE_CREATE_DESK_DIAMOND_NOTENOUGH DDErrorCode = -101
	DDErrorCode_ERRORCODE_CREATE_DESK_USER_NOTFOUND     DDErrorCode = -102
	DDErrorCode_ERRORCODE_INTO_DESK_NOTFOUND            DDErrorCode = -103
	DDErrorCode_ERRORCODE_GAME_READY_REPEAT             DDErrorCode = -110
	DDErrorCode_ERRORCODE_GAME_READY_CHIP_NOT_ENOUGH    DDErrorCode = -111
)

var DDErrorCode_name = map[int32]string{
	0:    "ERRORCODE_SUCC",
	-101: "ERRORCODE_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "ERRORCODE_CREATE_DESK_USER_NOTFOUND",
	-103: "ERRORCODE_INTO_DESK_NOTFOUND",
	-110: "ERRORCODE_GAME_READY_REPEAT",
	-111: "ERRORCODE_GAME_READY_CHIP_NOT_ENOUGH",
}
var DDErrorCode_value = map[string]int32{
	"ERRORCODE_SUCC":                          0,
	"ERRORCODE_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"ERRORCODE_CREATE_DESK_USER_NOTFOUND":     -102,
	"ERRORCODE_INTO_DESK_NOTFOUND":            -103,
	"ERRORCODE_GAME_READY_REPEAT":             -110,
	"ERRORCODE_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x DDErrorCode) Enum() *DDErrorCode {
	p := new(DDErrorCode)
	*p = x
	return p
}
func (x DDErrorCode) String() string {
	return proto.EnumName(DDErrorCode_name, int32(x))
}
func (x *DDErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DDErrorCode_value, data, "DDErrorCode")
	if err != nil {
		return err
	}
	*x = DDErrorCode(value)
	return nil
}
func (DDErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 房间类型信息：包含房间类型和对应的局数、封顶、玩法等信息
// 房间类型枚举
type MJRoomType int32

const (
	MJRoomType_roomType_xueZhanDaoDi    MJRoomType = 0
	MJRoomType_roomType_sanRenLiangFang MJRoomType = 1
	MJRoomType_roomType_siRenLiangFang  MJRoomType = 2
	MJRoomType_roomType_deYangMaJiang   MJRoomType = 3
	MJRoomType_roomType_daoDaoHu        MJRoomType = 4
	MJRoomType_roomType_xueLiuChengHe   MJRoomType = 5
)

var MJRoomType_name = map[int32]string{
	0: "roomType_xueZhanDaoDi",
	1: "roomType_sanRenLiangFang",
	2: "roomType_siRenLiangFang",
	3: "roomType_deYangMaJiang",
	4: "roomType_daoDaoHu",
	5: "roomType_xueLiuChengHe",
}
var MJRoomType_value = map[string]int32{
	"roomType_xueZhanDaoDi":    0,
	"roomType_sanRenLiangFang": 1,
	"roomType_siRenLiangFang":  2,
	"roomType_deYangMaJiang":   3,
	"roomType_daoDaoHu":        4,
	"roomType_xueLiuChengHe":   5,
}

func (x MJRoomType) Enum() *MJRoomType {
	p := new(MJRoomType)
	*p = x
	return p
}
func (x MJRoomType) String() string {
	return proto.EnumName(MJRoomType_name, int32(x))
}
func (x *MJRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJRoomType_value, data, "MJRoomType")
	if err != nil {
		return err
	}
	*x = MJRoomType(value)
	return nil
}
func (MJRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ProtoHeader 需要在每个 Message 中作为第一个字段
type ProtoHeader struct {
	Version          *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Code             *int32  `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	Error            *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProtoHeader) Reset()                    { *m = ProtoHeader{} }
func (m *ProtoHeader) String() string            { return proto.CompactTextString(m) }
func (*ProtoHeader) ProtoMessage()               {}
func (*ProtoHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProtoHeader) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ProtoHeader) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ProtoHeader) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ProtoHeader) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

// 微信信息
type WeixinInfo struct {
	OpenId           *string `protobuf:"bytes,1,opt,name=openId" json:"openId,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	HeadUrl          *string `protobuf:"bytes,3,opt,name=headUrl" json:"headUrl,omitempty"`
	Sex              *int32  `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
	City             *string `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	UnionId          *string `protobuf:"bytes,6,opt,name=unionId" json:"unionId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WeixinInfo) Reset()                    { *m = WeixinInfo{} }
func (m *WeixinInfo) String() string            { return proto.CompactTextString(m) }
func (*WeixinInfo) ProtoMessage()               {}
func (*WeixinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WeixinInfo) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *WeixinInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WeixinInfo) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *WeixinInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *WeixinInfo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *WeixinInfo) GetUnionId() string {
	if m != nil && m.UnionId != nil {
		return *m.UnionId
	}
	return ""
}

// 麻将牌
type CardInfo struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id               *int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CardInfo) Reset()                    { *m = CardInfo{} }
func (m *CardInfo) String() string            { return proto.CompactTextString(m) }
func (*CardInfo) ProtoMessage()               {}
func (*CardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CardInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CardInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 玩法：包括自摸、点炮、以及可多选的玩法
type PlayOptions struct {
	ZiMoRadio        *int32  `protobuf:"varint,1,opt,name=ziMoRadio" json:"ziMoRadio,omitempty"`
	DianGangHuaRadio *int32  `protobuf:"varint,2,opt,name=dianGangHuaRadio" json:"dianGangHuaRadio,omitempty"`
	OthersCheckBox   []int32 `protobuf:"varint,3,rep,name=othersCheckBox" json:"othersCheckBox,omitempty"`
	HuRadio          *int32  `protobuf:"varint,4,opt,name=huRadio" json:"huRadio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayOptions) Reset()                    { *m = PlayOptions{} }
func (m *PlayOptions) String() string            { return proto.CompactTextString(m) }
func (*PlayOptions) ProtoMessage()               {}
func (*PlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PlayOptions) GetZiMoRadio() int32 {
	if m != nil && m.ZiMoRadio != nil {
		return *m.ZiMoRadio
	}
	return 0
}

func (m *PlayOptions) GetDianGangHuaRadio() int32 {
	if m != nil && m.DianGangHuaRadio != nil {
		return *m.DianGangHuaRadio
	}
	return 0
}

func (m *PlayOptions) GetOthersCheckBox() []int32 {
	if m != nil {
		return m.OthersCheckBox
	}
	return nil
}

func (m *PlayOptions) GetHuRadio() int32 {
	if m != nil && m.HuRadio != nil {
		return *m.HuRadio
	}
	return 0
}

type RoomTypeInfo struct {
	MjRoomType       *MJRoomType  `protobuf:"varint,1,opt,name=mjRoomType,enum=mjproto.MJRoomType" json:"mjRoomType,omitempty"`
	BoardsCout       *int32       `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	CapMax           *int64       `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	PlayOptions      *PlayOptions `protobuf:"bytes,4,opt,name=playOptions" json:"playOptions,omitempty"`
	CardsNum         *int32       `protobuf:"varint,5,opt,name=cardsNum" json:"cardsNum,omitempty"`
	Settlement       *int32       `protobuf:"varint,6,opt,name=settlement" json:"settlement,omitempty"`
	BaseValue        *int64       `protobuf:"varint,7,opt,name=baseValue" json:"baseValue,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RoomTypeInfo) Reset()                    { *m = RoomTypeInfo{} }
func (m *RoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomTypeInfo) ProtoMessage()               {}
func (*RoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RoomTypeInfo) GetMjRoomType() MJRoomType {
	if m != nil && m.MjRoomType != nil {
		return *m.MjRoomType
	}
	return MJRoomType_roomType_xueZhanDaoDi
}

func (m *RoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *RoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *RoomTypeInfo) GetPlayOptions() *PlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetCardsNum() int32 {
	if m != nil && m.CardsNum != nil {
		return *m.CardsNum
	}
	return 0
}

func (m *RoomTypeInfo) GetSettlement() int32 {
	if m != nil && m.Settlement != nil {
		return *m.Settlement
	}
	return 0
}

func (m *RoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func init() {
	proto.RegisterType((*ProtoHeader)(nil), "mjproto.ProtoHeader")
	proto.RegisterType((*WeixinInfo)(nil), "mjproto.WeixinInfo")
	proto.RegisterType((*CardInfo)(nil), "mjproto.CardInfo")
	proto.RegisterType((*PlayOptions)(nil), "mjproto.PlayOptions")
	proto.RegisterType((*RoomTypeInfo)(nil), "mjproto.RoomTypeInfo")
	proto.RegisterEnum("mjproto.EProtoId", EProtoId_name, EProtoId_value)
	proto.RegisterEnum("mjproto.DDErrorCode", DDErrorCode_name, DDErrorCode_value)
	proto.RegisterEnum("mjproto.MJRoomType", MJRoomType_name, MJRoomType_value)
}

var fileDescriptor0 = []byte{
	// 962 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x54, 0xed, 0x52, 0xdb, 0x46,
	0x14, 0xad, 0x71, 0x0c, 0xf8, 0x1a, 0xcc, 0xb2, 0x7c, 0xc4, 0x09, 0xb4, 0xa1, 0x4e, 0x3a, 0x49,
	0xf8, 0xc1, 0xb4, 0x69, 0x5f, 0x40, 0x48, 0x8b, 0xad, 0x60, 0x6b, 0x1d, 0x7d, 0xd0, 0xd2, 0x3f,
	0x1a, 0xc5, 0xde, 0x06, 0x05, 0x2c, 0x79, 0x64, 0x2b, 0x63, 0xfa, 0x16, 0xe9, 0xbf, 0xb6, 0x4f,
	0xd1, 0xbe, 0x40, 0x1f, 0xad, 0xbd, 0xbb, 0xf2, 0x5a, 0x30, 0x85, 0xc1, 0x33, 0xd2, 0xb9, 0xe7,
	0xde, 0x7b, 0xf6, 0xdc, 0xd5, 0x05, 0x78, 0x1f, 0x4d, 0xc5, 0xc9, 0x24, 0x4b, 0x67, 0x29, 0x5d,
	0x1b, 0x7f, 0x54, 0x0f, 0xed, 0x73, 0x68, 0x0c, 0xe4, 0x43, 0x57, 0x44, 0x23, 0x91, 0xd1, 0x2d,
	0x58, 0xfb, 0x24, 0xb2, 0x69, 0x9c, 0x26, 0xad, 0xca, 0x51, 0xe5, 0x55, 0x9d, 0x36, 0x61, 0x35,
	0x9f, 0x8a, 0xcc, 0x1e, 0xb5, 0x56, 0xf0, 0x7d, 0x93, 0x6e, 0xc0, 0xa3, 0x61, 0x3a, 0x12, 0xad,
	0x2a, 0xbe, 0xd5, 0xe8, 0x26, 0xd4, 0x44, 0x96, 0xa5, 0x59, 0xeb, 0x91, 0x24, 0xb7, 0xaf, 0x01,
	0x7e, 0x14, 0xf1, 0x3c, 0x4e, 0xec, 0xe4, 0x97, 0x54, 0xa6, 0xa6, 0x13, 0x91, 0x60, 0x6a, 0x51,
	0x8a, 0xc0, 0x7a, 0x12, 0x0f, 0xaf, 0x9d, 0x68, 0x2c, 0x54, 0xb1, 0xba, 0xec, 0x76, 0x85, 0x7d,
	0x83, 0xec, 0x46, 0xd5, 0xab, 0xd3, 0x06, 0x54, 0xa7, 0x62, 0xae, 0xaa, 0xd5, 0x54, 0xab, 0x78,
	0x76, 0xdb, 0xaa, 0x69, 0x6e, 0x9e, 0xa0, 0x2e, 0x2c, 0xb7, 0xaa, 0x9a, 0x7d, 0x0f, 0xeb, 0x66,
	0x94, 0x8d, 0x54, 0x2b, 0xa4, 0xce, 0x6e, 0x27, 0x42, 0x35, 0x52, 0xaa, 0x3e, 0x45, 0x37, 0x79,
	0xd1, 0xa5, 0x46, 0x01, 0x56, 0xe2, 0x51, 0x21, 0xb8, 0x3d, 0xc4, 0xe3, 0xde, 0x44, 0xb7, 0x7c,
	0x32, 0xc3, 0x52, 0x53, 0xba, 0x0d, 0xf5, 0x5f, 0xe3, 0x7e, 0xea, 0x46, 0xa3, 0x38, 0x5d, 0x24,
	0xb7, 0x80, 0x8c, 0xe2, 0x28, 0xe9, 0x44, 0xc9, 0x87, 0x6e, 0x1e, 0x15, 0x91, 0xa2, 0xce, 0x3e,
	0x34, 0xd3, 0xd9, 0x15, 0xba, 0x63, 0x5e, 0x89, 0xe1, 0xf5, 0x69, 0x3a, 0xc7, 0x9a, 0x55, 0xc4,
	0xe5, 0x29, 0xf2, 0x82, 0xa8, 0x84, 0xb7, 0xff, 0xa9, 0xc0, 0x86, 0x9b, 0xa6, 0x63, 0x1f, 0x25,
	0x29, 0x79, 0x2f, 0x01, 0xc6, 0x1f, 0x35, 0xa2, 0xfa, 0x34, 0xdf, 0xec, 0x9c, 0x2c, 0x46, 0x70,
	0xd2, 0x7f, 0xab, 0x43, 0x14, 0xb5, 0xbe, 0x4f, 0xf1, 0x50, 0x53, 0x33, 0xcd, 0x67, 0x8b, 0xb6,
	0x68, 0xe3, 0x30, 0x9a, 0xf4, 0xa3, 0xb9, 0x3a, 0x42, 0x95, 0xbe, 0x86, 0xc6, 0xa4, 0x3c, 0x82,
	0x6a, 0xd9, 0x78, 0xb3, 0xbb, 0xac, 0x76, 0xf7, 0x78, 0xe8, 0xf8, 0x50, 0x56, 0x73, 0xf2, 0xb1,
	0x72, 0xb1, 0x26, 0x1b, 0x4c, 0xc5, 0x6c, 0x76, 0x23, 0xc6, 0x22, 0x99, 0x29, 0x23, 0x6b, 0xd2,
	0x04, 0x79, 0x33, 0x2e, 0x94, 0x65, 0x6b, 0xb2, 0xc7, 0xf1, 0xdf, 0xab, 0xb0, 0xce, 0xd4, 0xbd,
	0xb0, 0x47, 0x98, 0xd3, 0x1c, 0xd8, 0x56, 0xf8, 0x2e, 0xb0, 0xcd, 0xf3, 0xd0, 0xe4, 0x8e, 0x43,
	0x2a, 0xe8, 0x05, 0xbd, 0x8f, 0x85, 0x86, 0x79, 0x4e, 0x56, 0x34, 0xb7, 0x63, 0xf4, 0x59, 0xd8,
	0xe3, 0x1d, 0xdb, 0x21, 0x55, 0xcd, 0x2d, 0x31, 0xc5, 0x7d, 0xa4, 0xb9, 0xa6, 0xcb, 0x0c, 0x9f,
	0xb9, 0x9c, 0xf7, 0x49, 0x4d, 0x73, 0x4b, 0x4c, 0x71, 0x57, 0x35, 0x97, 0x39, 0x88, 0x86, 0x8a,
	0xbb, 0xa6, 0xb9, 0x25, 0xa6, 0xb8, 0xeb, 0x74, 0x0f, 0xb6, 0x25, 0xee, 0x31, 0xa7, 0x68, 0x6a,
	0x3b, 0x67, 0x9c, 0xd4, 0xf1, 0x56, 0xd4, 0x25, 0x8c, 0x95, 0xad, 0x4b, 0x02, 0x78, 0xea, 0xcd,
	0xe5, 0xab, 0x4a, 0x6c, 0xe8, 0x44, 0xf6, 0x93, 0xd9, 0x35, 0x9c, 0x0e, 0x33, 0x0d, 0xd7, 0xf2,
	0xc8, 0x06, 0x7d, 0x02, 0x7b, 0xff, 0x83, 0x55, 0xc6, 0x26, 0x8e, 0xbe, 0x21, 0x43, 0x96, 0xed,
	0x74, 0xde, 0x05, 0x8c, 0x34, 0x35, 0xc0, 0x07, 0xcc, 0x41, 0x8c, 0x6c, 0x69, 0xe1, 0x16, 0x33,
	0x7a, 0x61, 0x51, 0x90, 0xd0, 0x1d, 0xd8, 0x52, 0x86, 0x30, 0x3f, 0x44, 0x33, 0x24, 0x4a, 0xb6,
	0xef, 0xa9, 0xe6, 0x81, 0x5f, 0xc0, 0x54, 0xcb, 0xc4, 0x7a, 0x9d, 0x02, 0xda, 0xd1, 0xcc, 0x25,
	0xa4, 0xb4, 0xec, 0x6a, 0x66, 0xc7, 0xd0, 0xcc, 0x3d, 0xcd, 0x5c, 0x42, 0x8a, 0xb9, 0x8f, 0xd7,
	0x62, 0x43, 0xc1, 0x01, 0x2f, 0x88, 0x8f, 0xe9, 0x2e, 0x90, 0xbb, 0x88, 0xe2, 0xb5, 0xf4, 0x61,
	0xba, 0x41, 0x41, 0x7b, 0xa2, 0x85, 0x2f, 0x00, 0xc5, 0x7a, 0x4a, 0x9f, 0xc1, 0x81, 0x04, 0x4f,
	0x5d, 0x6e, 0x58, 0xa6, 0xe1, 0xf9, 0xe1, 0x29, 0x93, 0x33, 0xd6, 0x9e, 0x1c, 0xd0, 0x23, 0x38,
	0x7c, 0x88, 0xa0, 0xfd, 0x24, 0x87, 0x5a, 0x10, 0xbf, 0x60, 0xae, 0x1f, 0xb8, 0x0e, 0xf9, 0x52,
	0x2b, 0x37, 0x03, 0xd7, 0xc5, 0xf9, 0xba, 0xcc, 0x0b, 0x7a, 0x3e, 0xf9, 0x4a, 0x8f, 0x5c, 0x9a,
	0x84, 0xff, 0x3d, 0xee, 0xe3, 0xe8, 0x2f, 0xc9, 0x33, 0x4d, 0xb7, 0x6c, 0xcf, 0xe3, 0xbd, 0x0b,
	0x86, 0x76, 0x7b, 0xe7, 0xe4, 0x48, 0x4f, 0xee, 0x1e, 0xac, 0x54, 0x7f, 0xad, 0xe7, 0xd2, 0x63,
	0x86, 0xa6, 0xb7, 0x75, 0xf5, 0x12, 0x53, 0xdc, 0xe7, 0xda, 0x87, 0x3e, 0xf3, 0x3c, 0x03, 0xf5,
	0xbe, 0xd0, 0x76, 0xa9, 0x59, 0x69, 0xf4, 0x9b, 0xe3, 0xcf, 0x2b, 0xd0, 0xb0, 0x2c, 0x26, 0xf7,
	0xa1, 0x89, 0x2b, 0x52, 0xb6, 0x60, 0xae, 0xcb, 0x5d, 0x93, 0x5b, 0x2c, 0xf4, 0x02, 0xd3, 0x24,
	0x5f, 0xd0, 0x1f, 0xe0, 0x65, 0x89, 0x15, 0xb7, 0xbc, 0xe8, 0x64, 0xd9, 0x46, 0x9f, 0x63, 0x39,
	0x87, 0xfb, 0xcc, 0xe1, 0x41, 0xa7, 0x4b, 0xfe, 0xfc, 0x77, 0xf1, 0x57, 0xa1, 0xdf, 0xc2, 0xf3,
	0x87, 0xb3, 0x02, 0x0f, 0xaf, 0x3e, 0xa6, 0x9c, 0xf1, 0xc0, 0xb1, 0xc8, 0x1f, 0x65, 0xc6, 0x6b,
	0x38, 0x2c, 0x33, 0x6c, 0xc7, 0xe7, 0x05, 0x7f, 0x49, 0xfd, 0xbd, 0xa4, 0xbe, 0x82, 0x83, 0x92,
	0xaa, 0x3e, 0xd2, 0xe2, 0x9b, 0x70, 0xd9, 0x00, 0x1b, 0x91, 0xdf, 0x4a, 0xe6, 0x77, 0xf0, 0xe2,
	0x41, 0xa6, 0xd9, 0xb5, 0x07, 0xb2, 0x74, 0xb8, 0x50, 0xfe, 0x79, 0x99, 0x72, 0xfc, 0x57, 0x05,
	0xe0, 0xce, 0x7e, 0xc3, 0x81, 0x64, 0x8b, 0xe7, 0x70, 0x9e, 0x8b, 0x9f, 0xaf, 0xa2, 0xc4, 0x8a,
	0x52, 0x2b, 0x46, 0x67, 0x0e, 0xa1, 0xb5, 0x0c, 0x4d, 0xa3, 0xc4, 0x15, 0x49, 0x0f, 0xd7, 0xf0,
	0x87, 0x33, 0xfc, 0xe1, 0xbe, 0x39, 0x80, 0xc7, 0x65, 0x34, 0xbe, 0x17, 0x5c, 0xa1, 0x4f, 0x61,
	0x7f, 0x19, 0x1c, 0x89, 0x4b, 0x04, 0xfb, 0xd1, 0x5b, 0x19, 0xc7, 0xe5, 0x83, 0x37, 0xa3, 0x8c,
	0x61, 0xab, 0x28, 0xed, 0xe6, 0xb8, 0x7b, 0xee, 0xa6, 0xa0, 0x90, 0x5e, 0x9c, 0xe3, 0x52, 0xc7,
	0x8d, 0x2f, 0x48, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0x08, 0x6c, 0x9b, 0x28, 0x07,
	0x00, 0x00,
}
