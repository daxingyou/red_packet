// Code generated by protoc-gen-go.
// source: base.proto
// DO NOT EDIT!

/*
Package mjproto is a generated protocol buffer package.

It is generated from these files:
	base.proto
	mahjong_desk.proto
	mahjong_hall.proto
	mahjong_play.proto

It has these top-level messages:
	ProtoHeader
	WeixinInfo
	CardInfo
	PlayOptions
	RoomTypeInfo
	ComposeCard
	PlayerCard
	PlayerInfo
	DeskGameInfo
	Game_DissolveDesk
	Game_AckDissolveDesk
	Game_ReqDissolveDesk
	Game_AckReqDissolveDesk
	Game_LeaveDesk
	Game_AckLeaveDesk
	Game_Ready
	Game_AckReady
	Game_Message
	Game_SendMessage
	WinCoinInfo
	EndLotteryInfo
	Game_SendCurrentResult
	Game_SendEndLottery
	ServerInfo
	Game_QuickConn
	Game_AckQuickConn
	Game_Login
	Game_AckLogin
	Game_Notice
	Game_AckNotice
	Game_GameRecord
	BeanUserRecord
	BeanGameRecord
	Game_AckGameRecord
	Game_Feedback
	Game_CreateRoom
	Game_AckCreateRoom
	Game_EnterRoom
	Game_AckEnterRoom
	Game_Opening
	Game_DealCards
	Game_ExchangeCards
	Game_AckExchangeCards
	Game_ExchangeCardsEnd
	Game_DingQue
	DingQueEndBean
	Game_DingQueEnd
	Game_BroadcastBeginDingQue
	Game_BroadcastBeginExchange
	Game_GetInCard
	Game_SendOutCard
	Game_AckSendOutCard
	Game_ActPeng
	Game_AckActPeng
	Game_ActGang
	Game_AckActGang
	Game_ActHu
	Game_AckActHu
	Game_ActGuo
	Game_AckActGuo
	Game_OverTurn
	CanhuInfo
	CanhuPaiInfo
	Game_SendGameInfo
*/
package mjproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EProtoId int32

const (
	EProtoId_PID_QUICK_CONN               EProtoId = 1
	EProtoId_PID_QUICK_CONN_ACK           EProtoId = 2
	EProtoId_PID_GAME_LOGIN               EProtoId = 3
	EProtoId_PID_GAME_LOGIN_ACK           EProtoId = 4
	EProtoId_PID_CREATEROOM               EProtoId = 5
	EProtoId_PID_CREATEROOM_ACK           EProtoId = 6
	EProtoId_PID_ENTER_ROOM               EProtoId = 7
	EProtoId_PID_ENTER_ROOM_ACK           EProtoId = 8
	EProtoId_PID_SEND_GAMEINFO            EProtoId = 9
	EProtoId_PID_READY                    EProtoId = 10
	EProtoId_PID_READY_ACK                EProtoId = 11
	EProtoId_PID_EXCHANGECARDS            EProtoId = 12
	EProtoId_PID_EXCHANGECARDS_ACK        EProtoId = 13
	EProtoId_PID_DINGQUE                  EProtoId = 14
	EProtoId_PID_OPENING                  EProtoId = 15
	EProtoId_PID_DEAL_CARDS               EProtoId = 16
	EProtoId_PID_GET_IN_CARD              EProtoId = 17
	EProtoId_PID_SEND_OUT_CARD            EProtoId = 18
	EProtoId_PID_SEND_OUT_CARD_ACK        EProtoId = 19
	EProtoId_PID_PENG_CARD                EProtoId = 20
	EProtoId_PID_PENG_CARD_ACK            EProtoId = 21
	EProtoId_PID_GANG_CARD                EProtoId = 22
	EProtoId_PID_GANG_CARD_ACK            EProtoId = 23
	EProtoId_PID_GUO_CARD                 EProtoId = 24
	EProtoId_PID_GUO_CARD_ACK             EProtoId = 25
	EProtoId_PID_HU_CARD                  EProtoId = 26
	EProtoId_PID_HU_CARD_ACK              EProtoId = 27
	EProtoId_PID_BROADCAST_BEGIN_DINGQUE  EProtoId = 28
	EProtoId_PID_BROADCAST_BEGIN_EXCHANGE EProtoId = 29
	EProtoId_PID_OVERTURN                 EProtoId = 30
	EProtoId_PID_CURRENTRESULT            EProtoId = 31
	EProtoId_PID_SENDENDLOTTERY           EProtoId = 32
	EProtoId_PID_DISSOLVE_DESK            EProtoId = 33
	EProtoId_PID_DISSOLVE_DESK_ACK        EProtoId = 34
	EProtoId_PID_LEAVE_DESK               EProtoId = 35
	EProtoId_PID_LEAVE_DESK_ACK           EProtoId = 36
	EProtoId_PID_MESSAGE                  EProtoId = 37
	EProtoId_PID_SEND_MESSAGE             EProtoId = 38
	EProtoId_PID_GAME_DINGQUEEND          EProtoId = 39
	EProtoId_PID_GAME_GAMERECORD          EProtoId = 40
	EProtoId_PID_GAME_ACKGAMERECORD       EProtoId = 41
	EProtoId_PID_GAME_ACKGAMERECORDEDN    EProtoId = 42
)

var EProtoId_name = map[int32]string{
	1:  "PID_QUICK_CONN",
	2:  "PID_QUICK_CONN_ACK",
	3:  "PID_GAME_LOGIN",
	4:  "PID_GAME_LOGIN_ACK",
	5:  "PID_CREATEROOM",
	6:  "PID_CREATEROOM_ACK",
	7:  "PID_ENTER_ROOM",
	8:  "PID_ENTER_ROOM_ACK",
	9:  "PID_SEND_GAMEINFO",
	10: "PID_READY",
	11: "PID_READY_ACK",
	12: "PID_EXCHANGECARDS",
	13: "PID_EXCHANGECARDS_ACK",
	14: "PID_DINGQUE",
	15: "PID_OPENING",
	16: "PID_DEAL_CARDS",
	17: "PID_GET_IN_CARD",
	18: "PID_SEND_OUT_CARD",
	19: "PID_SEND_OUT_CARD_ACK",
	20: "PID_PENG_CARD",
	21: "PID_PENG_CARD_ACK",
	22: "PID_GANG_CARD",
	23: "PID_GANG_CARD_ACK",
	24: "PID_GUO_CARD",
	25: "PID_GUO_CARD_ACK",
	26: "PID_HU_CARD",
	27: "PID_HU_CARD_ACK",
	28: "PID_BROADCAST_BEGIN_DINGQUE",
	29: "PID_BROADCAST_BEGIN_EXCHANGE",
	30: "PID_OVERTURN",
	31: "PID_CURRENTRESULT",
	32: "PID_SENDENDLOTTERY",
	33: "PID_DISSOLVE_DESK",
	34: "PID_DISSOLVE_DESK_ACK",
	35: "PID_LEAVE_DESK",
	36: "PID_LEAVE_DESK_ACK",
	37: "PID_MESSAGE",
	38: "PID_SEND_MESSAGE",
	39: "PID_GAME_DINGQUEEND",
	40: "PID_GAME_GAMERECORD",
	41: "PID_GAME_ACKGAMERECORD",
	42: "PID_GAME_ACKGAMERECORDEDN",
}
var EProtoId_value = map[string]int32{
	"PID_QUICK_CONN":               1,
	"PID_QUICK_CONN_ACK":           2,
	"PID_GAME_LOGIN":               3,
	"PID_GAME_LOGIN_ACK":           4,
	"PID_CREATEROOM":               5,
	"PID_CREATEROOM_ACK":           6,
	"PID_ENTER_ROOM":               7,
	"PID_ENTER_ROOM_ACK":           8,
	"PID_SEND_GAMEINFO":            9,
	"PID_READY":                    10,
	"PID_READY_ACK":                11,
	"PID_EXCHANGECARDS":            12,
	"PID_EXCHANGECARDS_ACK":        13,
	"PID_DINGQUE":                  14,
	"PID_OPENING":                  15,
	"PID_DEAL_CARDS":               16,
	"PID_GET_IN_CARD":              17,
	"PID_SEND_OUT_CARD":            18,
	"PID_SEND_OUT_CARD_ACK":        19,
	"PID_PENG_CARD":                20,
	"PID_PENG_CARD_ACK":            21,
	"PID_GANG_CARD":                22,
	"PID_GANG_CARD_ACK":            23,
	"PID_GUO_CARD":                 24,
	"PID_GUO_CARD_ACK":             25,
	"PID_HU_CARD":                  26,
	"PID_HU_CARD_ACK":              27,
	"PID_BROADCAST_BEGIN_DINGQUE":  28,
	"PID_BROADCAST_BEGIN_EXCHANGE": 29,
	"PID_OVERTURN":                 30,
	"PID_CURRENTRESULT":            31,
	"PID_SENDENDLOTTERY":           32,
	"PID_DISSOLVE_DESK":            33,
	"PID_DISSOLVE_DESK_ACK":        34,
	"PID_LEAVE_DESK":               35,
	"PID_LEAVE_DESK_ACK":           36,
	"PID_MESSAGE":                  37,
	"PID_SEND_MESSAGE":             38,
	"PID_GAME_DINGQUEEND":          39,
	"PID_GAME_GAMERECORD":          40,
	"PID_GAME_ACKGAMERECORD":       41,
	"PID_GAME_ACKGAMERECORDEDN":    42,
}

func (x EProtoId) Enum() *EProtoId {
	p := new(EProtoId)
	*p = x
	return p
}
func (x EProtoId) String() string {
	return proto.EnumName(EProtoId_name, int32(x))
}
func (x *EProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProtoId_value, data, "EProtoId")
	if err != nil {
		return err
	}
	*x = EProtoId(value)
	return nil
}
func (EProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ErrorCode int32

const (
	ErrorCode_EC_SUCCESS ErrorCode = 0
	// -101   -200	游戏异常
	ErrorCode_EC_CREATE_DESK_DIAMOND_NOTENOUGH ErrorCode = -101
	ErrorCode_EC_CREATE_DESK_USER_NOTFOUND     ErrorCode = -102
	ErrorCode_EC_INTO_DESK_NOTFOUND            ErrorCode = -103
	ErrorCode_EC_GAME_READY_REPEAT             ErrorCode = -110
	ErrorCode_EC_GAME_READY_CHIP_NOT_ENOUGH    ErrorCode = -111
)

var ErrorCode_name = map[int32]string{
	0:    "EC_SUCCESS",
	-101: "EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "EC_CREATE_DESK_USER_NOTFOUND",
	-103: "EC_INTO_DESK_NOTFOUND",
	-110: "EC_GAME_READY_REPEAT",
	-111: "EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var ErrorCode_value = map[string]int32{
	"EC_SUCCESS":                       0,
	"EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"EC_INTO_DESK_NOTFOUND":            -103,
	"EC_GAME_READY_REPEAT":             -110,
	"EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}
func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (x *ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorCode_value, data, "ErrorCode")
	if err != nil {
		return err
	}
	*x = ErrorCode(value)
	return nil
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MJOption int32

const (
	MJOption_EXCHANGE_CARDS       MJOption = 1
	MJOption_ZIMO_JIA_DI          MJOption = 2
	MJOption_ZIMO_JIA_FAN         MJOption = 3
	MJOption_DIANGANG_HUA_DIANPAO MJOption = 4
	MJOption_DIANGANG_HUA_ZIMO    MJOption = 5
	MJOption_YAOJIU_JIANGDUI      MJOption = 6
	MJOption_MENQING_MID_CARD     MJOption = 7
	MJOption_TIAN_DI_HU           MJOption = 8
	MJOption_KA_ER_TIAO           MJOption = 9
	// 三人两房牌
	MJOption_DIANPAO_CAN_HU MJOption = 10
	MJOption_DUIDUIHU_2_FAN MJOption = 11
	MJOption_JIA_XIN_WU     MJOption = 12
	// 倒倒胡
	MJOption_DDH_QIDUI_HU   MJOption = 13
	MJOption_DDH_ZIMO_HU    MJOption = 14
	MJOption_DDH_DIANPAO_HU MJOption = 15
)

var MJOption_name = map[int32]string{
	1:  "EXCHANGE_CARDS",
	2:  "ZIMO_JIA_DI",
	3:  "ZIMO_JIA_FAN",
	4:  "DIANGANG_HUA_DIANPAO",
	5:  "DIANGANG_HUA_ZIMO",
	6:  "YAOJIU_JIANGDUI",
	7:  "MENQING_MID_CARD",
	8:  "TIAN_DI_HU",
	9:  "KA_ER_TIAO",
	10: "DIANPAO_CAN_HU",
	11: "DUIDUIHU_2_FAN",
	12: "JIA_XIN_WU",
	13: "DDH_QIDUI_HU",
	14: "DDH_ZIMO_HU",
	15: "DDH_DIANPAO_HU",
}
var MJOption_value = map[string]int32{
	"EXCHANGE_CARDS":       1,
	"ZIMO_JIA_DI":          2,
	"ZIMO_JIA_FAN":         3,
	"DIANGANG_HUA_DIANPAO": 4,
	"DIANGANG_HUA_ZIMO":    5,
	"YAOJIU_JIANGDUI":      6,
	"MENQING_MID_CARD":     7,
	"TIAN_DI_HU":           8,
	"KA_ER_TIAO":           9,
	"DIANPAO_CAN_HU":       10,
	"DUIDUIHU_2_FAN":       11,
	"JIA_XIN_WU":           12,
	"DDH_QIDUI_HU":         13,
	"DDH_ZIMO_HU":          14,
	"DDH_DIANPAO_HU":       15,
}

func (x MJOption) Enum() *MJOption {
	p := new(MJOption)
	*p = x
	return p
}
func (x MJOption) String() string {
	return proto.EnumName(MJOption_name, int32(x))
}
func (x *MJOption) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJOption_value, data, "MJOption")
	if err != nil {
		return err
	}
	*x = MJOption(value)
	return nil
}
func (MJOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 房间类型信息：包含房间类型和对应的局数、封顶、玩法等信息
// 房间类型枚举
type MJRoomType int32

const (
	MJRoomType_roomType_xueZhanDaoDi    MJRoomType = 0
	MJRoomType_roomType_sanRenLiangFang MJRoomType = 1
	MJRoomType_roomType_siRenLiangFang  MJRoomType = 2
	MJRoomType_roomType_deYangMaJiang   MJRoomType = 3
	MJRoomType_roomType_daoDaoHu        MJRoomType = 4
	MJRoomType_roomType_xueLiuChengHe   MJRoomType = 5
)

var MJRoomType_name = map[int32]string{
	0: "roomType_xueZhanDaoDi",
	1: "roomType_sanRenLiangFang",
	2: "roomType_siRenLiangFang",
	3: "roomType_deYangMaJiang",
	4: "roomType_daoDaoHu",
	5: "roomType_xueLiuChengHe",
}
var MJRoomType_value = map[string]int32{
	"roomType_xueZhanDaoDi":    0,
	"roomType_sanRenLiangFang": 1,
	"roomType_siRenLiangFang":  2,
	"roomType_deYangMaJiang":   3,
	"roomType_daoDaoHu":        4,
	"roomType_xueLiuChengHe":   5,
}

func (x MJRoomType) Enum() *MJRoomType {
	p := new(MJRoomType)
	*p = x
	return p
}
func (x MJRoomType) String() string {
	return proto.EnumName(MJRoomType_name, int32(x))
}
func (x *MJRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJRoomType_value, data, "MJRoomType")
	if err != nil {
		return err
	}
	*x = MJRoomType(value)
	return nil
}
func (MJRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 麻将花色
type MahjongColor int32

const (
	MahjongColor_WAN  MahjongColor = 1
	MahjongColor_TIAO MahjongColor = 2
	MahjongColor_TONG MahjongColor = 3
)

var MahjongColor_name = map[int32]string{
	1: "WAN",
	2: "TIAO",
	3: "TONG",
}
var MahjongColor_value = map[string]int32{
	"WAN":  1,
	"TIAO": 2,
	"TONG": 3,
}

func (x MahjongColor) Enum() *MahjongColor {
	p := new(MahjongColor)
	*p = x
	return p
}
func (x MahjongColor) String() string {
	return proto.EnumName(MahjongColor_name, int32(x))
}
func (x *MahjongColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MahjongColor_value, data, "MahjongColor")
	if err != nil {
		return err
	}
	*x = MahjongColor(value)
	return nil
}
func (MahjongColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 杠的类型
type GangType int32

const (
	GangType_G_MINGGANG GangType = 1
	GangType_G_BAGANG   GangType = 2
	GangType_G_ANGANG   GangType = 3
)

var GangType_name = map[int32]string{
	1: "G_MINGGANG",
	2: "G_BAGANG",
	3: "G_ANGANG",
}
var GangType_value = map[string]int32{
	"G_MINGGANG": 1,
	"G_BAGANG":   2,
	"G_ANGANG":   3,
}

func (x GangType) Enum() *GangType {
	p := new(GangType)
	*p = x
	return p
}
func (x GangType) String() string {
	return proto.EnumName(GangType_name, int32(x))
}
func (x *GangType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GangType_value, data, "GangType")
	if err != nil {
		return err
	}
	*x = GangType(value)
	return nil
}
func (GangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 碰杠类型(客户端显示用)
type ComposeCardType int32

const (
	ComposeCardType_C_MINGGANG ComposeCardType = 1
	ComposeCardType_C_BAGANG   ComposeCardType = 2
	ComposeCardType_C_ANGANG   ComposeCardType = 3
	ComposeCardType_C_PENG     ComposeCardType = 4
)

var ComposeCardType_name = map[int32]string{
	1: "C_MINGGANG",
	2: "C_BAGANG",
	3: "C_ANGANG",
	4: "C_PENG",
}
var ComposeCardType_value = map[string]int32{
	"C_MINGGANG": 1,
	"C_BAGANG":   2,
	"C_ANGANG":   3,
	"C_PENG":     4,
}

func (x ComposeCardType) Enum() *ComposeCardType {
	p := new(ComposeCardType)
	*p = x
	return p
}
func (x ComposeCardType) String() string {
	return proto.EnumName(ComposeCardType_name, int32(x))
}
func (x *ComposeCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ComposeCardType_value, data, "ComposeCardType")
	if err != nil {
		return err
	}
	*x = ComposeCardType(value)
	return nil
}
func (ComposeCardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// 胡牌的类型
type HuPaiType int32

const (
	HuPaiType_H_DuiDuiHu  HuPaiType = 1
	HuPaiType_H_QingYiSe  HuPaiType = 2
	HuPaiType_H_QiDui     HuPaiType = 3
	HuPaiType_H_DaiYaoJiu HuPaiType = 4
	HuPaiType_H_LongQiDui HuPaiType = 5
	HuPaiType_H_JiangDui  HuPaiType = 6
	// 附加番数(特定操作)
	HuPaiType_H_TianHu            HuPaiType = 7
	HuPaiType_H_DiHu              HuPaiType = 8
	HuPaiType_H_GangShangHua      HuPaiType = 9
	HuPaiType_H_GangShangPao      HuPaiType = 10
	HuPaiType_H_QiangGang         HuPaiType = 11
	HuPaiType_H_HaiDiLao          HuPaiType = 12
	HuPaiType_H_HaiDiPao          HuPaiType = 13
	HuPaiType_H_HaidiGangShangHua HuPaiType = 14
	HuPaiType_H_HaidiGangShangPao HuPaiType = 15
	//
	HuPaiType_H_JinGouDiao HuPaiType = 16
	// 可选附加玩法
	HuPaiType_H_ZiMoJiaFan HuPaiType = 17
	HuPaiType_H_ZiMoJiaDi  HuPaiType = 18
	HuPaiType_H_MenQing    HuPaiType = 19
	HuPaiType_H_ZhongZhang HuPaiType = 20
	// (内江麻将)
	HuPaiType_H_KaErTiao HuPaiType = 21
	// (德阳麻将)
	HuPaiType_H_JiaXin5 HuPaiType = 22
)

var HuPaiType_name = map[int32]string{
	1:  "H_DuiDuiHu",
	2:  "H_QingYiSe",
	3:  "H_QiDui",
	4:  "H_DaiYaoJiu",
	5:  "H_LongQiDui",
	6:  "H_JiangDui",
	7:  "H_TianHu",
	8:  "H_DiHu",
	9:  "H_GangShangHua",
	10: "H_GangShangPao",
	11: "H_QiangGang",
	12: "H_HaiDiLao",
	13: "H_HaiDiPao",
	14: "H_HaidiGangShangHua",
	15: "H_HaidiGangShangPao",
	16: "H_JinGouDiao",
	17: "H_ZiMoJiaFan",
	18: "H_ZiMoJiaDi",
	19: "H_MenQing",
	20: "H_ZhongZhang",
	21: "H_KaErTiao",
	22: "H_JiaXin5",
}
var HuPaiType_value = map[string]int32{
	"H_DuiDuiHu":          1,
	"H_QingYiSe":          2,
	"H_QiDui":             3,
	"H_DaiYaoJiu":         4,
	"H_LongQiDui":         5,
	"H_JiangDui":          6,
	"H_TianHu":            7,
	"H_DiHu":              8,
	"H_GangShangHua":      9,
	"H_GangShangPao":      10,
	"H_QiangGang":         11,
	"H_HaiDiLao":          12,
	"H_HaiDiPao":          13,
	"H_HaidiGangShangHua": 14,
	"H_HaidiGangShangPao": 15,
	"H_JinGouDiao":        16,
	"H_ZiMoJiaFan":        17,
	"H_ZiMoJiaDi":         18,
	"H_MenQing":           19,
	"H_ZhongZhang":        20,
	"H_KaErTiao":          21,
	"H_JiaXin5":           22,
}

func (x HuPaiType) Enum() *HuPaiType {
	p := new(HuPaiType)
	*p = x
	return p
}
func (x HuPaiType) String() string {
	return proto.EnumName(HuPaiType_name, int32(x))
}
func (x *HuPaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HuPaiType_value, data, "HuPaiType")
	if err != nil {
		return err
	}
	*x = HuPaiType(value)
	return nil
}
func (HuPaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type MJUserGameStatus int32

const (
	MJUserGameStatus_U_INIT     MJUserGameStatus = 0
	MJUserGameStatus_U_DINGQUE  MJUserGameStatus = 1
	MJUserGameStatus_U_EXCHANGE MJUserGameStatus = 2
	MJUserGameStatus_U_PLAYING  MJUserGameStatus = 3
	MJUserGameStatus_U_FINISH   MJUserGameStatus = 4
)

var MJUserGameStatus_name = map[int32]string{
	0: "U_INIT",
	1: "U_DINGQUE",
	2: "U_EXCHANGE",
	3: "U_PLAYING",
	4: "U_FINISH",
}
var MJUserGameStatus_value = map[string]int32{
	"U_INIT":     0,
	"U_DINGQUE":  1,
	"U_EXCHANGE": 2,
	"U_PLAYING":  3,
	"U_FINISH":   4,
}

func (x MJUserGameStatus) Enum() *MJUserGameStatus {
	p := new(MJUserGameStatus)
	*p = x
	return p
}
func (x MJUserGameStatus) String() string {
	return proto.EnumName(MJUserGameStatus_name, int32(x))
}
func (x *MJUserGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJUserGameStatus_value, data, "MJUserGameStatus")
	if err != nil {
		return err
	}
	*x = MJUserGameStatus(value)
	return nil
}
func (MJUserGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type DeskGameStatus int32

const (
	DeskGameStatus_INIT     DeskGameStatus = 0
	DeskGameStatus_FAPAI    DeskGameStatus = 1
	DeskGameStatus_EXCHANGE DeskGameStatus = 2
	DeskGameStatus_DINGQUE  DeskGameStatus = 3
	DeskGameStatus_PLAYING  DeskGameStatus = 4
	DeskGameStatus_FINISH   DeskGameStatus = 5
)

var DeskGameStatus_name = map[int32]string{
	0: "INIT",
	1: "FAPAI",
	2: "EXCHANGE",
	3: "DINGQUE",
	4: "PLAYING",
	5: "FINISH",
}
var DeskGameStatus_value = map[string]int32{
	"INIT":     0,
	"FAPAI":    1,
	"EXCHANGE": 2,
	"DINGQUE":  3,
	"PLAYING":  4,
	"FINISH":   5,
}

func (x DeskGameStatus) Enum() *DeskGameStatus {
	p := new(DeskGameStatus)
	*p = x
	return p
}
func (x DeskGameStatus) String() string {
	return proto.EnumName(DeskGameStatus_name, int32(x))
}
func (x *DeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeskGameStatus_value, data, "DeskGameStatus")
	if err != nil {
		return err
	}
	*x = DeskGameStatus(value)
	return nil
}
func (DeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// ProtoHeader 需要在每个 Message 中作为第一个字段
type ProtoHeader struct {
	Version          *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Code             *int32  `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	Error            *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProtoHeader) Reset()                    { *m = ProtoHeader{} }
func (m *ProtoHeader) String() string            { return proto.CompactTextString(m) }
func (*ProtoHeader) ProtoMessage()               {}
func (*ProtoHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProtoHeader) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ProtoHeader) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ProtoHeader) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ProtoHeader) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

// 微信信息
type WeixinInfo struct {
	OpenId           *string `protobuf:"bytes,1,opt,name=openId" json:"openId,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	HeadUrl          *string `protobuf:"bytes,3,opt,name=headUrl" json:"headUrl,omitempty"`
	Sex              *int32  `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
	City             *string `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	UnionId          *string `protobuf:"bytes,6,opt,name=unionId" json:"unionId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WeixinInfo) Reset()                    { *m = WeixinInfo{} }
func (m *WeixinInfo) String() string            { return proto.CompactTextString(m) }
func (*WeixinInfo) ProtoMessage()               {}
func (*WeixinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WeixinInfo) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *WeixinInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WeixinInfo) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *WeixinInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *WeixinInfo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *WeixinInfo) GetUnionId() string {
	if m != nil && m.UnionId != nil {
		return *m.UnionId
	}
	return ""
}

// 麻将牌
type CardInfo struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id               *int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CardInfo) Reset()                    { *m = CardInfo{} }
func (m *CardInfo) String() string            { return proto.CompactTextString(m) }
func (*CardInfo) ProtoMessage()               {}
func (*CardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CardInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CardInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 玩法：包括自摸、点炮、以及可多选的玩法
type PlayOptions struct {
	ZiMoRadio        *int32  `protobuf:"varint,1,opt,name=ziMoRadio" json:"ziMoRadio,omitempty"`
	DianGangHuaRadio *int32  `protobuf:"varint,2,opt,name=dianGangHuaRadio" json:"dianGangHuaRadio,omitempty"`
	OthersCheckBox   []int32 `protobuf:"varint,3,rep,name=othersCheckBox" json:"othersCheckBox,omitempty"`
	HuRadio          *int32  `protobuf:"varint,4,opt,name=huRadio" json:"huRadio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayOptions) Reset()                    { *m = PlayOptions{} }
func (m *PlayOptions) String() string            { return proto.CompactTextString(m) }
func (*PlayOptions) ProtoMessage()               {}
func (*PlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PlayOptions) GetZiMoRadio() int32 {
	if m != nil && m.ZiMoRadio != nil {
		return *m.ZiMoRadio
	}
	return 0
}

func (m *PlayOptions) GetDianGangHuaRadio() int32 {
	if m != nil && m.DianGangHuaRadio != nil {
		return *m.DianGangHuaRadio
	}
	return 0
}

func (m *PlayOptions) GetOthersCheckBox() []int32 {
	if m != nil {
		return m.OthersCheckBox
	}
	return nil
}

func (m *PlayOptions) GetHuRadio() int32 {
	if m != nil && m.HuRadio != nil {
		return *m.HuRadio
	}
	return 0
}

type RoomTypeInfo struct {
	MjRoomType       *MJRoomType  `protobuf:"varint,1,opt,name=mjRoomType,enum=mjproto.MJRoomType" json:"mjRoomType,omitempty"`
	BoardsCout       *int32       `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	CapMax           *int64       `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	PlayOptions      *PlayOptions `protobuf:"bytes,4,opt,name=playOptions" json:"playOptions,omitempty"`
	CardsNum         *int32       `protobuf:"varint,5,opt,name=cardsNum" json:"cardsNum,omitempty"`
	Settlement       *int32       `protobuf:"varint,6,opt,name=settlement" json:"settlement,omitempty"`
	BaseValue        *int64       `protobuf:"varint,7,opt,name=baseValue" json:"baseValue,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RoomTypeInfo) Reset()                    { *m = RoomTypeInfo{} }
func (m *RoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomTypeInfo) ProtoMessage()               {}
func (*RoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RoomTypeInfo) GetMjRoomType() MJRoomType {
	if m != nil && m.MjRoomType != nil {
		return *m.MjRoomType
	}
	return MJRoomType_roomType_xueZhanDaoDi
}

func (m *RoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *RoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *RoomTypeInfo) GetPlayOptions() *PlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetCardsNum() int32 {
	if m != nil && m.CardsNum != nil {
		return *m.CardsNum
	}
	return 0
}

func (m *RoomTypeInfo) GetSettlement() int32 {
	if m != nil && m.Settlement != nil {
		return *m.Settlement
	}
	return 0
}

func (m *RoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

type ComposeCard struct {
	Value            *int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type             *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ComposeCard) Reset()                    { *m = ComposeCard{} }
func (m *ComposeCard) String() string            { return proto.CompactTextString(m) }
func (*ComposeCard) ProtoMessage()               {}
func (*ComposeCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ComposeCard) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ComposeCard) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type PlayerCard struct {
	HandCard         []*CardInfo    `protobuf:"bytes,1,rep,name=handCard" json:"handCard,omitempty"`
	ComposeCard      []*ComposeCard `protobuf:"bytes,2,rep,name=composeCard" json:"composeCard,omitempty"`
	OutCard          []int32        `protobuf:"varint,3,rep,name=outCard" json:"outCard,omitempty"`
	HuCard           *int32         `protobuf:"varint,4,opt,name=huCard" json:"huCard,omitempty"`
	UserId           *uint32        `protobuf:"varint,5,opt,name=UserId" json:"UserId,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PlayerCard) Reset()                    { *m = PlayerCard{} }
func (m *PlayerCard) String() string            { return proto.CompactTextString(m) }
func (*PlayerCard) ProtoMessage()               {}
func (*PlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PlayerCard) GetHandCard() []*CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *PlayerCard) GetComposeCard() []*ComposeCard {
	if m != nil {
		return m.ComposeCard
	}
	return nil
}

func (m *PlayerCard) GetOutCard() []int32 {
	if m != nil {
		return m.OutCard
	}
	return nil
}

func (m *PlayerCard) GetHuCard() int32 {
	if m != nil && m.HuCard != nil {
		return *m.HuCard
	}
	return 0
}

func (m *PlayerCard) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type PlayerInfo struct {
	IsBanker         *bool       `protobuf:"varint,1,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerCard       *PlayerCard `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	Coin             *int64      `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string     `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32      `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32     `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool       `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32      `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	BDingQue         *int32      `protobuf:"varint,9,opt,name=bDingQue" json:"bDingQue,omitempty"`
	BExchanged       *int32      `protobuf:"varint,10,opt,name=bExchanged" json:"bExchanged,omitempty"`
	NHuPai           *int32      `protobuf:"varint,11,opt,name=nHuPai" json:"nHuPai,omitempty"`
	QuePai           *int32      `protobuf:"varint,12,opt,name=quePai" json:"quePai,omitempty"`
	WxInfo           *WeixinInfo `protobuf:"bytes,13,opt,name=wxInfo" json:"wxInfo,omitempty"`
	GameStatus       *int32      `protobuf:"varint,14,opt,name=GameStatus" json:"GameStatus,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *PlayerInfo) GetPlayerCard() *PlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

func (m *PlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *PlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *PlayerInfo) GetBDingQue() int32 {
	if m != nil && m.BDingQue != nil {
		return *m.BDingQue
	}
	return 0
}

func (m *PlayerInfo) GetBExchanged() int32 {
	if m != nil && m.BExchanged != nil {
		return *m.BExchanged
	}
	return 0
}

func (m *PlayerInfo) GetNHuPai() int32 {
	if m != nil && m.NHuPai != nil {
		return *m.NHuPai
	}
	return 0
}

func (m *PlayerInfo) GetQuePai() int32 {
	if m != nil && m.QuePai != nil {
		return *m.QuePai
	}
	return 0
}

func (m *PlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *PlayerInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

type DeskGameInfo struct {
	GameStatus       *int32        `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *RoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32        `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32       `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32        `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	DelayTime        *int32        `protobuf:"varint,6,opt,name=delayTime" json:"delayTime,omitempty"`
	NInitActionTime  *int32        `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32        `protobuf:"varint,8,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	InitRoomCoin     *int64        `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32        `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32        `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string       `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RemainCards      *int32        `protobuf:"varint,13,opt,name=remainCards" json:"remainCards,omitempty"`
	Banker           *uint32       `protobuf:"varint,14,opt,name=Banker" json:"Banker,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DeskGameInfo) Reset()                    { *m = DeskGameInfo{} }
func (m *DeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*DeskGameInfo) ProtoMessage()               {}
func (*DeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *DeskGameInfo) GetRoomTypeInfo() *RoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *DeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *DeskGameInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *DeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *DeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *DeskGameInfo) GetRemainCards() int32 {
	if m != nil && m.RemainCards != nil {
		return *m.RemainCards
	}
	return 0
}

func (m *DeskGameInfo) GetBanker() uint32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

func init() {
	proto.RegisterType((*ProtoHeader)(nil), "mjproto.ProtoHeader")
	proto.RegisterType((*WeixinInfo)(nil), "mjproto.WeixinInfo")
	proto.RegisterType((*CardInfo)(nil), "mjproto.CardInfo")
	proto.RegisterType((*PlayOptions)(nil), "mjproto.PlayOptions")
	proto.RegisterType((*RoomTypeInfo)(nil), "mjproto.RoomTypeInfo")
	proto.RegisterType((*ComposeCard)(nil), "mjproto.ComposeCard")
	proto.RegisterType((*PlayerCard)(nil), "mjproto.PlayerCard")
	proto.RegisterType((*PlayerInfo)(nil), "mjproto.PlayerInfo")
	proto.RegisterType((*DeskGameInfo)(nil), "mjproto.DeskGameInfo")
	proto.RegisterEnum("mjproto.EProtoId", EProtoId_name, EProtoId_value)
	proto.RegisterEnum("mjproto.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("mjproto.MJOption", MJOption_name, MJOption_value)
	proto.RegisterEnum("mjproto.MJRoomType", MJRoomType_name, MJRoomType_value)
	proto.RegisterEnum("mjproto.MahjongColor", MahjongColor_name, MahjongColor_value)
	proto.RegisterEnum("mjproto.GangType", GangType_name, GangType_value)
	proto.RegisterEnum("mjproto.ComposeCardType", ComposeCardType_name, ComposeCardType_value)
	proto.RegisterEnum("mjproto.HuPaiType", HuPaiType_name, HuPaiType_value)
	proto.RegisterEnum("mjproto.MJUserGameStatus", MJUserGameStatus_name, MJUserGameStatus_value)
	proto.RegisterEnum("mjproto.DeskGameStatus", DeskGameStatus_name, DeskGameStatus_value)
}

var fileDescriptor0 = []byte{
	// 1878 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x57, 0x4d, 0x7b, 0xdb, 0x4a,
	0x15, 0xc6, 0x5f, 0xb1, 0x3d, 0x76, 0x12, 0x55, 0x4d, 0x5a, 0xf7, 0xb6, 0xe5, 0xf6, 0xba, 0xc0,
	0xbd, 0xd7, 0x3c, 0x74, 0x51, 0x1e, 0xd8, 0x2b, 0x92, 0x62, 0x2b, 0xb1, 0x25, 0xc7, 0xb6, 0xda,
	0xa6, 0x1b, 0x3d, 0x8a, 0x2d, 0x12, 0x35, 0x89, 0x14, 0xfc, 0xd1, 0x9b, 0xb2, 0x66, 0xcb, 0x02,
	0x76, 0xc0, 0x96, 0x25, 0x1b, 0xb6, 0x6c, 0xf8, 0x07, 0xfc, 0x0e, 0xfe, 0x05, 0xbc, 0xe7, 0x8c,
	0x46, 0xb6, 0x4b, 0xfb, 0xb8, 0x7d, 0x34, 0x67, 0xde, 0xf3, 0xf5, 0x9e, 0x73, 0x66, 0xa6, 0x42,
	0x5c, 0x84, 0x8b, 0xe8, 0xd5, 0xdd, 0x3c, 0x5d, 0xa6, 0x7a, 0xf5, 0xf6, 0x03, 0x7f, 0xb4, 0x4f,
	0x45, 0x63, 0x48, 0x1f, 0xbd, 0x28, 0x9c, 0x45, 0x73, 0x7d, 0x5f, 0x54, 0x3f, 0x46, 0xf3, 0x45,
	0x9c, 0x26, 0xad, 0xc2, 0x8b, 0xc2, 0x77, 0x75, 0x7d, 0x4f, 0xec, 0xac, 0x16, 0xd1, 0xdc, 0x99,
	0xb5, 0x8a, 0x58, 0xef, 0xea, 0x4d, 0x51, 0x9e, 0xa6, 0xb3, 0xa8, 0x55, 0xc2, 0xaa, 0xa2, 0xef,
	0x8a, 0x4a, 0x34, 0x9f, 0xa7, 0xf3, 0x56, 0x99, 0xc0, 0xed, 0x6b, 0x21, 0xde, 0x46, 0xf1, 0x7d,
	0x9c, 0x38, 0xc9, 0x6f, 0x52, 0x52, 0x4d, 0xef, 0xa2, 0x04, 0xaa, 0xd2, 0x94, 0x26, 0x6a, 0x49,
	0x3c, 0xbd, 0x76, 0xc3, 0xdb, 0x88, 0x8d, 0xd5, 0xc9, 0xdb, 0x15, 0xfc, 0xfa, 0xf3, 0x1b, 0xb6,
	0x57, 0xd7, 0x1b, 0xa2, 0xb4, 0x88, 0xee, 0xd9, 0x5a, 0x85, 0x5d, 0xc5, 0xcb, 0x4f, 0xad, 0x8a,
	0xc2, 0xae, 0x12, 0xc4, 0x05, 0x73, 0x3b, 0xec, 0xec, 0x97, 0xa2, 0x66, 0x86, 0xf3, 0x19, 0xbb,
	0x02, 0x74, 0xf9, 0xe9, 0x2e, 0x62, 0x47, 0x1c, 0xd5, 0xc7, 0xf0, 0x66, 0x25, 0xbd, 0x54, 0x74,
	0x21, 0x8a, 0xf1, 0x4c, 0x06, 0xdc, 0x9e, 0x22, 0xdd, 0x9b, 0xf0, 0x93, 0x77, 0xb7, 0x84, 0xa9,
	0x85, 0xfe, 0x40, 0xd4, 0x7f, 0x17, 0x0f, 0xd2, 0x51, 0x38, 0x8b, 0xd3, 0x4c, 0xb9, 0x25, 0xb4,
	0x59, 0x1c, 0x26, 0xdd, 0x30, 0xb9, 0xec, 0xad, 0x42, 0xb9, 0x23, 0xed, 0x3c, 0x12, 0x7b, 0xe9,
	0xf2, 0x0a, 0xec, 0x98, 0x57, 0xd1, 0xf4, 0xfa, 0x28, 0xbd, 0x87, 0xcd, 0x12, 0xe4, 0x94, 0xc5,
	0x4a, 0x02, 0x39, 0xf0, 0xf6, 0xbf, 0x0a, 0xa2, 0x39, 0x4a, 0xd3, 0xdb, 0x09, 0x42, 0xe2, 0xf0,
	0xbe, 0x15, 0xe2, 0xf6, 0x83, 0x92, 0xb0, 0x9f, 0xbd, 0xd7, 0x0f, 0x5f, 0x65, 0x25, 0x78, 0x35,
	0x38, 0x51, 0x5b, 0x3a, 0x62, 0xbd, 0x48, 0x91, 0xd4, 0xc2, 0x4c, 0x57, 0xcb, 0xcc, 0x2d, 0x68,
	0x9c, 0x86, 0x77, 0x83, 0xf0, 0x9e, 0x53, 0x28, 0xe9, 0xdf, 0x8b, 0xc6, 0xdd, 0x3a, 0x05, 0x76,
	0xd9, 0x78, 0x7d, 0x90, 0x5b, 0xdb, 0x4c, 0x0f, 0x8c, 0x4f, 0xc9, 0x9a, 0xbb, 0xba, 0x65, 0x16,
	0x2b, 0xe4, 0x60, 0x11, 0x2d, 0x97, 0x37, 0xd1, 0x6d, 0x94, 0x2c, 0x99, 0xc8, 0x0a, 0x91, 0x40,
	0x9d, 0xf1, 0x86, 0x29, 0xab, 0x92, 0x8f, 0x76, 0x47, 0x34, 0xcc, 0xf4, 0xf6, 0x2e, 0x5d, 0x44,
	0x44, 0xf1, 0x9a, 0xd0, 0x82, 0x2a, 0x0c, 0xb3, 0xcd, 0xf1, 0xb5, 0xff, 0x50, 0x10, 0x82, 0x9c,
	0x46, 0x73, 0xc6, 0xbe, 0x14, 0xb5, 0xab, 0x30, 0x99, 0xd1, 0x37, 0xe0, 0x25, 0xc4, 0xf6, 0x20,
	0x8f, 0x2d, 0xaf, 0x17, 0x72, 0x98, 0xae, 0xed, 0xc3, 0x50, 0x69, 0x2b, 0x87, 0x4d, 0xdf, 0x60,
	0x17, 0x5c, 0x30, 0x4c, 0xd2, 0x0d, 0x3e, 0xae, 0x56, 0xbc, 0x2e, 0x2b, 0x7e, 0x7c, 0xd9, 0xa1,
	0x94, 0xe2, 0x6e, 0xfb, 0x6f, 0x45, 0x15, 0x0f, 0xbb, 0x02, 0x07, 0xf1, 0xe2, 0x28, 0x4c, 0xae,
	0xa3, 0x39, 0x87, 0x5f, 0xa3, 0x6a, 0xdc, 0xe5, 0xf1, 0x72, 0x12, 0x8d, 0x8d, 0x6a, 0x6c, 0xa4,
	0xc2, 0xbd, 0x1e, 0x27, 0x19, 0xef, 0x9b, 0xed, 0x5b, 0xde, 0xec, 0xd6, 0x8a, 0x0a, 0x23, 0x1b,
	0x94, 0x1d, 0x1e, 0x14, 0xc4, 0x1d, 0x2f, 0xbc, 0x1f, 0x12, 0xb8, 0xad, 0xb2, 0x5b, 0x00, 0x2e,
	0x46, 0xe8, 0xf6, 0x4f, 0xad, 0x1a, 0x2b, 0xc0, 0xde, 0x85, 0x15, 0x27, 0x97, 0x67, 0xe0, 0xb5,
	0xae, 0x8a, 0x73, 0x61, 0xdf, 0x4f, 0x41, 0xdf, 0x65, 0x34, 0x6b, 0x09, 0x65, 0x36, 0xe9, 0xad,
	0x86, 0x61, 0xdc, 0x6a, 0xa8, 0xf5, 0x6f, 0x57, 0x11, 0xad, 0x9b, 0xbc, 0x7e, 0x29, 0x76, 0x7e,
	0xb8, 0xa7, 0x44, 0x5b, 0xbb, 0x9f, 0x25, 0xb2, 0x31, 0x89, 0x30, 0xdc, 0x45, 0xd8, 0xe3, 0x65,
	0xb8, 0x5c, 0x2d, 0x5a, 0x7b, 0x5c, 0xb6, 0x7f, 0x17, 0x45, 0xd3, 0x8a, 0x16, 0xd7, 0xb4, 0xf1,
	0x05, 0x90, 0xac, 0xf4, 0xcf, 0x45, 0x73, 0xbe, 0xd1, 0xc8, 0x19, 0x59, 0x87, 0xb9, 0x8f, 0xad,
	0x2e, 0x47, 0x1f, 0x49, 0x5e, 0xa9, 0xdd, 0xe4, 0xf9, 0x70, 0x20, 0x9a, 0xe1, 0x74, 0x19, 0x7f,
	0x8c, 0xb2, 0x0a, 0x95, 0x99, 0x1a, 0x78, 0x22, 0x69, 0x9a, 0x4c, 0x62, 0x70, 0x59, 0x51, 0x4d,
	0x38, 0x8b, 0xa0, 0xcd, 0x22, 0xd9, 0x97, 0x8f, 0xc5, 0x3e, 0xc2, 0x8f, 0x97, 0xc6, 0x1a, 0x5b,
	0x55, 0x83, 0xc8, 0x1b, 0x56, 0xae, 0x50, 0x53, 0xde, 0x62, 0x88, 0x29, 0x28, 0x93, 0xea, 0x56,
	0xe7, 0xba, 0x1d, 0x8a, 0xdd, 0xe9, 0x6a, 0x3e, 0xa7, 0xba, 0x62, 0xaa, 0xd0, 0xf5, 0x42, 0x19,
	0x59, 0xa6, 0xcb, 0xf0, 0x66, 0x2d, 0x6f, 0xa8, 0x22, 0x50, 0xca, 0xc8, 0xe1, 0x02, 0xa5, 0x6b,
	0x72, 0xa1, 0x1f, 0x8a, 0xc6, 0x3c, 0xba, 0x0d, 0xe3, 0x84, 0xda, 0x62, 0xc1, 0x4c, 0x73, 0x25,
	0xb2, 0xb6, 0x22, 0x42, 0x77, 0x3b, 0xff, 0xac, 0x8a, 0x9a, 0xcd, 0x67, 0xa9, 0x33, 0x83, 0x95,
	0xbd, 0xa1, 0x63, 0x05, 0x67, 0xbe, 0x63, 0x9e, 0x06, 0xa6, 0xe7, 0xba, 0x5a, 0x01, 0x1e, 0xf5,
	0x6d, 0x59, 0x60, 0x98, 0xa7, 0x5a, 0x51, 0x61, 0xbb, 0xc6, 0xc0, 0x0e, 0xfa, 0x5e, 0xd7, 0x71,
	0xb5, 0x92, 0xc2, 0xae, 0x65, 0x8c, 0x2d, 0x2b, 0xac, 0x39, 0xb2, 0x8d, 0x89, 0x3d, 0xf2, 0xbc,
	0x81, 0x56, 0x51, 0xd8, 0xb5, 0x8c, 0xb1, 0x3b, 0x0a, 0x6b, 0xbb, 0x90, 0x06, 0x8c, 0xad, 0x2a,
	0xec, 0x5a, 0xc6, 0xd8, 0x1a, 0x48, 0x7a, 0x40, 0xf2, 0xb1, 0xed, 0x4a, 0xa7, 0x8e, 0x7b, 0xec,
	0x69, 0x75, 0x0c, 0x7e, 0x9d, 0xc4, 0xb0, 0x6c, 0x9d, 0x6b, 0x02, 0x45, 0xda, 0xcd, 0x97, 0xac,
	0xd8, 0x50, 0x8a, 0xf6, 0x3b, 0xb3, 0x67, 0xb8, 0x5d, 0xdb, 0x34, 0x46, 0xd6, 0x58, 0x6b, 0xea,
	0x4f, 0xc4, 0xe1, 0xff, 0x89, 0x59, 0x83, 0x06, 0xa3, 0x41, 0x5b, 0x96, 0xe3, 0x76, 0xcf, 0x7c,
	0x5b, 0xdb, 0x53, 0x02, 0x6f, 0x68, 0xbb, 0x90, 0x69, 0xfb, 0x2a, 0x70, 0xcb, 0x36, 0xfa, 0x81,
	0x34, 0xa8, 0xa1, 0x04, 0xfb, 0x4c, 0x88, 0x3d, 0x09, 0x40, 0x06, 0x49, 0xb5, 0x07, 0x5b, 0x51,
	0x7b, 0xfe, 0x44, 0x8a, 0x75, 0xe5, 0x7c, 0x4b, 0xcc, 0xce, 0x1f, 0xaa, 0x0c, 0xe0, 0xaa, 0x2b,
	0xd1, 0x07, 0xca, 0x48, 0x2e, 0x62, 0xe4, 0xa1, 0x42, 0x76, 0x0d, 0x85, 0x7c, 0xa4, 0x90, 0xb9,
	0x88, 0x91, 0x8f, 0x31, 0xc8, 0x4d, 0x16, 0xfb, 0x9e, 0x04, 0xb6, 0xd0, 0x88, 0xda, 0xa6, 0x84,
	0x71, 0x4f, 0x54, 0x9e, 0x3d, 0x5f, 0xc2, 0xbe, 0x52, 0x39, 0x65, 0x02, 0x46, 0x3d, 0xd5, 0xbf,
	0x16, 0x4f, 0x49, 0x78, 0x34, 0xf2, 0x0c, 0xcb, 0x34, 0xc6, 0x93, 0xe0, 0xc8, 0xa6, 0xf2, 0x2b,
	0xba, 0x9e, 0xe9, 0x2f, 0xc4, 0xb3, 0x2f, 0x01, 0x14, 0xd5, 0xda, 0x73, 0x15, 0x90, 0xf7, 0xc6,
	0x1e, 0x4d, 0xfc, 0x91, 0xab, 0xfd, 0x58, 0x45, 0x6e, 0xfa, 0xa3, 0x11, 0x4a, 0x3f, 0xb2, 0xc7,
	0x7e, 0x7f, 0xa2, 0x7d, 0xad, 0xba, 0x81, 0x88, 0xc2, 0xaf, 0xef, 0x4d, 0xd0, 0x15, 0xe7, 0xda,
	0x0b, 0x05, 0xb7, 0x9c, 0xf1, 0xd8, 0xeb, 0xbf, 0xb1, 0x51, 0x89, 0xf1, 0xa9, 0xf6, 0x8d, 0xe2,
	0x75, 0x4b, 0xcc, 0x51, 0xb7, 0x55, 0xc9, 0xfa, 0xb6, 0xa1, 0xe0, 0x2f, 0x95, 0xf5, 0xb5, 0x8c,
	0xb1, 0x3f, 0x51, 0x3c, 0x0c, 0xec, 0xf1, 0xd8, 0x40, 0xbc, 0x3f, 0x55, 0x74, 0x71, 0xbd, 0x94,
	0xf4, 0x67, 0x18, 0xff, 0x87, 0xf9, 0x08, 0x64, 0xd9, 0x03, 0xa0, 0x7d, 0xbb, 0xb5, 0x41, 0xff,
	0x8c, 0x6c, 0xd3, 0x03, 0x9f, 0xdf, 0xe9, 0x5f, 0x89, 0x47, 0xf9, 0x06, 0x5c, 0x6d, 0xec, 0x7d,
	0xaf, 0x3f, 0x17, 0x4f, 0xbe, 0xbc, 0x67, 0x5b, 0xae, 0xd6, 0xe9, 0xfc, 0xa7, 0x20, 0xea, 0x36,
	0xbd, 0x64, 0x4c, 0x3c, 0x6e, 0x30, 0xda, 0xc2, 0x36, 0x83, 0xb1, 0x6f, 0x9a, 0x88, 0x46, 0xfb,
	0x91, 0xfe, 0x0b, 0xf1, 0x02, 0x6b, 0x39, 0x60, 0x32, 0x13, 0xcb, 0x31, 0x06, 0x1e, 0xc2, 0x75,
	0xbd, 0x89, 0xed, 0x7a, 0x7e, 0xb7, 0xa7, 0xfd, 0xf5, 0xbf, 0xd9, 0x9f, 0x02, 0x6e, 0xb7, 0x67,
	0x9f, 0xc1, 0xfd, 0x31, 0xc6, 0x0d, 0xd8, 0x63, 0xcf, 0x47, 0x0a, 0x7f, 0x59, 0x43, 0xdb, 0xe2,
	0x10, 0x50, 0xc7, 0x9d, 0x78, 0x12, 0x98, 0x63, 0xfe, 0xbc, 0xc6, 0x7c, 0x23, 0x0e, 0x80, 0xe1,
	0xc8, 0xe5, 0xe4, 0x8d, 0xec, 0x21, 0x4c, 0x6b, 0x7f, 0x5a, 0x43, 0x3a, 0xe2, 0xf9, 0x36, 0xc4,
	0xec, 0x39, 0x43, 0x32, 0x16, 0x64, 0xd1, 0xfd, 0x31, 0xc7, 0x76, 0xfe, 0x5e, 0x14, 0xb5, 0xc1,
	0x89, 0x7c, 0x22, 0x50, 0xdd, 0x54, 0xe3, 0x64, 0xa3, 0x56, 0xa0, 0xfa, 0xbc, 0x77, 0x06, 0x5e,
	0x70, 0xe2, 0x18, 0xc8, 0x13, 0x07, 0x14, 0xfa, 0x29, 0x17, 0x1c, 0x1b, 0x74, 0x3c, 0xb5, 0xc4,
	0x01, 0x18, 0x70, 0x79, 0x12, 0x7a, 0x3e, 0xc1, 0x0c, 0x77, 0x68, 0x78, 0x38, 0xa0, 0xd0, 0x3a,
	0x5b, 0x3b, 0xa4, 0x88, 0x33, 0x0a, 0xad, 0x7e, 0x6e, 0x78, 0x27, 0x8e, 0x4f, 0x46, 0xdc, 0xae,
	0xe5, 0x3b, 0x38, 0xa0, 0x50, 0xf7, 0x81, 0xed, 0x9e, 0xa1, 0xb6, 0xc1, 0x80, 0xba, 0x93, 0xa6,
	0xa2, 0x4a, 0xe4, 0x4f, 0x80, 0x81, 0x4d, 0x18, 0xd0, 0xe8, 0xde, 0x14, 0xa7, 0x46, 0x00, 0xfe,
	0x20, 0xa5, 0x33, 0x09, 0x21, 0x67, 0xee, 0xa0, 0xe1, 0x12, 0x46, 0xb0, 0xcc, 0x77, 0xf0, 0xc3,
	0x2c, 0xbd, 0xe6, 0x18, 0x1b, 0xa4, 0x47, 0x01, 0xbf, 0xc3, 0x6c, 0xbc, 0xf5, 0x71, 0x24, 0x21,
	0x0b, 0xcb, 0xea, 0x05, 0x67, 0x04, 0x23, 0x2d, 0x3e, 0x89, 0x48, 0xc2, 0xb9, 0x41, 0xb0, 0xc7,
	0x66, 0x20, 0x50, 0xe6, 0x21, 0xdb, 0xef, 0xfc, 0x03, 0xcf, 0x9b, 0x8d, 0x17, 0x1a, 0x66, 0x40,
	0xdd, 0x88, 0xc1, 0xfd, 0x2a, 0x7a, 0x8f, 0xcb, 0xda, 0x0a, 0x53, 0x2b, 0x46, 0x97, 0x3c, 0x13,
	0xad, 0x7c, 0x6b, 0x11, 0x26, 0xa3, 0x28, 0xe9, 0xe3, 0x21, 0x79, 0x79, 0x8c, 0xbf, 0x60, 0xf5,
	0xa9, 0x78, 0xbc, 0xde, 0x8d, 0xb7, 0x36, 0x8b, 0xd4, 0xb9, 0xf9, 0xe6, 0x2c, 0x3a, 0x87, 0x70,
	0x10, 0x9e, 0xd0, 0xbe, 0x46, 0xf7, 0xd7, 0x83, 0xf5, 0x1e, 0x5c, 0x85, 0x69, 0x6f, 0x05, 0xa2,
	0x37, 0x55, 0x10, 0x48, 0x3f, 0x5e, 0xe1, 0x59, 0x8a, 0x37, 0x6b, 0xa4, 0x55, 0x3a, 0xb8, 0xb6,
	0x07, 0xe1, 0xd5, 0x87, 0x34, 0xb9, 0x34, 0xd3, 0x9b, 0x74, 0xae, 0x57, 0x45, 0xe9, 0xad, 0x41,
	0x57, 0x50, 0x4d, 0x94, 0x99, 0xc5, 0x22, 0x7f, 0x79, 0x38, 0x6d, 0x4b, 0x9d, 0x5f, 0x8b, 0x1a,
	0x3d, 0x76, 0x39, 0x3b, 0x70, 0x46, 0xb5, 0x70, 0xbb, 0x54, 0x3f, 0xe0, 0x9b, 0xd8, 0x0b, 0x8e,
	0x0c, 0x5e, 0x15, 0xe5, 0x4a, 0xd6, 0x16, 0x7a, 0x8e, 0xd8, 0xdf, 0x78, 0xa7, 0x29, 0x75, 0xf3,
	0x33, 0x75, 0x73, 0x4b, 0xdd, 0xcc, 0xd5, 0x71, 0xcd, 0xee, 0x98, 0x7c, 0xe8, 0x6a, 0xe5, 0xce,
	0xef, 0x4b, 0xa2, 0xce, 0x8f, 0x1c, 0x65, 0x05, 0x35, 0x58, 0xc5, 0xf8, 0x21, 0xd3, 0x82, 0x5c,
	0x9f, 0xe1, 0xa5, 0x74, 0x1e, 0x8f, 0x23, 0xd8, 0x69, 0x88, 0x2a, 0xad, 0xb1, 0x0d, 0x33, 0xa8,
	0x21, 0xc0, 0x61, 0x7c, 0x1e, 0xa6, 0x27, 0x31, 0xf1, 0xc2, 0x82, 0x3e, 0x52, 0x97, 0x88, 0x8a,
	0x54, 0x67, 0x32, 0x69, 0xbd, 0x43, 0x61, 0xf4, 0x82, 0x09, 0xd6, 0x30, 0x5e, 0xa5, 0x30, 0xa0,
	0x4f, 0x8e, 0x6a, 0x54, 0xfe, 0x5e, 0x40, 0x5c, 0x8c, 0xaf, 0xe4, 0xeb, 0x5f, 0x76, 0xdb, 0x86,
	0x6c, 0x18, 0xa6, 0xe8, 0x36, 0x76, 0x71, 0x46, 0x16, 0x69, 0x43, 0xb6, 0x5a, 0x2f, 0xe8, 0x85,
	0xb1, 0x15, 0xf7, 0x01, 0x68, 0x6e, 0xac, 0x49, 0x61, 0x97, 0x4e, 0x2c, 0x5e, 0xcf, 0xe2, 0x2d,
	0xeb, 0x7b, 0x5f, 0xda, 0x20, 0x8d, 0x7d, 0x6a, 0x56, 0x0a, 0x3a, 0xe9, 0xa6, 0x2b, 0x2b, 0x86,
	0x44, 0x93, 0x92, 0xf7, 0xf8, 0xcf, 0x0a, 0x52, 0x41, 0xd7, 0xe0, 0xf6, 0xe3, 0x30, 0x32, 0x09,
	0x1a, 0x50, 0xa7, 0xdb, 0xba, 0x17, 0x0c, 0xa2, 0x84, 0xb8, 0xc2, 0x5d, 0x27, 0x35, 0xae, 0x40,
	0x05, 0x75, 0xe9, 0x25, 0xae, 0x3a, 0x8e, 0xeb, 0x34, 0xb4, 0xe7, 0x13, 0xb2, 0x79, 0x28, 0x15,
	0xa0, 0xfd, 0x2e, 0x4e, 0x7e, 0xa5, 0x3d, 0xea, 0xbc, 0xc7, 0x3c, 0x9e, 0xd0, 0x4b, 0x6d, 0xfd,
	0x0e, 0x24, 0x7e, 0x7c, 0x9c, 0x4f, 0xce, 0x04, 0x0d, 0x0e, 0xb8, 0x9f, 0x5f, 0x44, 0x5c, 0x17,
	0x7f, 0x7d, 0xed, 0x14, 0xe5, 0xf6, 0xb0, 0x6f, 0x9c, 0x3b, 0x5c, 0x60, 0xf0, 0xec, 0x07, 0xc7,
	0x50, 0x1d, 0xf7, 0x50, 0xe2, 0x73, 0x8c, 0x56, 0xf6, 0xda, 0xcc, 0x2c, 0xa3, 0x03, 0x33, 0xbb,
	0x75, 0x51, 0x39, 0x36, 0x86, 0x86, 0x23, 0x3b, 0x66, 0xc3, 0x22, 0x2a, 0xad, 0xdc, 0x95, 0x68,
	0xa1, 0x8c, 0x97, 0x29, 0xac, 0xcc, 0x74, 0xe5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x35,
	0x71, 0xe7, 0xd8, 0x0e, 0x00, 0x00,
}
