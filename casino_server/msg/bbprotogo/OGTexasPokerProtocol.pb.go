// Code generated by protoc-gen-go.
// source: OGTexasPokerProtocol.proto
// DO NOT EDIT!

package bbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Game_LeaveTable_Reason int32

const (
	Game_LeaveTable_quit_mormal            Game_LeaveTable_Reason = 0
	Game_LeaveTable_quit_friendKick        Game_LeaveTable_Reason = 1
	Game_LeaveTable_quit_adjustTable       Game_LeaveTable_Reason = 2
	Game_LeaveTable_quit_friendTableDelete Game_LeaveTable_Reason = 3
)

var Game_LeaveTable_Reason_name = map[int32]string{
	0: "quit_mormal",
	1: "quit_friendKick",
	2: "quit_adjustTable",
	3: "quit_friendTableDelete",
}
var Game_LeaveTable_Reason_value = map[string]int32{
	"quit_mormal":            0,
	"quit_friendKick":        1,
	"quit_adjustTable":       2,
	"quit_friendTableDelete": 3,
}

func (x Game_LeaveTable_Reason) Enum() *Game_LeaveTable_Reason {
	p := new(Game_LeaveTable_Reason)
	*p = x
	return p
}
func (x Game_LeaveTable_Reason) String() string {
	return proto.EnumName(Game_LeaveTable_Reason_name, int32(x))
}
func (x *Game_LeaveTable_Reason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Game_LeaveTable_Reason_value, data, "Game_LeaveTable_Reason")
	if err != nil {
		return err
	}
	*x = Game_LeaveTable_Reason(value)
	return nil
}
func (Game_LeaveTable_Reason) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{42, 0} }

type OGAckPayMsg_Reason int32

const (
	OGAckPayMsg_HORN_NOTHING    OGAckPayMsg_Reason = 0
	OGAckPayMsg_HORN_NOCOIN     OGAckPayMsg_Reason = 1
	OGAckPayMsg_HORN_GETCOIN    OGAckPayMsg_Reason = 2
	OGAckPayMsg_HORN_UPDATECOIN OGAckPayMsg_Reason = 3
	OGAckPayMsg_HORN_ENABLETXT  OGAckPayMsg_Reason = 4
)

var OGAckPayMsg_Reason_name = map[int32]string{
	0: "HORN_NOTHING",
	1: "HORN_NOCOIN",
	2: "HORN_GETCOIN",
	3: "HORN_UPDATECOIN",
	4: "HORN_ENABLETXT",
}
var OGAckPayMsg_Reason_value = map[string]int32{
	"HORN_NOTHING":    0,
	"HORN_NOCOIN":     1,
	"HORN_GETCOIN":    2,
	"HORN_UPDATECOIN": 3,
	"HORN_ENABLETXT":  4,
}

func (x OGAckPayMsg_Reason) Enum() *OGAckPayMsg_Reason {
	p := new(OGAckPayMsg_Reason)
	*p = x
	return p
}
func (x OGAckPayMsg_Reason) String() string {
	return proto.EnumName(OGAckPayMsg_Reason_name, int32(x))
}
func (x *OGAckPayMsg_Reason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OGAckPayMsg_Reason_value, data, "OGAckPayMsg_Reason")
	if err != nil {
		return err
	}
	*x = OGAckPayMsg_Reason(value)
	return nil
}
func (OGAckPayMsg_Reason) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{59, 0} }

type OGAckPresentCoins_Reason int32

const (
	OGAckPresentCoins_PC_NOTHING    OGAckPresentCoins_Reason = 0
	OGAckPresentCoins_PC_UNKNOWN    OGAckPresentCoins_Reason = 1
	OGAckPresentCoins_PC_CONNECTDB  OGAckPresentCoins_Reason = 2
	OGAckPresentCoins_PC_DB         OGAckPresentCoins_Reason = 3
	OGAckPresentCoins_PC_SENDERINFO OGAckPresentCoins_Reason = 4
	OGAckPresentCoins_PC_SENDERCOIN OGAckPresentCoins_Reason = 5
	OGAckPresentCoins_PC_CONFIG     OGAckPresentCoins_Reason = 6
	OGAckPresentCoins_PC_CLOSE      OGAckPresentCoins_Reason = 7
	OGAckPresentCoins_PC_AMOUNT     OGAckPresentCoins_Reason = 8
	OGAckPresentCoins_PC_TIMESUSER  OGAckPresentCoins_Reason = 9
	OGAckPresentCoins_PC_TIMESDAY   OGAckPresentCoins_Reason = 10
	OGAckPresentCoins_PC_SUBTRACT   OGAckPresentCoins_Reason = 11
	OGAckPresentCoins_PC_ADD        OGAckPresentCoins_Reason = 12
)

var OGAckPresentCoins_Reason_name = map[int32]string{
	0:  "PC_NOTHING",
	1:  "PC_UNKNOWN",
	2:  "PC_CONNECTDB",
	3:  "PC_DB",
	4:  "PC_SENDERINFO",
	5:  "PC_SENDERCOIN",
	6:  "PC_CONFIG",
	7:  "PC_CLOSE",
	8:  "PC_AMOUNT",
	9:  "PC_TIMESUSER",
	10: "PC_TIMESDAY",
	11: "PC_SUBTRACT",
	12: "PC_ADD",
}
var OGAckPresentCoins_Reason_value = map[string]int32{
	"PC_NOTHING":    0,
	"PC_UNKNOWN":    1,
	"PC_CONNECTDB":  2,
	"PC_DB":         3,
	"PC_SENDERINFO": 4,
	"PC_SENDERCOIN": 5,
	"PC_CONFIG":     6,
	"PC_CLOSE":      7,
	"PC_AMOUNT":     8,
	"PC_TIMESUSER":  9,
	"PC_TIMESDAY":   10,
	"PC_SUBTRACT":   11,
	"PC_ADD":        12,
}

func (x OGAckPresentCoins_Reason) Enum() *OGAckPresentCoins_Reason {
	p := new(OGAckPresentCoins_Reason)
	*p = x
	return p
}
func (x OGAckPresentCoins_Reason) String() string {
	return proto.EnumName(OGAckPresentCoins_Reason_name, int32(x))
}
func (x *OGAckPresentCoins_Reason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OGAckPresentCoins_Reason_value, data, "OGAckPresentCoins_Reason")
	if err != nil {
		return err
	}
	*x = OGAckPresentCoins_Reason(value)
	return nil
}
func (OGAckPresentCoins_Reason) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{64, 0} }

type Game_ACKConfirmConnect struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_ACKConfirmConnect) Reset()                    { *m = Game_ACKConfirmConnect{} }
func (m *Game_ACKConfirmConnect) String() string            { return proto.CompactTextString(m) }
func (*Game_ACKConfirmConnect) ProtoMessage()               {}
func (*Game_ACKConfirmConnect) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Game_ACKConfirmConnect) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type Game_LoginGame struct {
	Letter           []byte `protobuf:"bytes,1,opt,name=Letter" json:"Letter,omitempty"`
	Result           *int32 `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_LoginGame) Reset()                    { *m = Game_LoginGame{} }
func (m *Game_LoginGame) String() string            { return proto.CompactTextString(m) }
func (*Game_LoginGame) ProtoMessage()               {}
func (*Game_LoginGame) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Game_LoginGame) GetLetter() []byte {
	if m != nil {
		return m.Letter
	}
	return nil
}

func (m *Game_LoginGame) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 客户端请求进入match
type Game_EnterMatch struct {
	MatchID          []byte  `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	Tableid          *int32  `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	PassWord         []byte  `protobuf:"bytes,3,opt,name=PassWord" json:"PassWord,omitempty"`
	SCFUserName      []byte  `protobuf:"bytes,4,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	UserId           *uint32 `protobuf:"varint,5,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_EnterMatch) Reset()                    { *m = Game_EnterMatch{} }
func (m *Game_EnterMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_EnterMatch) ProtoMessage()               {}
func (*Game_EnterMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Game_EnterMatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *Game_EnterMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_EnterMatch) GetPassWord() []byte {
	if m != nil {
		return m.PassWord
	}
	return nil
}

func (m *Game_EnterMatch) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

func (m *Game_EnterMatch) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type Game_AckEnterMatch struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Matchid          []byte `protobuf:"bytes,2,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,3,opt,name=Tableid" json:"Tableid,omitempty"`
	NReason          *int32 `protobuf:"varint,4,opt,name=nReason" json:"nReason,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckEnterMatch) Reset()                    { *m = Game_AckEnterMatch{} }
func (m *Game_AckEnterMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_AckEnterMatch) ProtoMessage()               {}
func (*Game_AckEnterMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Game_AckEnterMatch) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_AckEnterMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckEnterMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckEnterMatch) GetNReason() int32 {
	if m != nil && m.NReason != nil {
		return *m.NReason
	}
	return 0
}

type Game_AddHandCoin struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=seat" json:"seat,omitempty"`
	Coin             *int64 `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AddHandCoin) Reset()                    { *m = Game_AddHandCoin{} }
func (m *Game_AddHandCoin) String() string            { return proto.CompactTextString(m) }
func (*Game_AddHandCoin) ProtoMessage()               {}
func (*Game_AddHandCoin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Game_AddHandCoin) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AddHandCoin) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AddHandCoin) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AddHandCoin) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

type Game_CardInfo struct {
	Color            *int32 `protobuf:"varint,1,opt,name=color" json:"color,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_CardInfo) Reset()                    { *m = Game_CardInfo{} }
func (m *Game_CardInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_CardInfo) ProtoMessage()               {}
func (*Game_CardInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Game_CardInfo) GetColor() int32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *Game_CardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type Game_InitCard struct {
	Matchid          []byte           `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32           `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32           `protobuf:"varint,3,opt,name=seat" json:"seat,omitempty"`
	NextUser         *int32           `protobuf:"varint,4,opt,name=NextUser" json:"NextUser,omitempty"`
	HandCard         []*Game_CardInfo `protobuf:"bytes,5,rep,name=HandCard" json:"HandCard,omitempty"`
	PublicCard       []*Game_CardInfo `protobuf:"bytes,6,rep,name=PublicCard" json:"PublicCard,omitempty"`
	MinRaise         *int64           `protobuf:"varint,7,opt,name=MinRaise" json:"MinRaise,omitempty"`
	ActionTime       *int32           `protobuf:"varint,8,opt,name=ActionTime" json:"ActionTime,omitempty"`
	DelayTime        *int32           `protobuf:"varint,9,opt,name=DelayTime" json:"DelayTime,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Game_InitCard) Reset()                    { *m = Game_InitCard{} }
func (m *Game_InitCard) String() string            { return proto.CompactTextString(m) }
func (*Game_InitCard) ProtoMessage()               {}
func (*Game_InitCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Game_InitCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_InitCard) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_InitCard) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_InitCard) GetNextUser() int32 {
	if m != nil && m.NextUser != nil {
		return *m.NextUser
	}
	return 0
}

func (m *Game_InitCard) GetHandCard() []*Game_CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *Game_InitCard) GetPublicCard() []*Game_CardInfo {
	if m != nil {
		return m.PublicCard
	}
	return nil
}

func (m *Game_InitCard) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_InitCard) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *Game_InitCard) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

type Game_RaiseBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	Coin             *int64 `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_RaiseBet) Reset()                    { *m = Game_RaiseBet{} }
func (m *Game_RaiseBet) String() string            { return proto.CompactTextString(m) }
func (*Game_RaiseBet) ProtoMessage()               {}
func (*Game_RaiseBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *Game_RaiseBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_RaiseBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_RaiseBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_RaiseBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

type Game_AckRaiseBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	Coin             *int64 `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	HandCoin         *int64 `protobuf:"varint,5,opt,name=HandCoin" json:"HandCoin,omitempty"`
	NextSeat         *int32 `protobuf:"varint,6,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Pool             *int64 `protobuf:"varint,7,opt,name=pool" json:"pool,omitempty"`
	MinRaise         *int64 `protobuf:"varint,8,opt,name=MinRaise" json:"MinRaise,omitempty"`
	CanRaise         *int32 `protobuf:"varint,9,opt,name=CanRaise" json:"CanRaise,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckRaiseBet) Reset()                    { *m = Game_AckRaiseBet{} }
func (m *Game_AckRaiseBet) String() string            { return proto.CompactTextString(m) }
func (*Game_AckRaiseBet) ProtoMessage()               {}
func (*Game_AckRaiseBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *Game_AckRaiseBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckRaiseBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckRaiseBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckRaiseBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_AckRaiseBet) GetHandCoin() int64 {
	if m != nil && m.HandCoin != nil {
		return *m.HandCoin
	}
	return 0
}

func (m *Game_AckRaiseBet) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_AckRaiseBet) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_AckRaiseBet) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_AckRaiseBet) GetCanRaise() int32 {
	if m != nil && m.CanRaise != nil {
		return *m.CanRaise
	}
	return 0
}

type Game_FollowBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_FollowBet) Reset()                    { *m = Game_FollowBet{} }
func (m *Game_FollowBet) String() string            { return proto.CompactTextString(m) }
func (*Game_FollowBet) ProtoMessage()               {}
func (*Game_FollowBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *Game_FollowBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_FollowBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_FollowBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_AckFollowBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	NextSeat         *int32 `protobuf:"varint,4,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Coin             *int64 `protobuf:"varint,5,opt,name=Coin" json:"Coin,omitempty"`
	HandCoin         *int64 `protobuf:"varint,6,opt,name=HandCoin" json:"HandCoin,omitempty"`
	Pool             *int64 `protobuf:"varint,7,opt,name=pool" json:"pool,omitempty"`
	MinRaise         *int64 `protobuf:"varint,8,opt,name=MinRaise" json:"MinRaise,omitempty"`
	CanRaise         *int32 `protobuf:"varint,9,opt,name=CanRaise" json:"CanRaise,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckFollowBet) Reset()                    { *m = Game_AckFollowBet{} }
func (m *Game_AckFollowBet) String() string            { return proto.CompactTextString(m) }
func (*Game_AckFollowBet) ProtoMessage()               {}
func (*Game_AckFollowBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *Game_AckFollowBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckFollowBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckFollowBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckFollowBet) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_AckFollowBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_AckFollowBet) GetHandCoin() int64 {
	if m != nil && m.HandCoin != nil {
		return *m.HandCoin
	}
	return 0
}

func (m *Game_AckFollowBet) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_AckFollowBet) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_AckFollowBet) GetCanRaise() int32 {
	if m != nil && m.CanRaise != nil {
		return *m.CanRaise
	}
	return 0
}

type Game_FoldBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_FoldBet) Reset()                    { *m = Game_FoldBet{} }
func (m *Game_FoldBet) String() string            { return proto.CompactTextString(m) }
func (*Game_FoldBet) ProtoMessage()               {}
func (*Game_FoldBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *Game_FoldBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_FoldBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_FoldBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_AckFoldBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	NextSeat         *int32 `protobuf:"varint,4,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Coin             *int64 `protobuf:"varint,5,opt,name=Coin" json:"Coin,omitempty"`
	HandCoin         *int64 `protobuf:"varint,6,opt,name=HandCoin" json:"HandCoin,omitempty"`
	Pool             *int64 `protobuf:"varint,7,opt,name=pool" json:"pool,omitempty"`
	MinRaise         *int64 `protobuf:"varint,8,opt,name=MinRaise" json:"MinRaise,omitempty"`
	CanRaise         *int32 `protobuf:"varint,9,opt,name=CanRaise" json:"CanRaise,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckFoldBet) Reset()                    { *m = Game_AckFoldBet{} }
func (m *Game_AckFoldBet) String() string            { return proto.CompactTextString(m) }
func (*Game_AckFoldBet) ProtoMessage()               {}
func (*Game_AckFoldBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *Game_AckFoldBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckFoldBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckFoldBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckFoldBet) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_AckFoldBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_AckFoldBet) GetHandCoin() int64 {
	if m != nil && m.HandCoin != nil {
		return *m.HandCoin
	}
	return 0
}

func (m *Game_AckFoldBet) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_AckFoldBet) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_AckFoldBet) GetCanRaise() int32 {
	if m != nil && m.CanRaise != nil {
		return *m.CanRaise
	}
	return 0
}

type Game_CheckBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_CheckBet) Reset()                    { *m = Game_CheckBet{} }
func (m *Game_CheckBet) String() string            { return proto.CompactTextString(m) }
func (*Game_CheckBet) ProtoMessage()               {}
func (*Game_CheckBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *Game_CheckBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_CheckBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_CheckBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_AckCheckBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	NextSeat         *int32 `protobuf:"varint,4,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Coin             *int64 `protobuf:"varint,5,opt,name=Coin" json:"Coin,omitempty"`
	HandCoin         *int64 `protobuf:"varint,6,opt,name=HandCoin" json:"HandCoin,omitempty"`
	Pool             *int64 `protobuf:"varint,8,opt,name=pool" json:"pool,omitempty"`
	MinRaise         *int64 `protobuf:"varint,9,opt,name=MinRaise" json:"MinRaise,omitempty"`
	CanRaise         *int32 `protobuf:"varint,10,opt,name=CanRaise" json:"CanRaise,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckCheckBet) Reset()                    { *m = Game_AckCheckBet{} }
func (m *Game_AckCheckBet) String() string            { return proto.CompactTextString(m) }
func (*Game_AckCheckBet) ProtoMessage()               {}
func (*Game_AckCheckBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *Game_AckCheckBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckCheckBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckCheckBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckCheckBet) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_AckCheckBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_AckCheckBet) GetHandCoin() int64 {
	if m != nil && m.HandCoin != nil {
		return *m.HandCoin
	}
	return 0
}

func (m *Game_AckCheckBet) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_AckCheckBet) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_AckCheckBet) GetCanRaise() int32 {
	if m != nil && m.CanRaise != nil {
		return *m.CanRaise
	}
	return 0
}

type Game_SendFlopCard struct {
	Matchid          []byte         `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32         `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Card0            *Game_CardInfo `protobuf:"bytes,3,opt,name=card0" json:"card0,omitempty"`
	Card1            *Game_CardInfo `protobuf:"bytes,4,opt,name=card1" json:"card1,omitempty"`
	Card2            *Game_CardInfo `protobuf:"bytes,5,opt,name=card2" json:"card2,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Game_SendFlopCard) Reset()                    { *m = Game_SendFlopCard{} }
func (m *Game_SendFlopCard) String() string            { return proto.CompactTextString(m) }
func (*Game_SendFlopCard) ProtoMessage()               {}
func (*Game_SendFlopCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *Game_SendFlopCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendFlopCard) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendFlopCard) GetCard0() *Game_CardInfo {
	if m != nil {
		return m.Card0
	}
	return nil
}

func (m *Game_SendFlopCard) GetCard1() *Game_CardInfo {
	if m != nil {
		return m.Card1
	}
	return nil
}

func (m *Game_SendFlopCard) GetCard2() *Game_CardInfo {
	if m != nil {
		return m.Card2
	}
	return nil
}

type Game_SendTurnCard struct {
	Matchid          []byte         `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32         `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Card             *Game_CardInfo `protobuf:"bytes,3,opt,name=card" json:"card,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Game_SendTurnCard) Reset()                    { *m = Game_SendTurnCard{} }
func (m *Game_SendTurnCard) String() string            { return proto.CompactTextString(m) }
func (*Game_SendTurnCard) ProtoMessage()               {}
func (*Game_SendTurnCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *Game_SendTurnCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendTurnCard) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendTurnCard) GetCard() *Game_CardInfo {
	if m != nil {
		return m.Card
	}
	return nil
}

type Game_SendRiverCard struct {
	Matchid          []byte         `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32         `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Card             *Game_CardInfo `protobuf:"bytes,3,opt,name=card" json:"card,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Game_SendRiverCard) Reset()                    { *m = Game_SendRiverCard{} }
func (m *Game_SendRiverCard) String() string            { return proto.CompactTextString(m) }
func (*Game_SendRiverCard) ProtoMessage()               {}
func (*Game_SendRiverCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *Game_SendRiverCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendRiverCard) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendRiverCard) GetCard() *Game_CardInfo {
	if m != nil {
		return m.Card
	}
	return nil
}

type Game_SendOverTurn struct {
	Matchid          []byte  `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32  `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Pool             *int64  `protobuf:"varint,3,opt,name=Pool" json:"Pool,omitempty"`
	SecondPool       []int64 `protobuf:"varint,4,rep,name=SecondPool" json:"SecondPool,omitempty"`
	NextSeat         *int32  `protobuf:"varint,5,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Handcoin         []int64 `protobuf:"varint,6,rep,name=handcoin" json:"handcoin,omitempty"`
	Coin             []int64 `protobuf:"varint,7,rep,name=coin" json:"coin,omitempty"`
	MinRaise         *int64  `protobuf:"varint,8,opt,name=MinRaise" json:"MinRaise,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_SendOverTurn) Reset()                    { *m = Game_SendOverTurn{} }
func (m *Game_SendOverTurn) String() string            { return proto.CompactTextString(m) }
func (*Game_SendOverTurn) ProtoMessage()               {}
func (*Game_SendOverTurn) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *Game_SendOverTurn) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendOverTurn) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendOverTurn) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_SendOverTurn) GetSecondPool() []int64 {
	if m != nil {
		return m.SecondPool
	}
	return nil
}

func (m *Game_SendOverTurn) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_SendOverTurn) GetHandcoin() []int64 {
	if m != nil {
		return m.Handcoin
	}
	return nil
}

func (m *Game_SendOverTurn) GetCoin() []int64 {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *Game_SendOverTurn) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

type Game_CardType struct {
	Card1            *int32 `protobuf:"varint,1,opt,name=card1" json:"card1,omitempty"`
	Card2            *int32 `protobuf:"varint,2,opt,name=card2" json:"card2,omitempty"`
	Card3            *int32 `protobuf:"varint,3,opt,name=card3" json:"card3,omitempty"`
	Card4            *int32 `protobuf:"varint,4,opt,name=card4" json:"card4,omitempty"`
	Card5            *int32 `protobuf:"varint,5,opt,name=card5" json:"card5,omitempty"`
	Cardtype         *int32 `protobuf:"varint,6,opt,name=cardtype" json:"cardtype,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_CardType) Reset()                    { *m = Game_CardType{} }
func (m *Game_CardType) String() string            { return proto.CompactTextString(m) }
func (*Game_CardType) ProtoMessage()               {}
func (*Game_CardType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *Game_CardType) GetCard1() int32 {
	if m != nil && m.Card1 != nil {
		return *m.Card1
	}
	return 0
}

func (m *Game_CardType) GetCard2() int32 {
	if m != nil && m.Card2 != nil {
		return *m.Card2
	}
	return 0
}

func (m *Game_CardType) GetCard3() int32 {
	if m != nil && m.Card3 != nil {
		return *m.Card3
	}
	return 0
}

func (m *Game_CardType) GetCard4() int32 {
	if m != nil && m.Card4 != nil {
		return *m.Card4
	}
	return 0
}

func (m *Game_CardType) GetCard5() int32 {
	if m != nil && m.Card5 != nil {
		return *m.Card5
	}
	return 0
}

func (m *Game_CardType) GetCardtype() int32 {
	if m != nil && m.Cardtype != nil {
		return *m.Cardtype
	}
	return 0
}

type Game_WinCoin struct {
	Seat             *int32 `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	PoolIndex        *int32 `protobuf:"varint,2,opt,name=poolIndex" json:"poolIndex,omitempty"`
	Coin             *int64 `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	Card1            *int32 `protobuf:"varint,4,opt,name=card1" json:"card1,omitempty"`
	Card2            *int32 `protobuf:"varint,5,opt,name=card2" json:"card2,omitempty"`
	Card3            *int32 `protobuf:"varint,6,opt,name=card3" json:"card3,omitempty"`
	Card4            *int32 `protobuf:"varint,7,opt,name=card4" json:"card4,omitempty"`
	Card5            *int32 `protobuf:"varint,8,opt,name=card5" json:"card5,omitempty"`
	Cardtype         *int32 `protobuf:"varint,9,opt,name=cardtype" json:"cardtype,omitempty"`
	Rolename         []byte `protobuf:"bytes,10,opt,name=rolename" json:"rolename,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_WinCoin) Reset()                    { *m = Game_WinCoin{} }
func (m *Game_WinCoin) String() string            { return proto.CompactTextString(m) }
func (*Game_WinCoin) ProtoMessage()               {}
func (*Game_WinCoin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *Game_WinCoin) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_WinCoin) GetPoolIndex() int32 {
	if m != nil && m.PoolIndex != nil {
		return *m.PoolIndex
	}
	return 0
}

func (m *Game_WinCoin) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_WinCoin) GetCard1() int32 {
	if m != nil && m.Card1 != nil {
		return *m.Card1
	}
	return 0
}

func (m *Game_WinCoin) GetCard2() int32 {
	if m != nil && m.Card2 != nil {
		return *m.Card2
	}
	return 0
}

func (m *Game_WinCoin) GetCard3() int32 {
	if m != nil && m.Card3 != nil {
		return *m.Card3
	}
	return 0
}

func (m *Game_WinCoin) GetCard4() int32 {
	if m != nil && m.Card4 != nil {
		return *m.Card4
	}
	return 0
}

func (m *Game_WinCoin) GetCard5() int32 {
	if m != nil && m.Card5 != nil {
		return *m.Card5
	}
	return 0
}

func (m *Game_WinCoin) GetCardtype() int32 {
	if m != nil && m.Cardtype != nil {
		return *m.Cardtype
	}
	return 0
}

func (m *Game_WinCoin) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

type Game_TestResult struct {
	Matchid          []byte           `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32           `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Handcard         []*Game_CardInfo `protobuf:"bytes,3,rep,name=handcard" json:"handcard,omitempty"`
	BShowCard        []int32          `protobuf:"varint,4,rep,name=bShowCard" json:"bShowCard,omitempty"`
	BCanShowCard     []int32          `protobuf:"varint,5,rep,name=bCanShowCard" json:"bCanShowCard,omitempty"`
	WinCoinInfo      []*Game_WinCoin  `protobuf:"bytes,6,rep,name=WinCoinInfo" json:"WinCoinInfo,omitempty"`
	HandCoin         []int64          `protobuf:"varint,7,rep,name=HandCoin" json:"HandCoin,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Game_TestResult) Reset()                    { *m = Game_TestResult{} }
func (m *Game_TestResult) String() string            { return proto.CompactTextString(m) }
func (*Game_TestResult) ProtoMessage()               {}
func (*Game_TestResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *Game_TestResult) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_TestResult) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_TestResult) GetHandcard() []*Game_CardInfo {
	if m != nil {
		return m.Handcard
	}
	return nil
}

func (m *Game_TestResult) GetBShowCard() []int32 {
	if m != nil {
		return m.BShowCard
	}
	return nil
}

func (m *Game_TestResult) GetBCanShowCard() []int32 {
	if m != nil {
		return m.BCanShowCard
	}
	return nil
}

func (m *Game_TestResult) GetWinCoinInfo() []*Game_WinCoin {
	if m != nil {
		return m.WinCoinInfo
	}
	return nil
}

func (m *Game_TestResult) GetHandCoin() []int64 {
	if m != nil {
		return m.HandCoin
	}
	return nil
}

type Game_LeaveMatch struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_LeaveMatch) Reset()                    { *m = Game_LeaveMatch{} }
func (m *Game_LeaveMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_LeaveMatch) ProtoMessage()               {}
func (*Game_LeaveMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *Game_LeaveMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_LeaveMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_LeaveMatch) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_UserInfo struct {
	UserName         []byte `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Seat             *int32 `protobuf:"varint,2,opt,name=Seat" json:"Seat,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,3,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_UserInfo) Reset()                    { *m = Game_UserInfo{} }
func (m *Game_UserInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_UserInfo) ProtoMessage()               {}
func (*Game_UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *Game_UserInfo) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *Game_UserInfo) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_UserInfo) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

type Game_SendUserInfo struct {
	UserInfo         []*Game_UserInfo `protobuf:"bytes,1,rep,name=UserInfo" json:"UserInfo,omitempty"`
	Matchid          []byte           `protobuf:"bytes,2,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32           `protobuf:"varint,3,opt,name=Tableid" json:"Tableid,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Game_SendUserInfo) Reset()                    { *m = Game_SendUserInfo{} }
func (m *Game_SendUserInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_SendUserInfo) ProtoMessage()               {}
func (*Game_SendUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *Game_SendUserInfo) GetUserInfo() []*Game_UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *Game_SendUserInfo) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendUserInfo) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

type Game_SendRank struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	UserName         []byte `protobuf:"bytes,3,opt,name=UserName" json:"UserName,omitempty"`
	Rank             *int32 `protobuf:"varint,4,opt,name=Rank" json:"Rank,omitempty"`
	ERewardType      *int32 `protobuf:"varint,5,opt,name=eRewardType" json:"eRewardType,omitempty"`
	NRewardCount     *int64 `protobuf:"varint,6,opt,name=nRewardCount" json:"nRewardCount,omitempty"`
	NTotalCoin       *int64 `protobuf:"varint,7,opt,name=nTotalCoin" json:"nTotalCoin,omitempty"`
	NNowelterCoin    *int64 `protobuf:"varint,8,opt,name=nNowelterCoin" json:"nNowelterCoin,omitempty"`
	NNowelterType    *int32 `protobuf:"varint,9,opt,name=nNowelterType" json:"nNowelterType,omitempty"`
	NScore           *int64 `protobuf:"varint,10,opt,name=nScore" json:"nScore,omitempty"`
	RewardName       []byte `protobuf:"bytes,11,opt,name=RewardName" json:"RewardName,omitempty"`
	NSeat            *int32 `protobuf:"varint,12,opt,name=nSeat" json:"nSeat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_SendRank) Reset()                    { *m = Game_SendRank{} }
func (m *Game_SendRank) String() string            { return proto.CompactTextString(m) }
func (*Game_SendRank) ProtoMessage()               {}
func (*Game_SendRank) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *Game_SendRank) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendRank) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendRank) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *Game_SendRank) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *Game_SendRank) GetERewardType() int32 {
	if m != nil && m.ERewardType != nil {
		return *m.ERewardType
	}
	return 0
}

func (m *Game_SendRank) GetNRewardCount() int64 {
	if m != nil && m.NRewardCount != nil {
		return *m.NRewardCount
	}
	return 0
}

func (m *Game_SendRank) GetNTotalCoin() int64 {
	if m != nil && m.NTotalCoin != nil {
		return *m.NTotalCoin
	}
	return 0
}

func (m *Game_SendRank) GetNNowelterCoin() int64 {
	if m != nil && m.NNowelterCoin != nil {
		return *m.NNowelterCoin
	}
	return 0
}

func (m *Game_SendRank) GetNNowelterType() int32 {
	if m != nil && m.NNowelterType != nil {
		return *m.NNowelterType
	}
	return 0
}

func (m *Game_SendRank) GetNScore() int64 {
	if m != nil && m.NScore != nil {
		return *m.NScore
	}
	return 0
}

func (m *Game_SendRank) GetRewardName() []byte {
	if m != nil {
		return m.RewardName
	}
	return nil
}

func (m *Game_SendRank) GetNSeat() int32 {
	if m != nil && m.NSeat != nil {
		return *m.NSeat
	}
	return 0
}

type Game_RestMatch struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_RestMatch) Reset()                    { *m = Game_RestMatch{} }
func (m *Game_RestMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_RestMatch) ProtoMessage()               {}
func (*Game_RestMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *Game_RestMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_RestMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

type Game_ChangeTable struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	NewTableid       *int32 `protobuf:"varint,2,opt,name=NewTableid" json:"NewTableid,omitempty"`
	Tableid          *int32 `protobuf:"varint,3,opt,name=Tableid" json:"Tableid,omitempty"`
	UserName         []byte `protobuf:"bytes,4,opt,name=UserName" json:"UserName,omitempty"`
	Seat             *int32 `protobuf:"varint,5,opt,name=Seat" json:"Seat,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,6,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_ChangeTable) Reset()                    { *m = Game_ChangeTable{} }
func (m *Game_ChangeTable) String() string            { return proto.CompactTextString(m) }
func (*Game_ChangeTable) ProtoMessage()               {}
func (*Game_ChangeTable) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *Game_ChangeTable) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_ChangeTable) GetNewTableid() int32 {
	if m != nil && m.NewTableid != nil {
		return *m.NewTableid
	}
	return 0
}

func (m *Game_ChangeTable) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_ChangeTable) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *Game_ChangeTable) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_ChangeTable) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

// 发送游戏信息
type Game_SendGameInfo struct {
	Matchid          []byte           `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32           `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	GameStatus       *int32           `protobuf:"varint,3,opt,name=GameStatus" json:"GameStatus,omitempty"`
	ChipSeat         *int32           `protobuf:"varint,4,opt,name=ChipSeat" json:"ChipSeat,omitempty"`
	Pool             *int64           `protobuf:"varint,5,opt,name=pool" json:"pool,omitempty"`
	TablePlayer      *int32           `protobuf:"varint,6,opt,name=TablePlayer" json:"TablePlayer,omitempty"`
	BankSeat         *int32           `protobuf:"varint,7,opt,name=BankSeat" json:"BankSeat,omitempty"`
	Publiccard       []*Game_CardInfo `protobuf:"bytes,8,rep,name=publiccard" json:"publiccard,omitempty"`
	Handcard         []*Game_CardInfo `protobuf:"bytes,9,rep,name=handcard" json:"handcard,omitempty"`
	HandCoin         []int64          `protobuf:"varint,10,rep,name=HandCoin" json:"HandCoin,omitempty"`
	TurnCoin         []int64          `protobuf:"varint,11,rep,name=TurnCoin" json:"TurnCoin,omitempty"`
	ActionTime       *int32           `protobuf:"varint,12,opt,name=ActionTime" json:"ActionTime,omitempty"`
	BEnable          []int32          `protobuf:"varint,13,rep,name=bEnable" json:"bEnable,omitempty"`
	MinRaise         *int64           `protobuf:"varint,14,opt,name=MinRaise" json:"MinRaise,omitempty"`
	BFold            []int32          `protobuf:"varint,15,rep,name=bFold" json:"bFold,omitempty"`
	BAllIn           []int32          `protobuf:"varint,16,rep,name=bAllIn" json:"bAllIn,omitempty"`
	BBreak           []int32          `protobuf:"varint,17,rep,name=bBreak" json:"bBreak,omitempty"`
	BLeave           []int32          `protobuf:"varint,18,rep,name=bLeave" json:"bLeave,omitempty"`
	DelayTime        *int32           `protobuf:"varint,19,opt,name=DelayTime" json:"DelayTime,omitempty"`
	NRebuyCount      *int32           `protobuf:"varint,20,opt,name=nRebuyCount" json:"nRebuyCount,omitempty"`
	NAddonCount      *int32           `protobuf:"varint,21,opt,name=nAddonCount" json:"nAddonCount,omitempty"`
	BFinalAddon      *int32           `protobuf:"varint,22,opt,name=bFinalAddon" json:"bFinalAddon,omitempty"`
	NInitActionTime  *int32           `protobuf:"varint,23,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32           `protobuf:"varint,24,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	NickName         []string         `protobuf:"bytes,25,rep,name=nickName" json:"nickName,omitempty"`
	SeatId           []int32          `protobuf:"varint,26,rep,name=seatId" json:"seatId,omitempty"`
	Seat             *int32           `protobuf:"varint,27,opt,name=seat" json:"seat,omitempty"`
	SecondPool       []int64          `protobuf:"varint,28,rep,name=secondPool" json:"secondPool,omitempty"`
	TurnMax          *int64           `protobuf:"varint,29,opt,name=turnMax" json:"turnMax,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Game_SendGameInfo) Reset()                    { *m = Game_SendGameInfo{} }
func (m *Game_SendGameInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_SendGameInfo) ProtoMessage()               {}
func (*Game_SendGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *Game_SendGameInfo) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendGameInfo) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *Game_SendGameInfo) GetChipSeat() int32 {
	if m != nil && m.ChipSeat != nil {
		return *m.ChipSeat
	}
	return 0
}

func (m *Game_SendGameInfo) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_SendGameInfo) GetTablePlayer() int32 {
	if m != nil && m.TablePlayer != nil {
		return *m.TablePlayer
	}
	return 0
}

func (m *Game_SendGameInfo) GetBankSeat() int32 {
	if m != nil && m.BankSeat != nil {
		return *m.BankSeat
	}
	return 0
}

func (m *Game_SendGameInfo) GetPubliccard() []*Game_CardInfo {
	if m != nil {
		return m.Publiccard
	}
	return nil
}

func (m *Game_SendGameInfo) GetHandcard() []*Game_CardInfo {
	if m != nil {
		return m.Handcard
	}
	return nil
}

func (m *Game_SendGameInfo) GetHandCoin() []int64 {
	if m != nil {
		return m.HandCoin
	}
	return nil
}

func (m *Game_SendGameInfo) GetTurnCoin() []int64 {
	if m != nil {
		return m.TurnCoin
	}
	return nil
}

func (m *Game_SendGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *Game_SendGameInfo) GetBEnable() []int32 {
	if m != nil {
		return m.BEnable
	}
	return nil
}

func (m *Game_SendGameInfo) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_SendGameInfo) GetBFold() []int32 {
	if m != nil {
		return m.BFold
	}
	return nil
}

func (m *Game_SendGameInfo) GetBAllIn() []int32 {
	if m != nil {
		return m.BAllIn
	}
	return nil
}

func (m *Game_SendGameInfo) GetBBreak() []int32 {
	if m != nil {
		return m.BBreak
	}
	return nil
}

func (m *Game_SendGameInfo) GetBLeave() []int32 {
	if m != nil {
		return m.BLeave
	}
	return nil
}

func (m *Game_SendGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *Game_SendGameInfo) GetNRebuyCount() int32 {
	if m != nil && m.NRebuyCount != nil {
		return *m.NRebuyCount
	}
	return 0
}

func (m *Game_SendGameInfo) GetNAddonCount() int32 {
	if m != nil && m.NAddonCount != nil {
		return *m.NAddonCount
	}
	return 0
}

func (m *Game_SendGameInfo) GetBFinalAddon() int32 {
	if m != nil && m.BFinalAddon != nil {
		return *m.BFinalAddon
	}
	return 0
}

func (m *Game_SendGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *Game_SendGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *Game_SendGameInfo) GetNickName() []string {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *Game_SendGameInfo) GetSeatId() []int32 {
	if m != nil {
		return m.SeatId
	}
	return nil
}

func (m *Game_SendGameInfo) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_SendGameInfo) GetSecondPool() []int64 {
	if m != nil {
		return m.SecondPool
	}
	return nil
}

func (m *Game_SendGameInfo) GetTurnMax() int64 {
	if m != nil && m.TurnMax != nil {
		return *m.TurnMax
	}
	return 0
}

type Game_ShowCard struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Table            *int32 `protobuf:"varint,2,opt,name=table" json:"table,omitempty"`
	BShow            *int32 `protobuf:"varint,3,opt,name=bShow" json:"bShow,omitempty"`
	Seat             *int32 `protobuf:"varint,4,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_ShowCard) Reset()                    { *m = Game_ShowCard{} }
func (m *Game_ShowCard) String() string            { return proto.CompactTextString(m) }
func (*Game_ShowCard) ProtoMessage()               {}
func (*Game_ShowCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *Game_ShowCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_ShowCard) GetTable() int32 {
	if m != nil && m.Table != nil {
		return *m.Table
	}
	return 0
}

func (m *Game_ShowCard) GetBShow() int32 {
	if m != nil && m.BShow != nil {
		return *m.BShow
	}
	return 0
}

func (m *Game_ShowCard) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_AckShowCard struct {
	Matchid          []byte           `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Table            *int32           `protobuf:"varint,2,opt,name=table" json:"table,omitempty"`
	HandCard         []*Game_CardInfo `protobuf:"bytes,3,rep,name=HandCard" json:"HandCard,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Game_AckShowCard) Reset()                    { *m = Game_AckShowCard{} }
func (m *Game_AckShowCard) String() string            { return proto.CompactTextString(m) }
func (*Game_AckShowCard) ProtoMessage()               {}
func (*Game_AckShowCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *Game_AckShowCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckShowCard) GetTable() int32 {
	if m != nil && m.Table != nil {
		return *m.Table
	}
	return 0
}

func (m *Game_AckShowCard) GetHandCard() []*Game_CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

type Game_TestLogin struct {
	UserName         []byte `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_TestLogin) Reset()                    { *m = Game_TestLogin{} }
func (m *Game_TestLogin) String() string            { return proto.CompactTextString(m) }
func (*Game_TestLogin) ProtoMessage()               {}
func (*Game_TestLogin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *Game_TestLogin) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

type Game_AckTestLogin struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Matchid          []byte `protobuf:"bytes,2,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,3,opt,name=Tableid" json:"Tableid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckTestLogin) Reset()                    { *m = Game_AckTestLogin{} }
func (m *Game_AckTestLogin) String() string            { return proto.CompactTextString(m) }
func (*Game_AckTestLogin) ProtoMessage()               {}
func (*Game_AckTestLogin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *Game_AckTestLogin) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_AckTestLogin) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckTestLogin) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

type Game_TestStartMatch struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_TestStartMatch) Reset()                    { *m = Game_TestStartMatch{} }
func (m *Game_TestStartMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_TestStartMatch) ProtoMessage()               {}
func (*Game_TestStartMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *Game_TestStartMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

type Game_ReportPlayer struct {
	Ip               *int32 `protobuf:"varint,1,opt,name=ip" json:"ip,omitempty"`
	Port             *int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Type             *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Player           *int32 `protobuf:"varint,4,opt,name=player" json:"player,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_ReportPlayer) Reset()                    { *m = Game_ReportPlayer{} }
func (m *Game_ReportPlayer) String() string            { return proto.CompactTextString(m) }
func (*Game_ReportPlayer) ProtoMessage()               {}
func (*Game_ReportPlayer) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *Game_ReportPlayer) GetIp() int32 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *Game_ReportPlayer) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *Game_ReportPlayer) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Game_ReportPlayer) GetPlayer() int32 {
	if m != nil && m.Player != nil {
		return *m.Player
	}
	return 0
}

type Game_UseDelayTime struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	Delaytime        *int32 `protobuf:"varint,4,opt,name=delaytime" json:"delaytime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_UseDelayTime) Reset()                    { *m = Game_UseDelayTime{} }
func (m *Game_UseDelayTime) String() string            { return proto.CompactTextString(m) }
func (*Game_UseDelayTime) ProtoMessage()               {}
func (*Game_UseDelayTime) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *Game_UseDelayTime) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_UseDelayTime) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_UseDelayTime) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_UseDelayTime) GetDelaytime() int32 {
	if m != nil && m.Delaytime != nil {
		return *m.Delaytime
	}
	return 0
}

// 离座消息
type Game_LeaveSeat struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	BLeave           *int32 `protobuf:"varint,4,opt,name=bLeave" json:"bLeave,omitempty"`
	BWaitBling       *int32 `protobuf:"varint,5,opt,name=bWaitBling" json:"bWaitBling,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_LeaveSeat) Reset()                    { *m = Game_LeaveSeat{} }
func (m *Game_LeaveSeat) String() string            { return proto.CompactTextString(m) }
func (*Game_LeaveSeat) ProtoMessage()               {}
func (*Game_LeaveSeat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *Game_LeaveSeat) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_LeaveSeat) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_LeaveSeat) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_LeaveSeat) GetBLeave() int32 {
	if m != nil && m.BLeave != nil {
		return *m.BLeave
	}
	return 0
}

func (m *Game_LeaveSeat) GetBWaitBling() int32 {
	if m != nil && m.BWaitBling != nil {
		return *m.BWaitBling
	}
	return 0
}

type Game_MatchChip struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	MaxChip          *int64 `protobuf:"varint,3,opt,name=MaxChip" json:"MaxChip,omitempty"`
	MinChip          *int64 `protobuf:"varint,4,opt,name=MinChip" json:"MinChip,omitempty"`
	AveChip          *int64 `protobuf:"varint,5,opt,name=AveChip" json:"AveChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_MatchChip) Reset()                    { *m = Game_MatchChip{} }
func (m *Game_MatchChip) String() string            { return proto.CompactTextString(m) }
func (*Game_MatchChip) ProtoMessage()               {}
func (*Game_MatchChip) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

func (m *Game_MatchChip) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_MatchChip) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_MatchChip) GetMaxChip() int64 {
	if m != nil && m.MaxChip != nil {
		return *m.MaxChip
	}
	return 0
}

func (m *Game_MatchChip) GetMinChip() int64 {
	if m != nil && m.MinChip != nil {
		return *m.MinChip
	}
	return 0
}

func (m *Game_MatchChip) GetAveChip() int64 {
	if m != nil && m.AveChip != nil {
		return *m.AveChip
	}
	return 0
}

type Game_SendUserRank struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Rank             *int32 `protobuf:"varint,3,opt,name=Rank" json:"Rank,omitempty"`
	ResPlayer        *int32 `protobuf:"varint,4,opt,name=ResPlayer" json:"ResPlayer,omitempty"`
	Username         []byte `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_SendUserRank) Reset()                    { *m = Game_SendUserRank{} }
func (m *Game_SendUserRank) String() string            { return proto.CompactTextString(m) }
func (*Game_SendUserRank) ProtoMessage()               {}
func (*Game_SendUserRank) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *Game_SendUserRank) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendUserRank) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendUserRank) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *Game_SendUserRank) GetResPlayer() int32 {
	if m != nil && m.ResPlayer != nil {
		return *m.ResPlayer
	}
	return 0
}

func (m *Game_SendUserRank) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

// 盲注变化消息
type Game_BlindChange struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	SmallBlind       *int64 `protobuf:"varint,3,opt,name=SmallBlind" json:"SmallBlind,omitempty"`
	BigBlind         *int64 `protobuf:"varint,4,opt,name=BigBlind" json:"BigBlind,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_BlindChange) Reset()                    { *m = Game_BlindChange{} }
func (m *Game_BlindChange) String() string            { return proto.CompactTextString(m) }
func (*Game_BlindChange) ProtoMessage()               {}
func (*Game_BlindChange) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *Game_BlindChange) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_BlindChange) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_BlindChange) GetSmallBlind() int64 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *Game_BlindChange) GetBigBlind() int64 {
	if m != nil && m.BigBlind != nil {
		return *m.BigBlind
	}
	return 0
}

// 下一级盲注信息
type Game_NextBlindInfo struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	NextSmallBlind   *int64 `protobuf:"varint,3,opt,name=NextSmallBlind" json:"NextSmallBlind,omitempty"`
	NextBigBlind     *int64 `protobuf:"varint,4,opt,name=NextBigBlind" json:"NextBigBlind,omitempty"`
	NextBlindTime    *int32 `protobuf:"varint,5,opt,name=NextBlindTime" json:"NextBlindTime,omitempty"`
	RestTime         *int32 `protobuf:"varint,6,opt,name=RestTime" json:"RestTime,omitempty"`
	BlindClass       *int32 `protobuf:"varint,7,opt,name=BlindClass" json:"BlindClass,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_NextBlindInfo) Reset()                    { *m = Game_NextBlindInfo{} }
func (m *Game_NextBlindInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_NextBlindInfo) ProtoMessage()               {}
func (*Game_NextBlindInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{40} }

func (m *Game_NextBlindInfo) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_NextBlindInfo) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_NextBlindInfo) GetNextSmallBlind() int64 {
	if m != nil && m.NextSmallBlind != nil {
		return *m.NextSmallBlind
	}
	return 0
}

func (m *Game_NextBlindInfo) GetNextBigBlind() int64 {
	if m != nil && m.NextBigBlind != nil {
		return *m.NextBigBlind
	}
	return 0
}

func (m *Game_NextBlindInfo) GetNextBlindTime() int32 {
	if m != nil && m.NextBlindTime != nil {
		return *m.NextBlindTime
	}
	return 0
}

func (m *Game_NextBlindInfo) GetRestTime() int32 {
	if m != nil && m.RestTime != nil {
		return *m.RestTime
	}
	return 0
}

func (m *Game_NextBlindInfo) GetBlindClass() int32 {
	if m != nil && m.BlindClass != nil {
		return *m.BlindClass
	}
	return 0
}

// 提示休息多长时间
type Game_SendRestTime struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Resttime         *int32 `protobuf:"varint,3,opt,name=resttime" json:"resttime,omitempty"`
	Type             *int32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	RestIndex        *int32 `protobuf:"varint,5,opt,name=restIndex" json:"restIndex,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_SendRestTime) Reset()                    { *m = Game_SendRestTime{} }
func (m *Game_SendRestTime) String() string            { return proto.CompactTextString(m) }
func (*Game_SendRestTime) ProtoMessage()               {}
func (*Game_SendRestTime) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{41} }

func (m *Game_SendRestTime) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendRestTime) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendRestTime) GetResttime() int32 {
	if m != nil && m.Resttime != nil {
		return *m.Resttime
	}
	return 0
}

func (m *Game_SendRestTime) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Game_SendRestTime) GetRestIndex() int32 {
	if m != nil && m.RestIndex != nil {
		return *m.RestIndex
	}
	return 0
}

// 离桌消息，当用户离开桌子时，给该桌用户发送该消息
type Game_LeaveTable struct {
	Matchid          []byte                  `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32                  `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Seat             *int32                  `protobuf:"varint,3,opt,name=seat" json:"seat,omitempty"`
	Username         []byte                  `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	Reason           *Game_LeaveTable_Reason `protobuf:"varint,5,opt,name=reason,enum=bbproto.Game_LeaveTable_Reason" json:"reason,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *Game_LeaveTable) Reset()                    { *m = Game_LeaveTable{} }
func (m *Game_LeaveTable) String() string            { return proto.CompactTextString(m) }
func (*Game_LeaveTable) ProtoMessage()               {}
func (*Game_LeaveTable) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{42} }

func (m *Game_LeaveTable) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_LeaveTable) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_LeaveTable) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_LeaveTable) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *Game_LeaveTable) GetReason() Game_LeaveTable_Reason {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return Game_LeaveTable_quit_mormal
}

// 前注消息
type Game_PreCoin struct {
	Matchid          []byte  `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32  `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Precoin          []int64 `protobuf:"varint,3,rep,name=precoin" json:"precoin,omitempty"`
	Coin             []int64 `protobuf:"varint,4,rep,name=coin" json:"coin,omitempty"`
	Pool             *int64  `protobuf:"varint,5,opt,name=pool" json:"pool,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_PreCoin) Reset()                    { *m = Game_PreCoin{} }
func (m *Game_PreCoin) String() string            { return proto.CompactTextString(m) }
func (*Game_PreCoin) ProtoMessage()               {}
func (*Game_PreCoin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{43} }

func (m *Game_PreCoin) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_PreCoin) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_PreCoin) GetPrecoin() []int64 {
	if m != nil {
		return m.Precoin
	}
	return nil
}

func (m *Game_PreCoin) GetCoin() []int64 {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *Game_PreCoin) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

// 盲注消息
type Game_BlindCoin struct {
	Matchid          []byte  `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32  `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Banker           *int32  `protobuf:"varint,3,opt,name=banker" json:"banker,omitempty"`
	Handcoin         []int64 `protobuf:"varint,4,rep,name=handcoin" json:"handcoin,omitempty"`
	Coin             []int64 `protobuf:"varint,5,rep,name=coin" json:"coin,omitempty"`
	Pool             *int64  `protobuf:"varint,6,opt,name=pool" json:"pool,omitempty"`
	Smallblindseat   *int32  `protobuf:"varint,7,opt,name=smallblindseat" json:"smallblindseat,omitempty"`
	Bigblindseat     *int32  `protobuf:"varint,8,opt,name=bigblindseat" json:"bigblindseat,omitempty"`
	Smallblind       *int64  `protobuf:"varint,9,opt,name=smallblind" json:"smallblind,omitempty"`
	Bigblind         *int64  `protobuf:"varint,10,opt,name=bigblind" json:"bigblind,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_BlindCoin) Reset()                    { *m = Game_BlindCoin{} }
func (m *Game_BlindCoin) String() string            { return proto.CompactTextString(m) }
func (*Game_BlindCoin) ProtoMessage()               {}
func (*Game_BlindCoin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{44} }

func (m *Game_BlindCoin) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_BlindCoin) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_BlindCoin) GetBanker() int32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

func (m *Game_BlindCoin) GetHandcoin() []int64 {
	if m != nil {
		return m.Handcoin
	}
	return nil
}

func (m *Game_BlindCoin) GetCoin() []int64 {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *Game_BlindCoin) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_BlindCoin) GetSmallblindseat() int32 {
	if m != nil && m.Smallblindseat != nil {
		return *m.Smallblindseat
	}
	return 0
}

func (m *Game_BlindCoin) GetBigblindseat() int32 {
	if m != nil && m.Bigblindseat != nil {
		return *m.Bigblindseat
	}
	return 0
}

func (m *Game_BlindCoin) GetSmallblind() int64 {
	if m != nil && m.Smallblind != nil {
		return *m.Smallblind
	}
	return 0
}

func (m *Game_BlindCoin) GetBigblind() int64 {
	if m != nil && m.Bigblind != nil {
		return *m.Bigblind
	}
	return 0
}

// 防沉迷消息
type Game_NowelterInfo struct {
	Reusername       []byte `protobuf:"bytes,1,opt,name=reusername" json:"reusername,omitempty"`
	NType            *int32 `protobuf:"varint,2,opt,name=nType" json:"nType,omitempty"`
	NReason          *int32 `protobuf:"varint,3,opt,name=nReason" json:"nReason,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_NowelterInfo) Reset()                    { *m = Game_NowelterInfo{} }
func (m *Game_NowelterInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_NowelterInfo) ProtoMessage()               {}
func (*Game_NowelterInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{45} }

func (m *Game_NowelterInfo) GetReusername() []byte {
	if m != nil {
		return m.Reusername
	}
	return nil
}

func (m *Game_NowelterInfo) GetNType() int32 {
	if m != nil && m.NType != nil {
		return *m.NType
	}
	return 0
}

func (m *Game_NowelterInfo) GetNReason() int32 {
	if m != nil && m.NReason != nil {
		return *m.NReason
	}
	return 0
}

// 现金桌的消息定义
// 请求坐下
type OGReqSitdownSeat struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	NField           *int32 `protobuf:"varint,4,opt,name=nField" json:"nField,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,5,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqSitdownSeat) Reset()                    { *m = OGReqSitdownSeat{} }
func (m *OGReqSitdownSeat) String() string            { return proto.CompactTextString(m) }
func (*OGReqSitdownSeat) ProtoMessage()               {}
func (*OGReqSitdownSeat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

func (m *OGReqSitdownSeat) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGReqSitdownSeat) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGReqSitdownSeat) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *OGReqSitdownSeat) GetNField() int32 {
	if m != nil && m.NField != nil {
		return *m.NField
	}
	return 0
}

func (m *OGReqSitdownSeat) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

type OGAckSitdownSeat struct {
	Result           *int32 `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
	Reason           *int32 `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	MatchID          []byte `protobuf:"bytes,3,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,4,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,5,opt,name=nSeatID" json:"nSeatID,omitempty"`
	BForceBuy        *int32 `protobuf:"varint,6,opt,name=bForceBuy" json:"bForceBuy,omitempty"`
	NForceMinChip    *int64 `protobuf:"varint,7,opt,name=nForceMinChip" json:"nForceMinChip,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,8,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGAckSitdownSeat) Reset()                    { *m = OGAckSitdownSeat{} }
func (m *OGAckSitdownSeat) String() string            { return proto.CompactTextString(m) }
func (*OGAckSitdownSeat) ProtoMessage()               {}
func (*OGAckSitdownSeat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

func (m *OGAckSitdownSeat) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *OGAckSitdownSeat) GetReason() int32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *OGAckSitdownSeat) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAckSitdownSeat) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGAckSitdownSeat) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *OGAckSitdownSeat) GetBForceBuy() int32 {
	if m != nil && m.BForceBuy != nil {
		return *m.BForceBuy
	}
	return 0
}

func (m *OGAckSitdownSeat) GetNForceMinChip() int64 {
	if m != nil && m.NForceMinChip != nil {
		return *m.NForceMinChip
	}
	return 0
}

func (m *OGAckSitdownSeat) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

// 带入
type OGReqBuyChip struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	NBuyChip         *int64 `protobuf:"varint,4,opt,name=nBuyChip" json:"nBuyChip,omitempty"`
	NCurChip         *int64 `protobuf:"varint,5,opt,name=nCurChip" json:"nCurChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqBuyChip) Reset()                    { *m = OGReqBuyChip{} }
func (m *OGReqBuyChip) String() string            { return proto.CompactTextString(m) }
func (*OGReqBuyChip) ProtoMessage()               {}
func (*OGReqBuyChip) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{48} }

func (m *OGReqBuyChip) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGReqBuyChip) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGReqBuyChip) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *OGReqBuyChip) GetNBuyChip() int64 {
	if m != nil && m.NBuyChip != nil {
		return *m.NBuyChip
	}
	return 0
}

func (m *OGReqBuyChip) GetNCurChip() int64 {
	if m != nil && m.NCurChip != nil {
		return *m.NCurChip
	}
	return 0
}

type OGAckBuyChip struct {
	Result *int32 `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
	Reason *int32 `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	// 7没有该比赛,8数据库操作失败,9不符合强制带入条件,10不在最大最小带入范围内,11游戏中不能带人
	MatchID          []byte `protobuf:"bytes,3,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,4,opt,name=sUserName" json:"sUserName,omitempty"`
	NBuyChip         *int64 `protobuf:"varint,5,opt,name=nBuyChip" json:"nBuyChip,omitempty"`
	NTotalCoin       *int64 `protobuf:"varint,6,opt,name=nTotalCoin" json:"nTotalCoin,omitempty"`
	BWaitBling       *int32 `protobuf:"varint,7,opt,name=bWaitBling" json:"bWaitBling,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGAckBuyChip) Reset()                    { *m = OGAckBuyChip{} }
func (m *OGAckBuyChip) String() string            { return proto.CompactTextString(m) }
func (*OGAckBuyChip) ProtoMessage()               {}
func (*OGAckBuyChip) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{49} }

func (m *OGAckBuyChip) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *OGAckBuyChip) GetReason() int32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *OGAckBuyChip) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAckBuyChip) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGAckBuyChip) GetNBuyChip() int64 {
	if m != nil && m.NBuyChip != nil {
		return *m.NBuyChip
	}
	return 0
}

func (m *OGAckBuyChip) GetNTotalCoin() int64 {
	if m != nil && m.NTotalCoin != nil {
		return *m.NTotalCoin
	}
	return 0
}

func (m *OGAckBuyChip) GetBWaitBling() int32 {
	if m != nil && m.BWaitBling != nil {
		return *m.BWaitBling
	}
	return 0
}

// 由于筹码不够，需要向客户端发送带入的消息
type OGNeetBugChip struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGNeetBugChip) Reset()                    { *m = OGNeetBugChip{} }
func (m *OGNeetBugChip) String() string            { return proto.CompactTextString(m) }
func (*OGNeetBugChip) ProtoMessage()               {}
func (*OGNeetBugChip) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

func (m *OGNeetBugChip) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGNeetBugChip) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

// 请求离座
type OGReqLeave struct {
	MatchID          []byte  `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte  `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32  `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	NUserIP          *uint32 `protobuf:"varint,4,opt,name=nUserIP" json:"nUserIP,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OGReqLeave) Reset()                    { *m = OGReqLeave{} }
func (m *OGReqLeave) String() string            { return proto.CompactTextString(m) }
func (*OGReqLeave) ProtoMessage()               {}
func (*OGReqLeave) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{51} }

func (m *OGReqLeave) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGReqLeave) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGReqLeave) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *OGReqLeave) GetNUserIP() uint32 {
	if m != nil && m.NUserIP != nil {
		return *m.NUserIP
	}
	return 0
}

type OGAckLeave struct {
	Result           *int32 `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
	Reason           *int32 `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	MatchID          []byte `protobuf:"bytes,3,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,4,opt,name=sUserName" json:"sUserName,omitempty"`
	NlCoin           *int64 `protobuf:"varint,5,opt,name=nlCoin" json:"nlCoin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGAckLeave) Reset()                    { *m = OGAckLeave{} }
func (m *OGAckLeave) String() string            { return proto.CompactTextString(m) }
func (*OGAckLeave) ProtoMessage()               {}
func (*OGAckLeave) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{52} }

func (m *OGAckLeave) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *OGAckLeave) GetReason() int32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *OGAckLeave) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAckLeave) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGAckLeave) GetNlCoin() int64 {
	if m != nil && m.NlCoin != nil {
		return *m.NlCoin
	}
	return 0
}

// 带入规则
type OGGameRule struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	MaxChip          *int64 `protobuf:"varint,4,opt,name=MaxChip" json:"MaxChip,omitempty"`
	MinChip          *int64 `protobuf:"varint,5,opt,name=MinChip" json:"MinChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGGameRule) Reset()                    { *m = OGGameRule{} }
func (m *OGGameRule) String() string            { return proto.CompactTextString(m) }
func (*OGGameRule) ProtoMessage()               {}
func (*OGGameRule) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{53} }

func (m *OGGameRule) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGGameRule) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGGameRule) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *OGGameRule) GetMaxChip() int64 {
	if m != nil && m.MaxChip != nil {
		return *m.MaxChip
	}
	return 0
}

func (m *OGGameRule) GetMinChip() int64 {
	if m != nil && m.MinChip != nil {
		return *m.MinChip
	}
	return 0
}

// 等待大盲
type OGWaitBigBling struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	IsWait           *int32 `protobuf:"varint,4,opt,name=IsWait" json:"IsWait,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGWaitBigBling) Reset()                    { *m = OGWaitBigBling{} }
func (m *OGWaitBigBling) String() string            { return proto.CompactTextString(m) }
func (*OGWaitBigBling) ProtoMessage()               {}
func (*OGWaitBigBling) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{54} }

func (m *OGWaitBigBling) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGWaitBigBling) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGWaitBigBling) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *OGWaitBigBling) GetIsWait() int32 {
	if m != nil && m.IsWait != nil {
		return *m.IsWait
	}
	return 0
}

// 下一个大盲旁观
type OGNextBiglingWatch struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	IsWatcher        *int32 `protobuf:"varint,4,opt,name=IsWatcher" json:"IsWatcher,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGNextBiglingWatch) Reset()                    { *m = OGNextBiglingWatch{} }
func (m *OGNextBiglingWatch) String() string            { return proto.CompactTextString(m) }
func (*OGNextBiglingWatch) ProtoMessage()               {}
func (*OGNextBiglingWatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{55} }

func (m *OGNextBiglingWatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGNextBiglingWatch) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGNextBiglingWatch) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *OGNextBiglingWatch) GetIsWatcher() int32 {
	if m != nil && m.IsWatcher != nil {
		return *m.IsWatcher
	}
	return 0
}

// 聊天消息
type OGChatMsg struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	SzChat           []byte `protobuf:"bytes,4,opt,name=szChat" json:"szChat,omitempty"`
	Result           *int32 `protobuf:"varint,5,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGChatMsg) Reset()                    { *m = OGChatMsg{} }
func (m *OGChatMsg) String() string            { return proto.CompactTextString(m) }
func (*OGChatMsg) ProtoMessage()               {}
func (*OGChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{56} }

func (m *OGChatMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGChatMsg) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGChatMsg) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *OGChatMsg) GetSzChat() []byte {
	if m != nil {
		return m.SzChat
	}
	return nil
}

func (m *OGChatMsg) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 建议消息
type OGProposalMsg struct {
	SName            []byte `protobuf:"bytes,1,opt,name=sName" json:"sName,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	STelephone       []byte `protobuf:"bytes,3,opt,name=sTelephone" json:"sTelephone,omitempty"`
	SContent         []byte `protobuf:"bytes,4,opt,name=sContent" json:"sContent,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGProposalMsg) Reset()                    { *m = OGProposalMsg{} }
func (m *OGProposalMsg) String() string            { return proto.CompactTextString(m) }
func (*OGProposalMsg) ProtoMessage()               {}
func (*OGProposalMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{57} }

func (m *OGProposalMsg) GetSName() []byte {
	if m != nil {
		return m.SName
	}
	return nil
}

func (m *OGProposalMsg) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGProposalMsg) GetSTelephone() []byte {
	if m != nil {
		return m.STelephone
	}
	return nil
}

func (m *OGProposalMsg) GetSContent() []byte {
	if m != nil {
		return m.SContent
	}
	return nil
}

// 付费消息
type OGReqPayMsg struct {
	SUserName        []byte `protobuf:"bytes,1,opt,name=sUserName" json:"sUserName,omitempty"`
	SzTxt            []byte `protobuf:"bytes,2,opt,name=szTxt" json:"szTxt,omitempty"`
	MatchID          []byte `protobuf:"bytes,3,opt,name=MatchID" json:"MatchID,omitempty"`
	NTableNo         *int32 `protobuf:"varint,4,opt,name=nTableNo" json:"nTableNo,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqPayMsg) Reset()                    { *m = OGReqPayMsg{} }
func (m *OGReqPayMsg) String() string            { return proto.CompactTextString(m) }
func (*OGReqPayMsg) ProtoMessage()               {}
func (*OGReqPayMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{58} }

func (m *OGReqPayMsg) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGReqPayMsg) GetSzTxt() []byte {
	if m != nil {
		return m.SzTxt
	}
	return nil
}

func (m *OGReqPayMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGReqPayMsg) GetNTableNo() int32 {
	if m != nil && m.NTableNo != nil {
		return *m.NTableNo
	}
	return 0
}

type OGAckPayMsg struct {
	SUserName        []byte              `protobuf:"bytes,1,opt,name=sUserName" json:"sUserName,omitempty"`
	MatchID          []byte              `protobuf:"bytes,2,opt,name=MatchID" json:"MatchID,omitempty"`
	NTableNo         *int32              `protobuf:"varint,3,opt,name=nTableNo" json:"nTableNo,omitempty"`
	SzTxt            []byte              `protobuf:"bytes,4,opt,name=szTxt" json:"szTxt,omitempty"`
	Result           *int32              `protobuf:"varint,5,opt,name=result" json:"result,omitempty"`
	EReason          *OGAckPayMsg_Reason `protobuf:"varint,6,opt,name=eReason,enum=bbproto.OGAckPayMsg_Reason" json:"eReason,omitempty"`
	NType            *int32              `protobuf:"varint,7,opt,name=nType" json:"nType,omitempty"`
	Remaincount      *int32              `protobuf:"varint,8,opt,name=remaincount" json:"remaincount,omitempty"`
	ReduceCoin       *int64              `protobuf:"varint,9,opt,name=reduceCoin" json:"reduceCoin,omitempty"`
	SCFUserName      []byte              `protobuf:"bytes,10,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *OGAckPayMsg) Reset()                    { *m = OGAckPayMsg{} }
func (m *OGAckPayMsg) String() string            { return proto.CompactTextString(m) }
func (*OGAckPayMsg) ProtoMessage()               {}
func (*OGAckPayMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{59} }

func (m *OGAckPayMsg) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGAckPayMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAckPayMsg) GetNTableNo() int32 {
	if m != nil && m.NTableNo != nil {
		return *m.NTableNo
	}
	return 0
}

func (m *OGAckPayMsg) GetSzTxt() []byte {
	if m != nil {
		return m.SzTxt
	}
	return nil
}

func (m *OGAckPayMsg) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *OGAckPayMsg) GetEReason() OGAckPayMsg_Reason {
	if m != nil && m.EReason != nil {
		return *m.EReason
	}
	return OGAckPayMsg_HORN_NOTHING
}

func (m *OGAckPayMsg) GetNType() int32 {
	if m != nil && m.NType != nil {
		return *m.NType
	}
	return 0
}

func (m *OGAckPayMsg) GetRemaincount() int32 {
	if m != nil && m.Remaincount != nil {
		return *m.Remaincount
	}
	return 0
}

func (m *OGAckPayMsg) GetReduceCoin() int64 {
	if m != nil && m.ReduceCoin != nil {
		return *m.ReduceCoin
	}
	return 0
}

func (m *OGAckPayMsg) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

// ======================以下为朋友桌新增消息======================
// 请求兑换活跃度
// #define OGID_TEXASPOKER_EXCHANGEHYD (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000073)
type OGReqExChangeHYD struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NExHYDCount      *int64 `protobuf:"varint,3,opt,name=nExHYDCount" json:"nExHYDCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqExChangeHYD) Reset()                    { *m = OGReqExChangeHYD{} }
func (m *OGReqExChangeHYD) String() string            { return proto.CompactTextString(m) }
func (*OGReqExChangeHYD) ProtoMessage()               {}
func (*OGReqExChangeHYD) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{60} }

func (m *OGReqExChangeHYD) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGReqExChangeHYD) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGReqExChangeHYD) GetNExHYDCount() int64 {
	if m != nil && m.NExHYDCount != nil {
		return *m.NExHYDCount
	}
	return 0
}

type OGAckExChangeHYD struct {
	NResult          *int32 `protobuf:"varint,1,opt,name=nResult" json:"nResult,omitempty"`
	MatchID          []byte `protobuf:"bytes,2,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,3,opt,name=sUserName" json:"sUserName,omitempty"`
	NExHYDCount      *int64 `protobuf:"varint,4,opt,name=nExHYDCount" json:"nExHYDCount,omitempty"`
	NCurHYDCount     *int64 `protobuf:"varint,5,opt,name=nCurHYDCount" json:"nCurHYDCount,omitempty"`
	NExCoin          *int64 `protobuf:"varint,6,opt,name=nExCoin" json:"nExCoin,omitempty"`
	NTotalCoin       *int64 `protobuf:"varint,7,opt,name=nTotalCoin" json:"nTotalCoin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGAckExChangeHYD) Reset()                    { *m = OGAckExChangeHYD{} }
func (m *OGAckExChangeHYD) String() string            { return proto.CompactTextString(m) }
func (*OGAckExChangeHYD) ProtoMessage()               {}
func (*OGAckExChangeHYD) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{61} }

func (m *OGAckExChangeHYD) GetNResult() int32 {
	if m != nil && m.NResult != nil {
		return *m.NResult
	}
	return 0
}

func (m *OGAckExChangeHYD) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAckExChangeHYD) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGAckExChangeHYD) GetNExHYDCount() int64 {
	if m != nil && m.NExHYDCount != nil {
		return *m.NExHYDCount
	}
	return 0
}

func (m *OGAckExChangeHYD) GetNCurHYDCount() int64 {
	if m != nil && m.NCurHYDCount != nil {
		return *m.NCurHYDCount
	}
	return 0
}

func (m *OGAckExChangeHYD) GetNExCoin() int64 {
	if m != nil && m.NExCoin != nil {
		return *m.NExCoin
	}
	return 0
}

func (m *OGAckExChangeHYD) GetNTotalCoin() int64 {
	if m != nil && m.NTotalCoin != nil {
		return *m.NTotalCoin
	}
	return 0
}

// 通知活跃度变化
// #define OGID_TEXASPOKER_CHANGEHYD  (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000074)
type OGNtfChangeHYD struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NHYDTotal        *int64 `protobuf:"varint,3,opt,name=nHYDTotal" json:"nHYDTotal,omitempty"`
	NHYDCur          *int64 `protobuf:"varint,4,opt,name=nHYDCur" json:"nHYDCur,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGNtfChangeHYD) Reset()                    { *m = OGNtfChangeHYD{} }
func (m *OGNtfChangeHYD) String() string            { return proto.CompactTextString(m) }
func (*OGNtfChangeHYD) ProtoMessage()               {}
func (*OGNtfChangeHYD) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{62} }

func (m *OGNtfChangeHYD) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGNtfChangeHYD) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGNtfChangeHYD) GetNHYDTotal() int64 {
	if m != nil && m.NHYDTotal != nil {
		return *m.NHYDTotal
	}
	return 0
}

func (m *OGNtfChangeHYD) GetNHYDCur() int64 {
	if m != nil && m.NHYDCur != nil {
		return *m.NHYDCur
	}
	return 0
}

// 请求赠送金币
// #define OGID_TEXASPOKER_PRESENTCOINS (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000075)
type OGReqPresentCoins struct {
	MatchID          []byte  `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SSender          []byte  `protobuf:"bytes,2,opt,name=sSender" json:"sSender,omitempty"`
	SRecver          []byte  `protobuf:"bytes,3,opt,name=sRecver" json:"sRecver,omitempty"`
	NCoin            *int64  `protobuf:"varint,4,opt,name=nCoin" json:"nCoin,omitempty"`
	NIPSender        *uint32 `protobuf:"varint,5,opt,name=nIPSender" json:"nIPSender,omitempty"`
	NIPRecver        *uint32 `protobuf:"varint,6,opt,name=nIPRecver" json:"nIPRecver,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OGReqPresentCoins) Reset()                    { *m = OGReqPresentCoins{} }
func (m *OGReqPresentCoins) String() string            { return proto.CompactTextString(m) }
func (*OGReqPresentCoins) ProtoMessage()               {}
func (*OGReqPresentCoins) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{63} }

func (m *OGReqPresentCoins) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGReqPresentCoins) GetSSender() []byte {
	if m != nil {
		return m.SSender
	}
	return nil
}

func (m *OGReqPresentCoins) GetSRecver() []byte {
	if m != nil {
		return m.SRecver
	}
	return nil
}

func (m *OGReqPresentCoins) GetNCoin() int64 {
	if m != nil && m.NCoin != nil {
		return *m.NCoin
	}
	return 0
}

func (m *OGReqPresentCoins) GetNIPSender() uint32 {
	if m != nil && m.NIPSender != nil {
		return *m.NIPSender
	}
	return 0
}

func (m *OGReqPresentCoins) GetNIPRecver() uint32 {
	if m != nil && m.NIPRecver != nil {
		return *m.NIPRecver
	}
	return 0
}

type OGAckPresentCoins struct {
	MatchID          []byte                    `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	NResult          *int32                    `protobuf:"varint,2,opt,name=nResult" json:"nResult,omitempty"`
	SSender          []byte                    `protobuf:"bytes,3,opt,name=sSender" json:"sSender,omitempty"`
	SRecver          []byte                    `protobuf:"bytes,4,opt,name=sRecver" json:"sRecver,omitempty"`
	NPresentCoin     *int64                    `protobuf:"varint,5,opt,name=nPresentCoin" json:"nPresentCoin,omitempty"`
	EReason          *OGAckPresentCoins_Reason `protobuf:"varint,6,opt,name=eReason,enum=bbproto.OGAckPresentCoins_Reason" json:"eReason,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *OGAckPresentCoins) Reset()                    { *m = OGAckPresentCoins{} }
func (m *OGAckPresentCoins) String() string            { return proto.CompactTextString(m) }
func (*OGAckPresentCoins) ProtoMessage()               {}
func (*OGAckPresentCoins) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{64} }

func (m *OGAckPresentCoins) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAckPresentCoins) GetNResult() int32 {
	if m != nil && m.NResult != nil {
		return *m.NResult
	}
	return 0
}

func (m *OGAckPresentCoins) GetSSender() []byte {
	if m != nil {
		return m.SSender
	}
	return nil
}

func (m *OGAckPresentCoins) GetSRecver() []byte {
	if m != nil {
		return m.SRecver
	}
	return nil
}

func (m *OGAckPresentCoins) GetNPresentCoin() int64 {
	if m != nil && m.NPresentCoin != nil {
		return *m.NPresentCoin
	}
	return 0
}

func (m *OGAckPresentCoins) GetEReason() OGAckPresentCoins_Reason {
	if m != nil && m.EReason != nil {
		return *m.EReason
	}
	return OGAckPresentCoins_PC_NOTHING
}

// 私聊消息
// #define OGID_TEXASPOKER_PRIVATECHAT (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000076)
type OGReqPrivateChatMsg struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SSender          []byte `protobuf:"bytes,2,opt,name=sSender" json:"sSender,omitempty"`
	SRecver          []byte `protobuf:"bytes,3,opt,name=sRecver" json:"sRecver,omitempty"`
	SzChat           []byte `protobuf:"bytes,4,opt,name=szChat" json:"szChat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqPrivateChatMsg) Reset()                    { *m = OGReqPrivateChatMsg{} }
func (m *OGReqPrivateChatMsg) String() string            { return proto.CompactTextString(m) }
func (*OGReqPrivateChatMsg) ProtoMessage()               {}
func (*OGReqPrivateChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{65} }

func (m *OGReqPrivateChatMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGReqPrivateChatMsg) GetSSender() []byte {
	if m != nil {
		return m.SSender
	}
	return nil
}

func (m *OGReqPrivateChatMsg) GetSRecver() []byte {
	if m != nil {
		return m.SRecver
	}
	return nil
}

func (m *OGReqPrivateChatMsg) GetSzChat() []byte {
	if m != nil {
		return m.SzChat
	}
	return nil
}

type OGAckPrivateChatMsg struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SSender          []byte `protobuf:"bytes,2,opt,name=sSender" json:"sSender,omitempty"`
	SRecver          []byte `protobuf:"bytes,3,opt,name=sRecver" json:"sRecver,omitempty"`
	SzChat           []byte `protobuf:"bytes,4,opt,name=szChat" json:"szChat,omitempty"`
	Result           *int32 `protobuf:"varint,5,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGAckPrivateChatMsg) Reset()                    { *m = OGAckPrivateChatMsg{} }
func (m *OGAckPrivateChatMsg) String() string            { return proto.CompactTextString(m) }
func (*OGAckPrivateChatMsg) ProtoMessage()               {}
func (*OGAckPrivateChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{66} }

func (m *OGAckPrivateChatMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAckPrivateChatMsg) GetSSender() []byte {
	if m != nil {
		return m.SSender
	}
	return nil
}

func (m *OGAckPrivateChatMsg) GetSRecver() []byte {
	if m != nil {
		return m.SRecver
	}
	return nil
}

func (m *OGAckPrivateChatMsg) GetSzChat() []byte {
	if m != nil {
		return m.SzChat
	}
	return nil
}

func (m *OGAckPrivateChatMsg) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 禁言和解除禁言
// #define OGID_TEXASPOKER_ABLEORUNABLECHAT (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000077)
type OGReqAbleOrUnableChat struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SCreater         []byte `protobuf:"bytes,2,opt,name=sCreater" json:"sCreater,omitempty"`
	SChatUser        []byte `protobuf:"bytes,3,opt,name=sChatUser" json:"sChatUser,omitempty"`
	NAbleFlag        *int32 `protobuf:"varint,4,opt,name=nAbleFlag" json:"nAbleFlag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqAbleOrUnableChat) Reset()                    { *m = OGReqAbleOrUnableChat{} }
func (m *OGReqAbleOrUnableChat) String() string            { return proto.CompactTextString(m) }
func (*OGReqAbleOrUnableChat) ProtoMessage()               {}
func (*OGReqAbleOrUnableChat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{67} }

func (m *OGReqAbleOrUnableChat) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGReqAbleOrUnableChat) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

func (m *OGReqAbleOrUnableChat) GetSChatUser() []byte {
	if m != nil {
		return m.SChatUser
	}
	return nil
}

func (m *OGReqAbleOrUnableChat) GetNAbleFlag() int32 {
	if m != nil && m.NAbleFlag != nil {
		return *m.NAbleFlag
	}
	return 0
}

type OGAckAbleOrUnableChat struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SCreater         []byte `protobuf:"bytes,2,opt,name=sCreater" json:"sCreater,omitempty"`
	SChatUser        []byte `protobuf:"bytes,3,opt,name=sChatUser" json:"sChatUser,omitempty"`
	NAbleFlag        *int32 `protobuf:"varint,4,opt,name=nAbleFlag" json:"nAbleFlag,omitempty"`
	NResult          *int32 `protobuf:"varint,5,opt,name=nResult" json:"nResult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGAckAbleOrUnableChat) Reset()                    { *m = OGAckAbleOrUnableChat{} }
func (m *OGAckAbleOrUnableChat) String() string            { return proto.CompactTextString(m) }
func (*OGAckAbleOrUnableChat) ProtoMessage()               {}
func (*OGAckAbleOrUnableChat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{68} }

func (m *OGAckAbleOrUnableChat) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAckAbleOrUnableChat) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

func (m *OGAckAbleOrUnableChat) GetSChatUser() []byte {
	if m != nil {
		return m.SChatUser
	}
	return nil
}

func (m *OGAckAbleOrUnableChat) GetNAbleFlag() int32 {
	if m != nil && m.NAbleFlag != nil {
		return *m.NAbleFlag
	}
	return 0
}

func (m *OGAckAbleOrUnableChat) GetNResult() int32 {
	if m != nil && m.NResult != nil {
		return *m.NResult
	}
	return 0
}

// 踢人
// #define OGID_TEXASPOKER_KICK            (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000078)
type OGReqKick struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SCreater         []byte `protobuf:"bytes,2,opt,name=sCreater" json:"sCreater,omitempty"`
	SKickered        []byte `protobuf:"bytes,3,opt,name=sKickered" json:"sKickered,omitempty"`
	NClinetId        *int64 `protobuf:"varint,4,opt,name=nClinetId" json:"nClinetId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqKick) Reset()                    { *m = OGReqKick{} }
func (m *OGReqKick) String() string            { return proto.CompactTextString(m) }
func (*OGReqKick) ProtoMessage()               {}
func (*OGReqKick) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{69} }

func (m *OGReqKick) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGReqKick) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

func (m *OGReqKick) GetSKickered() []byte {
	if m != nil {
		return m.SKickered
	}
	return nil
}

func (m *OGReqKick) GetNClinetId() int64 {
	if m != nil && m.NClinetId != nil {
		return *m.NClinetId
	}
	return 0
}

type OGAckKick struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SCreater         []byte `protobuf:"bytes,2,opt,name=sCreater" json:"sCreater,omitempty"`
	SKickered        []byte `protobuf:"bytes,3,opt,name=sKickered" json:"sKickered,omitempty"`
	NResult          *int32 `protobuf:"varint,4,opt,name=nResult" json:"nResult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGAckKick) Reset()                    { *m = OGAckKick{} }
func (m *OGAckKick) String() string            { return proto.CompactTextString(m) }
func (*OGAckKick) ProtoMessage()               {}
func (*OGAckKick) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{70} }

func (m *OGAckKick) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAckKick) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

func (m *OGAckKick) GetSKickered() []byte {
	if m != nil {
		return m.SKickered
	}
	return nil
}

func (m *OGAckKick) GetNResult() int32 {
	if m != nil && m.NResult != nil {
		return *m.NResult
	}
	return 0
}

// 玩家列表,包含旁观者和游戏者 ,为了以后踢人用
// #define OGID_TEXASPOKER_USERLIST         (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000079)
type OGUserInfos struct {
	SUserName        []byte `protobuf:"bytes,1,opt,name=sUserName" json:"sUserName,omitempty"`
	NClinetId        *int64 `protobuf:"varint,2,opt,name=nClinetId" json:"nClinetId,omitempty"`
	NIp              *int32 `protobuf:"varint,3,opt,name=nIp" json:"nIp,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,4,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGUserInfos) Reset()                    { *m = OGUserInfos{} }
func (m *OGUserInfos) String() string            { return proto.CompactTextString(m) }
func (*OGUserInfos) ProtoMessage()               {}
func (*OGUserInfos) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{71} }

func (m *OGUserInfos) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGUserInfos) GetNClinetId() int64 {
	if m != nil && m.NClinetId != nil {
		return *m.NClinetId
	}
	return 0
}

func (m *OGUserInfos) GetNIp() int32 {
	if m != nil && m.NIp != nil {
		return *m.NIp
	}
	return 0
}

func (m *OGUserInfos) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

type OGUserList struct {
	MatchID          []byte         `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	Userlist         []*OGUserInfos `protobuf:"bytes,2,rep,name=userlist" json:"userlist,omitempty"`
	SCreater         []byte         `protobuf:"bytes,3,opt,name=sCreater" json:"sCreater,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *OGUserList) Reset()                    { *m = OGUserList{} }
func (m *OGUserList) String() string            { return proto.CompactTextString(m) }
func (*OGUserList) ProtoMessage()               {}
func (*OGUserList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{72} }

func (m *OGUserList) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGUserList) GetUserlist() []*OGUserInfos {
	if m != nil {
		return m.Userlist
	}
	return nil
}

func (m *OGUserList) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

// 修改配置
// #define OGID_TEXASPOKER_MODIFYCONFIG      (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000080)
type OGModifyConfig struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	STableName       []byte `protobuf:"bytes,2,opt,name=sTableName" json:"sTableName,omitempty"`
	NCGZ_MaxChip     *int64 `protobuf:"varint,3,opt,name=nCGZ_MaxChip" json:"nCGZ_MaxChip,omitempty"`
	NCGZ_MinChip     *int64 `protobuf:"varint,4,opt,name=nCGZ_MinChip" json:"nCGZ_MinChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGModifyConfig) Reset()                    { *m = OGModifyConfig{} }
func (m *OGModifyConfig) String() string            { return proto.CompactTextString(m) }
func (*OGModifyConfig) ProtoMessage()               {}
func (*OGModifyConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{73} }

func (m *OGModifyConfig) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGModifyConfig) GetSTableName() []byte {
	if m != nil {
		return m.STableName
	}
	return nil
}

func (m *OGModifyConfig) GetNCGZ_MaxChip() int64 {
	if m != nil && m.NCGZ_MaxChip != nil {
		return *m.NCGZ_MaxChip
	}
	return 0
}

func (m *OGModifyConfig) GetNCGZ_MinChip() int64 {
	if m != nil && m.NCGZ_MinChip != nil {
		return *m.NCGZ_MinChip
	}
	return 0
}

// 向玩家发送禁言者的列表
// #define OGID_TEXASPOKER_UNABLECHATLIST    (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000081)
type OGUnAbleChatList struct {
	MatchID          []byte   `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SzUserName       [][]byte `protobuf:"bytes,2,rep,name=szUserName" json:"szUserName,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *OGUnAbleChatList) Reset()                    { *m = OGUnAbleChatList{} }
func (m *OGUnAbleChatList) String() string            { return proto.CompactTextString(m) }
func (*OGUnAbleChatList) ProtoMessage()               {}
func (*OGUnAbleChatList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{74} }

func (m *OGUnAbleChatList) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGUnAbleChatList) GetSzUserName() [][]byte {
	if m != nil {
		return m.SzUserName
	}
	return nil
}

// 随机显示图片
// #define OGID_TEXASPOKER_SHOWPICTRUE       (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000082)
type OGShowPictrue struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	NTableId         *int32 `protobuf:"varint,2,opt,name=nTableId" json:"nTableId,omitempty"`
	SzUserName       []byte `protobuf:"bytes,3,opt,name=szUserName" json:"szUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGShowPictrue) Reset()                    { *m = OGShowPictrue{} }
func (m *OGShowPictrue) String() string            { return proto.CompactTextString(m) }
func (*OGShowPictrue) ProtoMessage()               {}
func (*OGShowPictrue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{75} }

func (m *OGShowPictrue) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGShowPictrue) GetNTableId() int32 {
	if m != nil && m.NTableId != nil {
		return *m.NTableId
	}
	return 0
}

func (m *OGShowPictrue) GetSzUserName() []byte {
	if m != nil {
		return m.SzUserName
	}
	return nil
}

// 新玩家加入玩家列表
// #define OGID_TEXASPOKER_ADDUSER           (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000083)
type OGAddUserToList struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NClinetId        *int64 `protobuf:"varint,3,opt,name=nClinetId" json:"nClinetId,omitempty"`
	NIp              *int32 `protobuf:"varint,4,opt,name=nIp" json:"nIp,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,5,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGAddUserToList) Reset()                    { *m = OGAddUserToList{} }
func (m *OGAddUserToList) String() string            { return proto.CompactTextString(m) }
func (*OGAddUserToList) ProtoMessage()               {}
func (*OGAddUserToList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{76} }

func (m *OGAddUserToList) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGAddUserToList) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *OGAddUserToList) GetNClinetId() int64 {
	if m != nil && m.NClinetId != nil {
		return *m.NClinetId
	}
	return 0
}

func (m *OGAddUserToList) GetNIp() int32 {
	if m != nil && m.NIp != nil {
		return *m.NIp
	}
	return 0
}

func (m *OGAddUserToList) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

// 玩家从列表中删除
// #define OGID_TEXASPOKER_DELETEUSER        (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000084)
type OGDeleteUserFromList struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGDeleteUserFromList) Reset()                    { *m = OGDeleteUserFromList{} }
func (m *OGDeleteUserFromList) String() string            { return proto.CompactTextString(m) }
func (*OGDeleteUserFromList) ProtoMessage()               {}
func (*OGDeleteUserFromList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{77} }

func (m *OGDeleteUserFromList) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGDeleteUserFromList) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

// 当否玩家进入牌桌坐下后，向本桌内的其他玩家广播此玩家的礼品状态 和 标志
// #define OGID_BROADCAST_PLAYER_GIFT_STATUS       (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000085)
type OGBroadCastPlayerGiftStatus struct {
	RoleName         []byte `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	Gift             []byte `protobuf:"bytes,2,opt,name=gift" json:"gift,omitempty"`
	Nbcard           []byte `protobuf:"bytes,3,opt,name=nbcard" json:"nbcard,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGBroadCastPlayerGiftStatus) Reset()                    { *m = OGBroadCastPlayerGiftStatus{} }
func (m *OGBroadCastPlayerGiftStatus) String() string            { return proto.CompactTextString(m) }
func (*OGBroadCastPlayerGiftStatus) ProtoMessage()               {}
func (*OGBroadCastPlayerGiftStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{78} }

func (m *OGBroadCastPlayerGiftStatus) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *OGBroadCastPlayerGiftStatus) GetGift() []byte {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *OGBroadCastPlayerGiftStatus) GetNbcard() []byte {
	if m != nil {
		return m.Nbcard
	}
	return nil
}

// 赠送礼品(客户端接到此消息后应仅作播放动画操作)
// #define OGID_GIVEGIFT       (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000086)
type OGGiveGift struct {
	CustomerName     []byte   `protobuf:"bytes,1,opt,name=customerName" json:"customerName,omitempty"`
	GiftId           []byte   `protobuf:"bytes,2,opt,name=giftId" json:"giftId,omitempty"`
	Receivers        [][]byte `protobuf:"bytes,3,rep,name=receivers" json:"receivers,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *OGGiveGift) Reset()                    { *m = OGGiveGift{} }
func (m *OGGiveGift) String() string            { return proto.CompactTextString(m) }
func (*OGGiveGift) ProtoMessage()               {}
func (*OGGiveGift) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{79} }

func (m *OGGiveGift) GetCustomerName() []byte {
	if m != nil {
		return m.CustomerName
	}
	return nil
}

func (m *OGGiveGift) GetGiftId() []byte {
	if m != nil {
		return m.GiftId
	}
	return nil
}

func (m *OGGiveGift) GetReceivers() [][]byte {
	if m != nil {
		return m.Receivers
	}
	return nil
}

// 赠送道具(客户端接收到此消息后重新发送查询玩家礼品状态消息,这样贵族卡才能及时更新)
// #define OGID_GIVEITEM       (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000089)
type OGGiveItem struct {
	CustomerName     []byte `protobuf:"bytes,1,opt,name=customerName" json:"customerName,omitempty"`
	Item             []byte `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
	Receivers        []byte `protobuf:"bytes,3,opt,name=receivers" json:"receivers,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGGiveItem) Reset()                    { *m = OGGiveItem{} }
func (m *OGGiveItem) String() string            { return proto.CompactTextString(m) }
func (*OGGiveItem) ProtoMessage()               {}
func (*OGGiveItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{80} }

func (m *OGGiveItem) GetCustomerName() []byte {
	if m != nil {
		return m.CustomerName
	}
	return nil
}

func (m *OGGiveItem) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *OGGiveItem) GetReceivers() []byte {
	if m != nil {
		return m.Receivers
	}
	return nil
}

// 广播表情
// #define OGID_BROADCAST_FACE (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000087)
type OGBroadCastFace struct {
	RoleName         []byte  `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	FaceType         *uint32 `protobuf:"varint,2,opt,name=faceType" json:"faceType,omitempty"`
	FaceContent      []byte  `protobuf:"bytes,3,opt,name=faceContent" json:"faceContent,omitempty"`
	Seat             *uint32 `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OGBroadCastFace) Reset()                    { *m = OGBroadCastFace{} }
func (m *OGBroadCastFace) String() string            { return proto.CompactTextString(m) }
func (*OGBroadCastFace) ProtoMessage()               {}
func (*OGBroadCastFace) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{81} }

func (m *OGBroadCastFace) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *OGBroadCastFace) GetFaceType() uint32 {
	if m != nil && m.FaceType != nil {
		return *m.FaceType
	}
	return 0
}

func (m *OGBroadCastFace) GetFaceContent() []byte {
	if m != nil {
		return m.FaceContent
	}
	return nil
}

func (m *OGBroadCastFace) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type OGReqRebuy struct {
	RoleName         []byte `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	Matchid          []byte `protobuf:"bytes,2,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,3,opt,name=tableid" json:"tableid,omitempty"`
	Type             *int32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	MoneyType        *int32 `protobuf:"varint,5,opt,name=moneyType" json:"moneyType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqRebuy) Reset()                    { *m = OGReqRebuy{} }
func (m *OGReqRebuy) String() string            { return proto.CompactTextString(m) }
func (*OGReqRebuy) ProtoMessage()               {}
func (*OGReqRebuy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{82} }

func (m *OGReqRebuy) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *OGReqRebuy) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *OGReqRebuy) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *OGReqRebuy) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *OGReqRebuy) GetMoneyType() int32 {
	if m != nil && m.MoneyType != nil {
		return *m.MoneyType
	}
	return 0
}

type OGAckRebuy struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Reson            *int32 `protobuf:"varint,2,opt,name=reson" json:"reson,omitempty"`
	RoleName         []byte `protobuf:"bytes,3,opt,name=roleName" json:"roleName,omitempty"`
	Matchid          []byte `protobuf:"bytes,4,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,5,opt,name=tableid" json:"tableid,omitempty"`
	NTicketCount     *int32 `protobuf:"varint,6,opt,name=nTicketCount" json:"nTicketCount,omitempty"`
	Type             *int32 `protobuf:"varint,7,opt,name=type" json:"type,omitempty"`
	NCount           *int32 `protobuf:"varint,8,opt,name=nCount" json:"nCount,omitempty"`
	NResultChip      *int64 `protobuf:"varint,9,opt,name=nResultChip" json:"nResultChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGAckRebuy) Reset()                    { *m = OGAckRebuy{} }
func (m *OGAckRebuy) String() string            { return proto.CompactTextString(m) }
func (*OGAckRebuy) ProtoMessage()               {}
func (*OGAckRebuy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{83} }

func (m *OGAckRebuy) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *OGAckRebuy) GetReson() int32 {
	if m != nil && m.Reson != nil {
		return *m.Reson
	}
	return 0
}

func (m *OGAckRebuy) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *OGAckRebuy) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *OGAckRebuy) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *OGAckRebuy) GetNTicketCount() int32 {
	if m != nil && m.NTicketCount != nil {
		return *m.NTicketCount
	}
	return 0
}

func (m *OGAckRebuy) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *OGAckRebuy) GetNCount() int32 {
	if m != nil && m.NCount != nil {
		return *m.NCount
	}
	return 0
}

func (m *OGAckRebuy) GetNResultChip() int64 {
	if m != nil && m.NResultChip != nil {
		return *m.NResultChip
	}
	return 0
}

// 广播比赛名次，奖励
// #define OGID_BROADCAST_MATCHRANK        (OGID_MSGBASE_TEXASPOKER_GAMEBASE + 0x0000008A)
type OGBroadCastMatchRank struct {
	RoleName         []byte `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	MatchName        []byte `protobuf:"bytes,2,opt,name=matchName" json:"matchName,omitempty"`
	NRank            *int32 `protobuf:"varint,3,opt,name=nRank" json:"nRank,omitempty"`
	NRewardType      *int32 `protobuf:"varint,4,opt,name=nRewardType" json:"nRewardType,omitempty"`
	NRewardCount     *int64 `protobuf:"varint,5,opt,name=nRewardCount" json:"nRewardCount,omitempty"`
	RewardName       []byte `protobuf:"bytes,6,opt,name=RewardName" json:"RewardName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGBroadCastMatchRank) Reset()                    { *m = OGBroadCastMatchRank{} }
func (m *OGBroadCastMatchRank) String() string            { return proto.CompactTextString(m) }
func (*OGBroadCastMatchRank) ProtoMessage()               {}
func (*OGBroadCastMatchRank) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{84} }

func (m *OGBroadCastMatchRank) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *OGBroadCastMatchRank) GetMatchName() []byte {
	if m != nil {
		return m.MatchName
	}
	return nil
}

func (m *OGBroadCastMatchRank) GetNRank() int32 {
	if m != nil && m.NRank != nil {
		return *m.NRank
	}
	return 0
}

func (m *OGBroadCastMatchRank) GetNRewardType() int32 {
	if m != nil && m.NRewardType != nil {
		return *m.NRewardType
	}
	return 0
}

func (m *OGBroadCastMatchRank) GetNRewardCount() int64 {
	if m != nil && m.NRewardCount != nil {
		return *m.NRewardCount
	}
	return 0
}

func (m *OGBroadCastMatchRank) GetRewardName() []byte {
	if m != nil {
		return m.RewardName
	}
	return nil
}

func init() {
	proto.RegisterType((*Game_ACKConfirmConnect)(nil), "bbproto.game_ACKConfirmConnect")
	proto.RegisterType((*Game_LoginGame)(nil), "bbproto.game_LoginGame")
	proto.RegisterType((*Game_EnterMatch)(nil), "bbproto.game_EnterMatch")
	proto.RegisterType((*Game_AckEnterMatch)(nil), "bbproto.game_AckEnterMatch")
	proto.RegisterType((*Game_AddHandCoin)(nil), "bbproto.game_AddHandCoin")
	proto.RegisterType((*Game_CardInfo)(nil), "bbproto.game_CardInfo")
	proto.RegisterType((*Game_InitCard)(nil), "bbproto.game_InitCard")
	proto.RegisterType((*Game_RaiseBet)(nil), "bbproto.game_RaiseBet")
	proto.RegisterType((*Game_AckRaiseBet)(nil), "bbproto.game_AckRaiseBet")
	proto.RegisterType((*Game_FollowBet)(nil), "bbproto.game_FollowBet")
	proto.RegisterType((*Game_AckFollowBet)(nil), "bbproto.game_AckFollowBet")
	proto.RegisterType((*Game_FoldBet)(nil), "bbproto.game_FoldBet")
	proto.RegisterType((*Game_AckFoldBet)(nil), "bbproto.game_AckFoldBet")
	proto.RegisterType((*Game_CheckBet)(nil), "bbproto.game_CheckBet")
	proto.RegisterType((*Game_AckCheckBet)(nil), "bbproto.game_AckCheckBet")
	proto.RegisterType((*Game_SendFlopCard)(nil), "bbproto.game_SendFlopCard")
	proto.RegisterType((*Game_SendTurnCard)(nil), "bbproto.game_SendTurnCard")
	proto.RegisterType((*Game_SendRiverCard)(nil), "bbproto.game_SendRiverCard")
	proto.RegisterType((*Game_SendOverTurn)(nil), "bbproto.game_SendOverTurn")
	proto.RegisterType((*Game_CardType)(nil), "bbproto.game_CardType")
	proto.RegisterType((*Game_WinCoin)(nil), "bbproto.game_WinCoin")
	proto.RegisterType((*Game_TestResult)(nil), "bbproto.game_TestResult")
	proto.RegisterType((*Game_LeaveMatch)(nil), "bbproto.game_LeaveMatch")
	proto.RegisterType((*Game_UserInfo)(nil), "bbproto.game_UserInfo")
	proto.RegisterType((*Game_SendUserInfo)(nil), "bbproto.game_SendUserInfo")
	proto.RegisterType((*Game_SendRank)(nil), "bbproto.game_SendRank")
	proto.RegisterType((*Game_RestMatch)(nil), "bbproto.game_RestMatch")
	proto.RegisterType((*Game_ChangeTable)(nil), "bbproto.game_ChangeTable")
	proto.RegisterType((*Game_SendGameInfo)(nil), "bbproto.game_SendGameInfo")
	proto.RegisterType((*Game_ShowCard)(nil), "bbproto.game_ShowCard")
	proto.RegisterType((*Game_AckShowCard)(nil), "bbproto.game_AckShowCard")
	proto.RegisterType((*Game_TestLogin)(nil), "bbproto.game_TestLogin")
	proto.RegisterType((*Game_AckTestLogin)(nil), "bbproto.game_AckTestLogin")
	proto.RegisterType((*Game_TestStartMatch)(nil), "bbproto.game_TestStartMatch")
	proto.RegisterType((*Game_ReportPlayer)(nil), "bbproto.game_ReportPlayer")
	proto.RegisterType((*Game_UseDelayTime)(nil), "bbproto.game_UseDelayTime")
	proto.RegisterType((*Game_LeaveSeat)(nil), "bbproto.game_LeaveSeat")
	proto.RegisterType((*Game_MatchChip)(nil), "bbproto.game_MatchChip")
	proto.RegisterType((*Game_SendUserRank)(nil), "bbproto.game_SendUserRank")
	proto.RegisterType((*Game_BlindChange)(nil), "bbproto.game_BlindChange")
	proto.RegisterType((*Game_NextBlindInfo)(nil), "bbproto.game_NextBlindInfo")
	proto.RegisterType((*Game_SendRestTime)(nil), "bbproto.game_SendRestTime")
	proto.RegisterType((*Game_LeaveTable)(nil), "bbproto.game_LeaveTable")
	proto.RegisterType((*Game_PreCoin)(nil), "bbproto.game_PreCoin")
	proto.RegisterType((*Game_BlindCoin)(nil), "bbproto.game_BlindCoin")
	proto.RegisterType((*Game_NowelterInfo)(nil), "bbproto.game_NowelterInfo")
	proto.RegisterType((*OGReqSitdownSeat)(nil), "bbproto.OGReqSitdownSeat")
	proto.RegisterType((*OGAckSitdownSeat)(nil), "bbproto.OGAckSitdownSeat")
	proto.RegisterType((*OGReqBuyChip)(nil), "bbproto.OGReqBuyChip")
	proto.RegisterType((*OGAckBuyChip)(nil), "bbproto.OGAckBuyChip")
	proto.RegisterType((*OGNeetBugChip)(nil), "bbproto.OGNeetBugChip")
	proto.RegisterType((*OGReqLeave)(nil), "bbproto.OGReqLeave")
	proto.RegisterType((*OGAckLeave)(nil), "bbproto.OGAckLeave")
	proto.RegisterType((*OGGameRule)(nil), "bbproto.OGGameRule")
	proto.RegisterType((*OGWaitBigBling)(nil), "bbproto.OGWaitBigBling")
	proto.RegisterType((*OGNextBiglingWatch)(nil), "bbproto.OGNextBiglingWatch")
	proto.RegisterType((*OGChatMsg)(nil), "bbproto.OGChatMsg")
	proto.RegisterType((*OGProposalMsg)(nil), "bbproto.OGProposalMsg")
	proto.RegisterType((*OGReqPayMsg)(nil), "bbproto.OGReqPayMsg")
	proto.RegisterType((*OGAckPayMsg)(nil), "bbproto.OGAckPayMsg")
	proto.RegisterType((*OGReqExChangeHYD)(nil), "bbproto.OGReqExChangeHYD")
	proto.RegisterType((*OGAckExChangeHYD)(nil), "bbproto.OGAckExChangeHYD")
	proto.RegisterType((*OGNtfChangeHYD)(nil), "bbproto.OGNtfChangeHYD")
	proto.RegisterType((*OGReqPresentCoins)(nil), "bbproto.OGReqPresentCoins")
	proto.RegisterType((*OGAckPresentCoins)(nil), "bbproto.OGAckPresentCoins")
	proto.RegisterType((*OGReqPrivateChatMsg)(nil), "bbproto.OGReqPrivateChatMsg")
	proto.RegisterType((*OGAckPrivateChatMsg)(nil), "bbproto.OGAckPrivateChatMsg")
	proto.RegisterType((*OGReqAbleOrUnableChat)(nil), "bbproto.OGReqAbleOrUnableChat")
	proto.RegisterType((*OGAckAbleOrUnableChat)(nil), "bbproto.OGAckAbleOrUnableChat")
	proto.RegisterType((*OGReqKick)(nil), "bbproto.OGReqKick")
	proto.RegisterType((*OGAckKick)(nil), "bbproto.OGAckKick")
	proto.RegisterType((*OGUserInfos)(nil), "bbproto.OGUserInfos")
	proto.RegisterType((*OGUserList)(nil), "bbproto.OGUserList")
	proto.RegisterType((*OGModifyConfig)(nil), "bbproto.OGModifyConfig")
	proto.RegisterType((*OGUnAbleChatList)(nil), "bbproto.OGUnAbleChatList")
	proto.RegisterType((*OGShowPictrue)(nil), "bbproto.OGShowPictrue")
	proto.RegisterType((*OGAddUserToList)(nil), "bbproto.OGAddUserToList")
	proto.RegisterType((*OGDeleteUserFromList)(nil), "bbproto.OGDeleteUserFromList")
	proto.RegisterType((*OGBroadCastPlayerGiftStatus)(nil), "bbproto.OGBroadCastPlayerGiftStatus")
	proto.RegisterType((*OGGiveGift)(nil), "bbproto.OGGiveGift")
	proto.RegisterType((*OGGiveItem)(nil), "bbproto.OGGiveItem")
	proto.RegisterType((*OGBroadCastFace)(nil), "bbproto.OGBroadCastFace")
	proto.RegisterType((*OGReqRebuy)(nil), "bbproto.OGReqRebuy")
	proto.RegisterType((*OGAckRebuy)(nil), "bbproto.OGAckRebuy")
	proto.RegisterType((*OGBroadCastMatchRank)(nil), "bbproto.OGBroadCastMatchRank")
	proto.RegisterEnum("bbproto.Game_LeaveTable_Reason", Game_LeaveTable_Reason_name, Game_LeaveTable_Reason_value)
	proto.RegisterEnum("bbproto.OGAckPayMsg_Reason", OGAckPayMsg_Reason_name, OGAckPayMsg_Reason_value)
	proto.RegisterEnum("bbproto.OGAckPresentCoins_Reason", OGAckPresentCoins_Reason_name, OGAckPresentCoins_Reason_value)
}

var fileDescriptor1 = []byte{
	// 3015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x4b, 0x6f, 0x23, 0x59,
	0x15, 0xc6, 0xcf, 0x38, 0x37, 0x2f, 0xb7, 0xfb, 0x31, 0x66, 0x06, 0x04, 0x94, 0x60, 0x14, 0x8d,
	0xa0, 0x19, 0x7a, 0x40, 0x48, 0x2c, 0x80, 0xc4, 0x71, 0xdc, 0x56, 0x27, 0xb6, 0x65, 0x57, 0xc8,
	0xcc, 0x00, 0xea, 0x29, 0xbb, 0x6e, 0x92, 0xea, 0x54, 0xaa, 0xdc, 0x55, 0xe5, 0x3c, 0x1a, 0xf1,
	0x03, 0x90, 0xd8, 0xb3, 0x60, 0xc5, 0x82, 0x87, 0x10, 0x3f, 0x03, 0x7e, 0x03, 0x2c, 0x59, 0xb1,
	0x67, 0xcd, 0x86, 0x73, 0xce, 0x7d, 0xd4, 0x2d, 0xdb, 0x49, 0x9c, 0x4c, 0x23, 0xb1, 0x8a, 0xeb,
	0xd4, 0xbd, 0xe7, 0xf9, 0x9d, 0xc7, 0xbd, 0x15, 0xf6, 0x6e, 0xb7, 0x65, 0xf3, 0x4b, 0x27, 0xee,
	0x85, 0xa7, 0x3c, 0xea, 0x45, 0x61, 0x12, 0x8e, 0x42, 0xff, 0xe9, 0x18, 0x7f, 0xd4, 0x96, 0x86,
	0x43, 0xfa, 0x61, 0x6d, 0xb2, 0x27, 0xc7, 0xce, 0x19, 0x7f, 0xb9, 0xd5, 0x78, 0xd1, 0x08, 0x83,
	0x23, 0x2f, 0x3a, 0x83, 0x3f, 0x01, 0x1f, 0x25, 0xb5, 0x75, 0x56, 0x8e, 0x78, 0x3c, 0xf1, 0x93,
	0x7a, 0xee, 0xab, 0xb9, 0xcd, 0x92, 0xf5, 0x21, 0x5b, 0xa7, 0x95, 0x7b, 0xe1, 0xb1, 0x17, 0xb4,
	0xe0, 0x17, 0xae, 0xd8, 0xe3, 0x49, 0xc2, 0x23, 0x5a, 0xb1, 0x6a, 0xec, 0xc8, 0xd3, 0x8e, 0x57,
	0x6c, 0x83, 0x76, 0x34, 0x03, 0x58, 0xb3, 0xef, 0x24, 0xa3, 0x93, 0xda, 0x06, 0x5b, 0xa2, 0x1f,
	0xed, 0x1d, 0xb9, 0x07, 0x08, 0xb6, 0x33, 0xf4, 0xb9, 0xe7, 0x8a, 0x4d, 0xb5, 0x2a, 0xab, 0xf4,
	0x9c, 0x38, 0x3e, 0x0c, 0x23, 0xb7, 0x5e, 0xa0, 0x25, 0x0f, 0xd9, 0x4a, 0xdc, 0xd8, 0x3d, 0x88,
	0x79, 0xd4, 0x01, 0x6e, 0xf5, 0xa2, 0x92, 0x35, 0x01, 0x4a, 0xdb, 0xad, 0x97, 0xe0, 0x79, 0xcd,
	0x3a, 0x64, 0x35, 0x61, 0xc7, 0xe8, 0xd4, 0x10, 0x37, 0x65, 0x83, 0x16, 0x2f, 0xa5, 0x65, 0xc4,
	0x17, 0xd4, 0x8a, 0xa0, 0xcf, 0x9d, 0x38, 0x0c, 0x48, 0x50, 0xc9, 0xea, 0xb1, 0xaa, 0x60, 0xec,
	0xba, 0xcf, 0x9d, 0xc0, 0x6d, 0x84, 0x5e, 0x60, 0xb2, 0xb9, 0xc6, 0x8a, 0x55, 0x56, 0x8c, 0xb9,
	0x93, 0x48, 0xa6, 0xf0, 0x84, 0xfb, 0x88, 0x63, 0xc1, 0xfa, 0x16, 0x5b, 0x23, 0x8e, 0x0d, 0x27,
	0x72, 0xdb, 0xc1, 0x51, 0x58, 0x5b, 0x63, 0x25, 0x88, 0x4c, 0x18, 0x49, 0x25, 0xe1, 0xf1, 0xdc,
	0xf1, 0x27, 0x5c, 0x7a, 0xf1, 0x9f, 0x39, 0xb9, 0xbe, 0x1d, 0x78, 0x09, 0xee, 0xb9, 0xb3, 0x78,
	0x70, 0x69, 0x87, 0x5f, 0x26, 0xe8, 0x41, 0x61, 0x54, 0x6d, 0x93, 0x55, 0xc8, 0x18, 0xe0, 0x06,
	0xfe, 0x2b, 0x6c, 0xae, 0x3c, 0x7b, 0xf2, 0x54, 0x22, 0xe2, 0x69, 0x56, 0xb7, 0x0f, 0x18, 0xeb,
	0x4d, 0x86, 0xbe, 0x37, 0xa2, 0xb5, 0xe5, 0x1b, 0xd7, 0x82, 0x9c, 0x7d, 0x2f, 0xe8, 0x3b, 0x5e,
	0xcc, 0xeb, 0x4b, 0x68, 0x6a, 0xad, 0xc6, 0xd8, 0xd6, 0x28, 0xf1, 0xc2, 0xc0, 0xf6, 0x20, 0x72,
	0x15, 0x92, 0xfd, 0x80, 0x2d, 0xef, 0x70, 0xdf, 0xb9, 0x22, 0xd2, 0x32, 0x99, 0xb8, 0x2f, 0x2d,
	0xa4, 0xad, 0xdb, 0x3c, 0x59, 0xcc, 0xc2, 0xc1, 0x75, 0x0e, 0xfe, 0x43, 0x4e, 0xc5, 0x6c, 0x74,
	0xfa, 0x76, 0x58, 0xa2, 0x69, 0x2a, 0xfa, 0x04, 0xb8, 0x82, 0x72, 0x2a, 0xed, 0x28, 0xab, 0x1d,
	0xe3, 0x30, 0xf4, 0xa5, 0xe9, 0xa6, 0x33, 0x2a, 0x8a, 0xd2, 0x70, 0x24, 0x45, 0xd8, 0xfd, 0x63,
	0x99, 0x52, 0xbb, 0xa1, 0xef, 0x87, 0x17, 0xf7, 0xd0, 0xd2, 0xfa, 0x63, 0x8e, 0x3d, 0x50, 0xa6,
	0xde, 0x9b, 0x4b, 0xc6, 0x96, 0x62, 0xc6, 0xfa, 0xd2, 0x8c, 0xf5, 0x65, 0xa2, 0xdc, 0xdd, 0xd6,
	0x1f, 0xb2, 0x55, 0x65, 0xab, 0x7b, 0x1f, 0x4b, 0x7f, 0x9f, 0x93, 0xd5, 0x44, 0x58, 0xea, 0xfe,
	0xbf, 0xda, 0xf9, 0x23, 0x95, 0xdd, 0x27, 0x7c, 0x74, 0x7a, 0x1f, 0x43, 0x4d, 0xf4, 0xde, 0x97,
	0xc9, 0xe7, 0xb0, 0xb4, 0x32, 0x63, 0xe9, 0xf2, 0x8c, 0xa5, 0x8c, 0x14, 0xfd, 0xb3, 0xc2, 0xde,
	0x80, 0x07, 0xee, 0xae, 0x1f, 0x8e, 0x17, 0x2c, 0x4e, 0xdf, 0x80, 0x72, 0x07, 0x2b, 0x3f, 0x24,
	0x55, 0xaf, 0xaf, 0x26, 0x72, 0xd9, 0x77, 0x48, 0xff, 0x5b, 0x97, 0x3d, 0x23, 0xc3, 0xae, 0x5d,
	0x66, 0xfd, 0xd4, 0xd0, 0xd5, 0x9e, 0x44, 0xc1, 0x82, 0xba, 0x7e, 0x9d, 0x15, 0x91, 0xfb, 0xcd,
	0xaa, 0x5a, 0x3f, 0x93, 0xcd, 0x07, 0x99, 0xf7, 0xbd, 0x73, 0x1e, 0xbd, 0x55, 0xee, 0xbf, 0x35,
	0xfd, 0xdc, 0x05, 0xee, 0xa8, 0xff, 0x62, 0x88, 0xe8, 0x61, 0x44, 0x0b, 0xaa, 0x14, 0x0f, 0xf8,
	0x28, 0x0c, 0x5c, 0xa2, 0x15, 0xa1, 0x90, 0x67, 0x6b, 0x58, 0x49, 0xe1, 0xe6, 0x04, 0x70, 0x31,
	0x12, 0xb8, 0x28, 0x08, 0x5c, 0xd0, 0xd3, 0x92, 0xda, 0x91, 0xcd, 0x00, 0xcb, 0x37, 0xba, 0x99,
	0x7d, 0x35, 0xe6, 0xd4, 0xcd, 0x28, 0x6e, 0xba, 0x9b, 0x89, 0xf8, 0xe4, 0xcd, 0xc7, 0x8f, 0x24,
	0x4e, 0xe5, 0xe3, 0x77, 0x25, 0x48, 0xe5, 0xe3, 0xf7, 0x52, 0x6d, 0xf0, 0x31, 0x01, 0xb6, 0xa2,
	0xc6, 0x5a, 0x7f, 0xc9, 0xc9, 0x32, 0x72, 0xe8, 0x05, 0xd4, 0x8a, 0x15, 0xec, 0x73, 0xaa, 0xb7,
	0x20, 0x88, 0xdb, 0x81, 0xcb, 0x2f, 0x53, 0x2f, 0x90, 0xfe, 0xc2, 0x0b, 0x6b, 0x26, 0xa8, 0x0c,
	0xe5, 0x4a, 0x59, 0xe5, 0xca, 0x59, 0xe5, 0x96, 0xb2, 0xca, 0x55, 0x66, 0x94, 0x5b, 0x56, 0x94,
	0x28, 0xf4, 0x79, 0x80, 0x53, 0x0a, 0xa6, 0xc8, 0xaa, 0xf5, 0x57, 0x55, 0xb4, 0x6c, 0x1e, 0x27,
	0x7d, 0x9a, 0x44, 0x16, 0x08, 0xdc, 0xa6, 0x0c, 0x82, 0x80, 0xc6, 0x4d, 0x1d, 0x17, 0xec, 0x1d,
	0x0e, 0x4e, 0xc2, 0x0b, 0x6a, 0xce, 0x18, 0xd3, 0x52, 0xed, 0x11, 0x5b, 0x1d, 0x42, 0xa2, 0x6a,
	0x6a, 0x89, 0xa8, 0x1f, 0xb0, 0x15, 0xe9, 0x31, 0xdc, 0x27, 0xfb, 0xf8, 0xe3, 0x2c, 0x57, 0xe5,
	0x52, 0xb3, 0x36, 0x50, 0xd4, 0xad, 0x2d, 0x69, 0xc5, 0x1e, 0x77, 0xce, 0x79, 0x76, 0x90, 0x5b,
	0xb4, 0xaa, 0xed, 0x48, 0x98, 0xe0, 0x10, 0xa2, 0x86, 0x05, 0x3d, 0xd2, 0x09, 0x0e, 0x6a, 0x83,
	0xd8, 0x3e, 0x35, 0xf5, 0xd1, 0x28, 0x68, 0xbd, 0x34, 0x32, 0x41, 0x73, 0xda, 0x14, 0x9c, 0xc8,
	0xb0, 0xdc, 0x3c, 0x77, 0xe9, 0x95, 0xb7, 0x8e, 0x7f, 0xd6, 0xbf, 0xd5, 0xb0, 0x45, 0xa9, 0xec,
	0x04, 0xa7, 0x0b, 0x18, 0x6a, 0x5a, 0x52, 0x50, 0x96, 0xe0, 0x5e, 0x09, 0x32, 0xb0, 0x84, 0xf7,
	0xf9, 0x85, 0xcc, 0x0f, 0x09, 0x35, 0x08, 0x53, 0x20, 0x88, 0x8d, 0x70, 0x12, 0x24, 0xb2, 0x08,
	0x43, 0x92, 0x06, 0x76, 0x98, 0x38, 0xbe, 0x74, 0x3e, 0xd2, 0x1e, 0xb3, 0xb5, 0xa0, 0x13, 0x5e,
	0x70, 0x1f, 0xa6, 0x5a, 0x22, 0x57, 0x66, 0xc8, 0x76, 0x8a, 0x41, 0x98, 0x78, 0x83, 0xc1, 0x28,
	0x8c, 0x04, 0x02, 0x89, 0xa3, 0x10, 0x43, 0xea, 0xad, 0x90, 0x7a, 0x00, 0xe4, 0x80, 0x3c, 0xbd,
	0x4a, 0x36, 0x3f, 0x93, 0x53, 0x08, 0xe0, 0x33, 0x59, 0x30, 0xb8, 0xd6, 0x2f, 0x65, 0x8f, 0x6a,
	0x00, 0x50, 0x8f, 0x39, 0xbd, 0x9b, 0xdd, 0x05, 0xb2, 0x3b, 0xfc, 0x22, 0xeb, 0xac, 0x99, 0x81,
	0xdb, 0xf4, 0x5e, 0x31, 0x83, 0x83, 0xd2, 0x3c, 0x1c, 0x94, 0x09, 0x07, 0xff, 0x28, 0x1a, 0x40,
	0xc0, 0xb3, 0xc8, 0x74, 0x78, 0xaf, 0x09, 0x15, 0x68, 0x84, 0xab, 0x07, 0x89, 0x93, 0x4c, 0xe2,
	0x54, 0x81, 0xc6, 0x89, 0x37, 0xce, 0xb6, 0x4a, 0x6a, 0x85, 0xa2, 0x55, 0x82, 0x02, 0xc4, 0xa4,
	0x07, 0x33, 0x2b, 0x0c, 0xd0, 0x65, 0xb5, 0x69, 0x1b, 0x22, 0x4c, 0x9b, 0x44, 0x75, 0x80, 0x41,
	0x79, 0x4c, 0x83, 0x32, 0xa5, 0x6d, 0xe5, 0xc6, 0xb4, 0x35, 0x13, 0x7c, 0xf9, 0xb6, 0x91, 0x5a,
	0xe7, 0x22, 0x53, 0x15, 0x98, 0xfa, 0x17, 0x52, 0x56, 0x88, 0x92, 0x1d, 0xb2, 0x57, 0x95, 0x9b,
	0x87, 0xcd, 0x00, 0xd5, 0xae, 0xaf, 0x51, 0x01, 0x30, 0x0b, 0xf7, 0xba, 0x2a, 0x85, 0x43, 0x1c,
	0xa4, 0xea, 0x1b, 0xb4, 0x00, 0x80, 0x33, 0xdc, 0xf2, 0xa1, 0x74, 0xd6, 0xab, 0xfa, 0x79, 0x3b,
	0xe2, 0xce, 0x69, 0xfd, 0x81, 0x7e, 0xa6, 0xfc, 0xaf, 0xd7, 0xe8, 0x39, 0x33, 0xc6, 0x3f, 0x54,
	0xa1, 0x02, 0x4c, 0x0f, 0x27, 0x57, 0x02, 0xd2, 0x8f, 0x34, 0x11, 0xce, 0x4e, 0x61, 0x20, 0x88,
	0x8f, 0x15, 0x71, 0xb8, 0xeb, 0x05, 0x8e, 0x4f, 0x6f, 0xea, 0x4f, 0x88, 0xf8, 0x0e, 0xdb, 0x08,
	0xf0, 0x8c, 0x63, 0x18, 0xf3, 0x0e, 0xbd, 0x78, 0xc2, 0xd6, 0xe9, 0x45, 0x2a, 0xaf, 0xae, 0x82,
	0x10, 0x78, 0xa3, 0x53, 0xc2, 0xc5, 0x17, 0x41, 0xa9, 0x65, 0x54, 0x12, 0xcf, 0x3d, 0x70, 0x2a,
	0x7c, 0x97, 0x94, 0x54, 0xe7, 0xa0, 0xf7, 0x54, 0xf4, 0xe3, 0xb4, 0x05, 0x7e, 0x89, 0x9c, 0x07,
	0x8e, 0x4a, 0xc0, 0x9d, 0xfb, 0xce, 0x65, 0xfd, 0xcb, 0xd4, 0xcf, 0xf6, 0x54, 0x01, 0x90, 0x05,
	0x14, 0x57, 0x9c, 0x65, 0x50, 0x05, 0x8e, 0x4b, 0xc8, 0xb3, 0xba, 0xa3, 0x51, 0x0d, 0x4e, 0xcf,
	0x0d, 0x29, 0x94, 0x60, 0x32, 0xd0, 0xb3, 0xdc, 0xc2, 0x0c, 0xcd, 0xc3, 0xd9, 0x8d, 0xe5, 0xdf,
	0xb2, 0x64, 0xe6, 0x62, 0x77, 0xa1, 0x63, 0xf9, 0x6c, 0x55, 0xb5, 0x9a, 0xe9, 0x01, 0x21, 0x5d,
	0x76, 0xe7, 0x73, 0xb1, 0xf5, 0x3e, 0x7b, 0xa8, 0x45, 0x41, 0xfa, 0x44, 0xd7, 0x54, 0x0a, 0xeb,
	0x85, 0x14, 0xd7, 0xe7, 0xe3, 0x30, 0x4a, 0x44, 0xce, 0x80, 0xdf, 0xf3, 0xde, 0x58, 0x8a, 0xa2,
	0xe4, 0x8a, 0x92, 0xb4, 0x49, 0x50, 0x03, 0x2d, 0xa8, 0xe2, 0x35, 0x16, 0x59, 0x26, 0xbc, 0xf7,
	0x13, 0xc9, 0x0c, 0x4c, 0xd2, 0xb1, 0x9f, 0x75, 0x1f, 0x86, 0xf0, 0x86, 0x51, 0x18, 0x80, 0xea,
	0xe2, 0xe6, 0xc4, 0x93, 0x15, 0xa6, 0x64, 0xb9, 0xea, 0x2a, 0x03, 0xf1, 0x8c, 0x4b, 0xef, 0xcc,
	0x34, 0xcd, 0x86, 0xa2, 0x82, 0xd6, 0xf0, 0xd0, 0xf1, 0x92, 0x6d, 0xdf, 0x0b, 0x8e, 0x45, 0xe5,
	0xb2, 0xb8, 0x94, 0x42, 0x0e, 0xc2, 0x12, 0xb3, 0x80, 0x14, 0xf2, 0xe7, 0x25, 0x2e, 0x96, 0x03,
	0x0b, 0x12, 0xa0, 0x2f, 0x23, 0xa1, 0xa8, 0x08, 0x5b, 0xe7, 0x9c, 0x08, 0x54, 0x9f, 0xac, 0x93,
	0xa9, 0x9e, 0xa8, 0xba, 0xd6, 0xed, 0xf6, 0x50, 0x8f, 0xd2, 0x4e, 0x82, 0xf2, 0xdf, 0x33, 0x9c,
	0x8f, 0x50, 0xc2, 0x1b, 0x16, 0x9a, 0x66, 0x4a, 0x14, 0xdb, 0x4f, 0x25, 0x98, 0xd1, 0x48, 0x57,
	0x54, 0xfe, 0x05, 0x04, 0xe1, 0xe0, 0x79, 0xe6, 0xf8, 0x3e, 0xed, 0x92, 0x56, 0x61, 0xf9, 0xf4,
	0x8e, 0x05, 0x45, 0x9c, 0xd9, 0x7f, 0x97, 0x93, 0x33, 0x34, 0x0e, 0xa4, 0xf4, 0x42, 0x95, 0xf4,
	0x5b, 0xd8, 0x43, 0x71, 0xa0, 0x19, 0x76, 0x5a, 0x04, 0x34, 0x58, 0x62, 0x95, 0x11, 0x83, 0x5d,
	0x53, 0x0b, 0xa0, 0x4a, 0xa2, 0x07, 0x4d, 0xec, 0x7e, 0x44, 0x29, 0x2b, 0xad, 0x85, 0x99, 0xbe,
	0x13, 0xc7, 0xa2, 0xc4, 0x67, 0x3c, 0xad, 0x96, 0x2f, 0xa0, 0x21, 0x8e, 0x85, 0xb0, 0x9a, 0xf0,
	0x57, 0xc8, 0xa0, 0xbe, 0xa8, 0x7c, 0x8f, 0xef, 0xc5, 0xd0, 0x2a, 0xa0, 0xf3, 0xaf, 0x9c, 0x39,
	0x71, 0xe9, 0xf6, 0x7a, 0x7b, 0x48, 0xb3, 0xb7, 0x3e, 0x3a, 0x7e, 0xa2, 0xb1, 0x7e, 0x1b, 0xb3,
	0x9e, 0xae, 0xb6, 0x50, 0xca, 0xfa, 0xb3, 0xaf, 0x64, 0xcb, 0x4a, 0x2a, 0xeb, 0xa9, 0xb8, 0x01,
	0xb3, 0x3e, 0x63, 0x65, 0xf1, 0x0b, 0x64, 0xad, 0xbc, 0x9e, 0x78, 0xc9, 0xcb, 0xb3, 0x30, 0x02,
	0x47, 0x57, 0xbf, 0x00, 0x15, 0x7c, 0x83, 0x08, 0x47, 0x91, 0x07, 0xde, 0x78, 0x01, 0x65, 0xb8,
	0x9a, 0x03, 0x9f, 0x57, 0x89, 0xe8, 0xb8, 0xaf, 0x26, 0xe0, 0x1e, 0x64, 0x55, 0xcd, 0xd7, 0xde,
	0x65, 0x4f, 0x8c, 0xa5, 0x44, 0x85, 0x6c, 0xe6, 0x09, 0xaf, 0x16, 0xac, 0x9f, 0xcb, 0x71, 0xbe,
	0x17, 0x71, 0x75, 0xb3, 0x76, 0x7b, 0x86, 0x8c, 0x23, 0x2e, 0x47, 0x7a, 0xf3, 0x80, 0x52, 0x54,
	0x4f, 0x69, 0xef, 0xc6, 0xf9, 0x7b, 0xdd, 0x80, 0xec, 0x62, 0x12, 0x30, 0xb7, 0x21, 0x33, 0x20,
	0x11, 0x0a, 0x33, 0x67, 0xa2, 0x62, 0x46, 0x64, 0x29, 0x23, 0x52, 0x8c, 0x70, 0x80, 0xc7, 0x18,
	0xb1, 0x38, 0x44, 0x89, 0x71, 0x3a, 0x1f, 0xe0, 0x5c, 0xee, 0x1d, 0xa7, 0xd4, 0x8a, 0x6e, 0x49,
	0x7a, 0x75, 0x7a, 0xd2, 0x56, 0x2b, 0xc5, 0x10, 0x67, 0xb5, 0x24, 0xf0, 0xd4, 0xbc, 0x47, 0xa9,
	0x01, 0x5b, 0x23, 0xae, 0x23, 0xac, 0x3b, 0x49, 0x40, 0xc3, 0x60, 0x7e, 0xfa, 0x32, 0x53, 0x54,
	0x71, 0x9f, 0x55, 0xbb, 0xad, 0x3e, 0x7f, 0x3d, 0xf0, 0x12, 0x37, 0xbc, 0x08, 0x54, 0xe9, 0xcb,
	0x5e, 0xc9, 0x02, 0x1e, 0x63, 0xdd, 0x44, 0x74, 0x3b, 0xa0, 0xc5, 0xb0, 0x46, 0xd7, 0xbf, 0x60,
	0xd7, 0xe3, 0xbe, 0x9b, 0xce, 0xb8, 0xe6, 0x94, 0x26, 0xea, 0x05, 0xde, 0x64, 0x74, 0x5b, 0xd8,
	0xfa, 0x0c, 0x71, 0xeb, 0x88, 0x29, 0xa3, 0xf5, 0xac, 0x6b, 0x50, 0xe6, 0x33, 0xad, 0x48, 0x8a,
	0x9a, 0x52, 0xa7, 0x38, 0xad, 0x4e, 0x49, 0xa5, 0x10, 0xcc, 0x32, 0xd1, 0x88, 0x6f, 0x4f, 0xae,
	0x64, 0x02, 0xe3, 0x7c, 0x4c, 0x24, 0x55, 0x3e, 0x97, 0xd4, 0x34, 0x67, 0x2a, 0x5a, 0x21, 0x45,
	0x8f, 0xd9, 0x2a, 0xb9, 0x05, 0x76, 0xab, 0x3a, 0x7d, 0x77, 0x97, 0xe0, 0x34, 0x22, 0x19, 0xa4,
	0x97, 0x86, 0x41, 0x63, 0x12, 0x19, 0xb5, 0xfa, 0xd7, 0x39, 0x94, 0x04, 0x1e, 0x51, 0x92, 0xde,
	0x86, 0x37, 0x4c, 0xc1, 0xa5, 0x39, 0xc7, 0x08, 0x7d, 0xb4, 0x30, 0x3a, 0x94, 0x28, 0x68, 0x1f,
	0xb1, 0xb5, 0x6e, 0xab, 0xc3, 0x79, 0xb2, 0x3d, 0x39, 0x5e, 0xd4, 0x70, 0xab, 0xcf, 0x18, 0x39,
	0x8b, 0xca, 0xc5, 0xfd, 0x5c, 0x85, 0x04, 0x3a, 0x94, 0xf5, 0xc8, 0x84, 0x35, 0x28, 0x34, 0x8c,
	0xdc, 0x22, 0x78, 0xbe, 0x0d, 0xa7, 0x20, 0x40, 0xfd, 0xf4, 0xc2, 0xcb, 0x1a, 0xa1, 0x04, 0x9c,
	0xfd, 0xfb, 0x13, 0xff, 0xfe, 0x5a, 0xab, 0xde, 0x5c, 0x9c, 0xee, 0xcd, 0x42, 0xc8, 0x01, 0x5b,
	0xef, 0xb6, 0xc8, 0xc9, 0xa2, 0xeb, 0x1c, 0xdf, 0x3b, 0xb9, 0xda, 0x31, 0xb2, 0xd1, 0x43, 0x64,
	0x0d, 0xc3, 0x44, 0xcd, 0x0c, 0xb9, 0x1e, 0xce, 0xff, 0x94, 0xb2, 0x08, 0x6b, 0x58, 0x83, 0xac,
	0x61, 0x9b, 0x1e, 0xb2, 0x3e, 0x63, 0xcb, 0xdd, 0x16, 0x74, 0xf3, 0x64, 0x3f, 0xbe, 0xbf, 0xbe,
	0xf1, 0x1b, 0xe4, 0x90, 0xfa, 0x5e, 0x4e, 0x97, 0xa2, 0x9b, 0x1d, 0x22, 0xcc, 0x7a, 0x51, 0x38,
	0x0e, 0x63, 0xc7, 0x47, 0x29, 0x50, 0xa6, 0x62, 0xe3, 0xe0, 0x3f, 0x47, 0x06, 0xd6, 0x45, 0x1b,
	0x9a, 0xc4, 0xf8, 0x24, 0x0c, 0xd4, 0xa9, 0x1a, 0x70, 0x1e, 0x37, 0xc2, 0x20, 0xe1, 0x81, 0x14,
	0x04, 0x50, 0x5c, 0x21, 0x28, 0xf6, 0x9c, 0x2b, 0x64, 0x9b, 0xe1, 0xa3, 0x0b, 0x62, 0xfc, 0xc6,
	0xbe, 0x4c, 0x52, 0xd5, 0xb3, 0xc8, 0xc1, 0xdc, 0xa1, 0x8e, 0xd4, 0x09, 0xa5, 0x3b, 0xfe, 0x96,
	0x47, 0xa6, 0x80, 0xc5, 0xeb, 0x99, 0x1a, 0x5c, 0xf2, 0x33, 0x5c, 0xf4, 0xbd, 0x96, 0x90, 0x3b,
	0xd7, 0x23, 0xb5, 0x6f, 0xb2, 0x25, 0x2e, 0x0b, 0x73, 0x99, 0x5a, 0xf1, 0x7b, 0xba, 0x15, 0x1b,
	0xb2, 0x65, 0x1b, 0x4e, 0xab, 0xfa, 0x92, 0xaa, 0xb5, 0x11, 0x3f, 0x73, 0xbc, 0x60, 0x44, 0x27,
	0x2a, 0xdd, 0x48, 0x22, 0xee, 0x4e, 0x46, 0xd4, 0x46, 0x65, 0x23, 0x99, 0xaa, 0x75, 0xe2, 0x4a,
	0xea, 0x48, 0xf7, 0xf4, 0x2a, 0x5b, 0x7d, 0xde, 0xed, 0x77, 0x5e, 0x76, 0xba, 0xf6, 0xf3, 0x76,
	0xa7, 0x05, 0x4d, 0x1d, 0xba, 0xbc, 0xa4, 0x34, 0xba, 0xed, 0x0e, 0x34, 0x74, 0xb5, 0xa4, 0xd5,
	0xb4, 0x89, 0x92, 0xc7, 0xbe, 0x4f, 0x94, 0x83, 0xde, 0xce, 0x96, 0xdd, 0x24, 0x22, 0xd6, 0x96,
	0x75, 0x22, 0x36, 0x3b, 0x5b, 0xdb, 0x7b, 0x4d, 0xfb, 0x63, 0xbb, 0x5a, 0x84, 0x83, 0x80, 0x68,
	0x35, 0xcd, 0x4b, 0x31, 0x29, 0x3e, 0xff, 0x64, 0x67, 0x21, 0x74, 0xe1, 0x79, 0xb1, 0x79, 0x09,
	0xab, 0xc5, 0x79, 0x91, 0x86, 0x39, 0xeb, 0x37, 0xaa, 0x93, 0x4c, 0x71, 0x0b, 0xfa, 0xf3, 0x4e,
	0x31, 0x3a, 0x2e, 0x19, 0xf6, 0x85, 0x79, 0xec, 0x8b, 0x6a, 0x56, 0xc4, 0x42, 0xad, 0xa9, 0x25,
	0x95, 0xde, 0xb0, 0x34, 0x5b, 0x42, 0xa7, 0x6f, 0x67, 0xac, 0x8f, 0x31, 0xe5, 0x3b, 0xc9, 0xd1,
	0xdd, 0x8c, 0x04, 0x52, 0x00, 0x6b, 0x89, 0x59, 0x3a, 0xe8, 0x23, 0x09, 0xd4, 0x90, 0x13, 0xf1,
	0x2f, 0xd8, 0x03, 0x01, 0x6e, 0x40, 0x0e, 0x40, 0x1e, 0x65, 0xc6, 0x73, 0xbf, 0x9f, 0xc6, 0x38,
	0x8f, 0x42, 0x3a, 0x6b, 0x88, 0xc7, 0x7d, 0x3e, 0x3a, 0x97, 0xe3, 0x8b, 0x98, 0x09, 0x8c, 0x2f,
	0x59, 0x28, 0xba, 0xdd, 0x93, 0x5b, 0xe8, 0xdb, 0xa9, 0x24, 0xc9, 0x4d, 0x65, 0x2a, 0xc8, 0xff,
	0xc9, 0xa3, 0x74, 0x44, 0xe2, 0x6d, 0xd2, 0x55, 0x08, 0x74, 0x69, 0x56, 0xea, 0x14, 0xa6, 0xd5,
	0x11, 0xa9, 0x80, 0xbe, 0x36, 0x98, 0x4a, 0x5f, 0x3f, 0x9b, 0x4e, 0x88, 0xaf, 0x4d, 0x25, 0x84,
	0xa1, 0x86, 0x9a, 0x4e, 0xff, 0x9e, 0xd3, 0x50, 0x5e, 0x67, 0xac, 0xd7, 0x30, 0x80, 0x2c, 0x9e,
	0x0f, 0x3a, 0x2f, 0x3a, 0xdd, 0x43, 0x89, 0x63, 0x78, 0x6e, 0x74, 0x3b, 0x9d, 0x66, 0xc3, 0xde,
	0xd9, 0x06, 0x1c, 0x2f, 0xb3, 0x12, 0x50, 0xe0, 0x27, 0x7a, 0x64, 0x0d, 0x7e, 0x0e, 0x9a, 0x9d,
	0x9d, 0x66, 0xbf, 0xdd, 0xd9, 0xed, 0x56, 0x8b, 0x19, 0x12, 0x61, 0x1c, 0x33, 0x7a, 0x59, 0xb0,
	0xd8, 0x6d, 0xb7, 0xaa, 0x65, 0x18, 0xfa, 0x2a, 0xf8, 0xb8, 0xd7, 0x1d, 0x34, 0xab, 0x4b, 0xf2,
	0xe5, 0xd6, 0x7e, 0xf7, 0xa0, 0x63, 0x57, 0x2b, 0x52, 0x9c, 0xdd, 0xde, 0x6f, 0x0e, 0x0e, 0x06,
	0xcd, 0x7e, 0x75, 0x19, 0x33, 0x4b, 0x51, 0x76, 0xb6, 0x3e, 0xa9, 0x32, 0x49, 0x18, 0x1c, 0x6c,
	0xdb, 0xfd, 0xad, 0x86, 0x5d, 0x5d, 0x01, 0x6c, 0x95, 0x91, 0xc5, 0xce, 0x4e, 0x75, 0x15, 0x40,
	0xf5, 0x50, 0x86, 0xde, 0x3b, 0x77, 0x12, 0x7e, 0x6d, 0x71, 0xbe, 0x3d, 0xf8, 0x53, 0xa5, 0x19,
	0x8e, 0x30, 0x0f, 0xa5, 0x3f, 0xdf, 0x32, 0xe7, 0x99, 0xa2, 0xff, 0x19, 0x7b, 0x4c, 0x36, 0x6c,
	0x41, 0x59, 0xec, 0x46, 0x07, 0x74, 0x17, 0x85, 0xcb, 0x67, 0x65, 0x51, 0x5d, 0x87, 0x06, 0x9f,
	0x68, 0x61, 0x98, 0x31, 0xb8, 0x96, 0xbe, 0x58, 0xeb, 0x16, 0x1f, 0x20, 0xab, 0x5d, 0xdf, 0x39,
	0x96, 0x95, 0xfa, 0x35, 0x4a, 0x00, 0x5b, 0xfe, 0x67, 0x12, 0x4c, 0x78, 0x0b, 0xa3, 0x6c, 0xec,
	0x95, 0x60, 0x14, 0x9e, 0x77, 0x16, 0x15, 0x83, 0x6b, 0x39, 0xd4, 0x66, 0x43, 0x4c, 0x03, 0xba,
	0x38, 0xc7, 0x5b, 0x2a, 0x91, 0xe9, 0x7d, 0xe4, 0x0a, 0x86, 0x7c, 0x0e, 0xae, 0x86, 0xa6, 0xc2,
	0x39, 0x07, 0xd8, 0xc5, 0xd4, 0xc5, 0x77, 0x3c, 0xaf, 0x8b, 0x65, 0x14, 0xc9, 0x53, 0x16, 0xae,
	0xb0, 0x42, 0xd0, 0x1e, 0xcb, 0x16, 0x36, 0xef, 0xdf, 0x2e, 0xa0, 0x95, 0x33, 0xc1, 0x76, 0xcf,
	0x8b, 0xe7, 0x38, 0xfa, 0x7d, 0x71, 0xe6, 0xf4, 0xe1, 0x25, 0xb0, 0xc4, 0xab, 0xab, 0x47, 0x46,
	0x1e, 0xa7, 0xea, 0x98, 0x36, 0x89, 0x9b, 0x7d, 0x07, 0xeb, 0xe8, 0x7e, 0xe8, 0x7a, 0x47, 0x57,
	0xf4, 0x7f, 0x28, 0x73, 0x30, 0x49, 0x33, 0x01, 0x75, 0xd9, 0xb4, 0x90, 0x52, 0xe5, 0x6e, 0x7d,
	0xfa, 0x32, 0x7b, 0x69, 0xa2, 0xa9, 0xe6, 0xcd, 0x89, 0xf5, 0x7d, 0xec, 0x21, 0x07, 0x14, 0x63,
	0x0c, 0xfd, 0x7c, 0x0b, 0x50, 0xc8, 0x1b, 0xa3, 0x5a, 0x17, 0x40, 0xb7, 0x5d, 0x9c, 0x5f, 0xf0,
	0xfa, 0xae, 0xe7, 0x8d, 0x92, 0x68, 0xc2, 0xe7, 0xc6, 0x48, 0x0c, 0x00, 0x6d, 0xe3, 0xd6, 0xc3,
	0xe0, 0x23, 0x6c, 0x7c, 0xc5, 0x36, 0x20, 0xce, 0x2e, 0xdd, 0xd2, 0xd8, 0xe1, 0x7c, 0xf9, 0xd7,
	0x34, 0x0b, 0x1d, 0xa8, 0x82, 0x19, 0xa8, 0x1b, 0xce, 0x5e, 0x3f, 0x60, 0x8f, 0xba, 0x2d, 0x71,
	0xcc, 0xc6, 0x37, 0xbb, 0x51, 0x78, 0xb6, 0xa8, 0x40, 0x6b, 0x9f, 0xbd, 0xd7, 0x6d, 0x6d, 0x47,
	0xa1, 0xe3, 0x36, 0x9c, 0x58, 0xde, 0xe1, 0xb5, 0xbc, 0xa3, 0x44, 0x5c, 0x9b, 0xab, 0xcf, 0x5c,
	0xd9, 0x2f, 0x37, 0xc7, 0xf0, 0x5e, 0xea, 0x8b, 0xa3, 0xf7, 0x50, 0x7f, 0xd7, 0xc4, 0x1b, 0x48,
	0x1c, 0xbd, 0xbd, 0x73, 0x8e, 0x3c, 0x30, 0x36, 0xa3, 0x49, 0x9c, 0x84, 0x67, 0x19, 0x30, 0xc2,
	0x1e, 0xe4, 0xd0, 0x76, 0x53, 0x9b, 0xe1, 0x90, 0xcf, 0xf1, 0x5b, 0x6a, 0x4c, 0xe7, 0xfc, 0x55,
	0xab, 0xa1, 0xd8, 0xb4, 0x13, 0x7e, 0x76, 0x0d, 0x1b, 0x50, 0xc4, 0x83, 0xb7, 0xf3, 0x99, 0xa0,
	0x2e, 0x1f, 0x63, 0x08, 0xb4, 0x69, 0xbb, 0xce, 0x88, 0xcf, 0x31, 0x07, 0x28, 0x47, 0xf0, 0x46,
	0x1f, 0xa4, 0xd7, 0xd0, 0xc5, 0x48, 0x51, 0xd3, 0xa7, 0xfe, 0xca, 0x13, 0xab, 0x9b, 0xde, 0x35,
	0x00, 0xb0, 0x38, 0x16, 0xd1, 0x05, 0xf8, 0x1c, 0xa6, 0xc6, 0xbd, 0x43, 0x7e, 0xfa, 0xde, 0xe1,
	0x9a, 0x5b, 0xa1, 0x33, 0x98, 0x7d, 0xaf, 0xd2, 0x6f, 0x46, 0xd6, 0x9f, 0x72, 0xf2, 0x98, 0x24,
	0x64, 0x4c, 0x5f, 0xe2, 0x42, 0xa3, 0x87, 0x67, 0x7d, 0x4a, 0x32, 0x55, 0x28, 0x4c, 0xab, 0x50,
	0x9c, 0x56, 0x21, 0xfd, 0x2a, 0x65, 0x63, 0x65, 0x49, 0xd2, 0xaf, 0x52, 0xa9, 0x62, 0x4b, 0xfa,
	0xe8, 0xdf, 0x30, 0x26, 0x4f, 0x71, 0xeb, 0x8f, 0x7a, 0x50, 0xae, 0xd1, 0xe8, 0x69, 0xfd, 0x2a,
	0x87, 0xf8, 0xd3, 0x8e, 0x26, 0xc8, 0xd1, 0xc5, 0xe4, 0xac, 0x63, 0xd0, 0x50, 0x7c, 0x6d, 0x20,
	0x1e, 0x47, 0x16, 0xe3, 0x72, 0x52, 0x48, 0xd0, 0x1f, 0xd0, 0x8a, 0x73, 0x3f, 0xa0, 0x95, 0xe6,
	0x7c, 0xee, 0xa2, 0x8f, 0x45, 0xdb, 0xf9, 0xe7, 0x85, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x56,
	0xdd, 0xd3, 0x34, 0x0c, 0x27, 0x00, 0x00,
}
