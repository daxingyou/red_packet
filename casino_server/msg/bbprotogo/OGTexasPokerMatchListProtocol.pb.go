// Code generated by protoc-gen-go.
// source: OGTexasPokerMatchListProtocol.proto
// DO NOT EDIT!

/*
Package bbproto is a generated protocol buffer package.

It is generated from these files:
	OGTexasPokerMatchListProtocol.proto
	OGTexasPokerProtocol.proto
	base.proto
	bonus.proto
	serverModel.proto
	shuiguoji.proto
	thPoker.proto
	zhajinhua.proto

It has these top-level messages:
	MatchList_Login
	MatchList_AckLogin
	OGREQUserAuth
	OGACKUserAuth
	MatchList_SendPlayerCount
	MatchList_CFUserName
	MatchList_SearchMatch
	MatchList_CGZEnterLimit
	MatchList_CGZEnterLimitInfo
	MatchList_ReqEnterNoviceMatch
	MatchList_AckEnterNoviceMatch
	Match_ReqNoviceOnLinePlyCnt
	Match_AckNoviceOnLinePlyCnt
	MatchList_BlindInfo
	MatchList_PreChipInfo
	MatchList_MatchData
	MatchList_SearchResult
	MatchList_Reward
	MatchList_SendReward
	MatchList_PlayerInfo
	MatchList_SendPlayerInfo
	MatchList_SendMatchChangeInfo
	MatchList_SendMatchCoinInfo
	MatchList_TableInfo
	MatchList_SendTableInfo
	MatchList_EnterMatch
	MatchList_AckEnterMatch
	MatchList_LeaveMatch
	MatchList_SignMatch
	MatchList_AckSignMatch
	MatchList_ReportPlayer
	MatchList_NotifyStartMatch
	MatchList_MatchChangeInfo
	MatchList_NotifyMatchPlayer
	MatchList_GetUserInfo
	MatchList_AckGetUserInfo
	MatchList_SendSignInfo
	MatchList_SendEnterSignedMatch
	MatchList_WatchMatch
	MatchList_NotifyMatchStatus
	MatchList_NewMatch
	MatchList_SendServerTime
	MatchList_SendOnLineCount
	MatchList_GetUserCoinInfo
	MatchList_AckGetUserCoinInfo
	MatchList_NewSearchMatch
	MatchList_NewNotifyMatchPlayer
	MatchList_NewAddNewMatch
	MatchList_BroadCastMsg
	MatchList_GetBoradcastData
	MatchList_SvrInfo
	MatchList_SendMatchlistSvrInfo
	MatchList_GetRoleResult
	MatchList_CheckRoleName
	MatchList_CheckRoleNameResult
	MatchList_CreateRole
	MatchList_CreateRoleResult
	MatchList_DelMatch
	MatchList_GetGameUserInfo
	MatchList_GameUserInfo
	MatchList_AckGetGameUserInfo
	MatchList_MatchTopInfo
	MatchList_ModifyConfig
	OGMatchList_MatchInfos
	OGMatchList_ConfigInfo
	OGMatchList_GiveGift
	OGMatchList_GiveItem
	OGMatchList_UserCoinRnkListAck
	OGMatchList_BroadCast_News
	OGMatchList_Property
	OGMatchList_AllInMatchListReq
	OGMatchList_AllInMatchListAck
	OGMatchList_UserLongCertToShortReq
	OGMatchList_UserLongCertToShortAck
	OGReqUserGetShortCert
	OGAckUserGetShortCert
	OGReqMatchStateInfo
	MatchList_ReqMobileBlindList
	MatchList_AckMobileBlindList
	MatchList_ReqMobileMatchList
	MatchList_AckMobileMatchList
	MatchList_LoginSpe
	MatchList_FriendMatchListReq
	MatchList_FriendMatchListAck
	MatchList_ReqFriendMatchInfoInTime
	MatchList_AckFriendMatchInfoInTime
	Game_ACKConfirmConnect
	Game_LoginGame
	Game_EnterMatch
	Game_AckEnterMatch
	Game_AddHandCoin
	Game_CardInfo
	Game_InitCard
	Game_RaiseBet
	Game_AckRaiseBet
	Game_FollowBet
	Game_AckFollowBet
	Game_FoldBet
	Game_AckFoldBet
	Game_CheckBet
	Game_AckCheckBet
	Game_SendFlopCard
	Game_SendTurnCard
	Game_SendRiverCard
	Game_SendOverTurn
	Game_CardType
	Game_WinCoin
	Game_TestResult
	Game_LeaveMatch
	Game_UserInfo
	Game_SendUserInfo
	Game_SendRank
	Game_RestMatch
	Game_ChangeTable
	Game_SendGameInfo
	Game_ShowCard
	Game_AckShowCard
	Game_TestLogin
	Game_AckTestLogin
	Game_TestStartMatch
	Game_ReportPlayer
	Game_UseDelayTime
	Game_LeaveSeat
	Game_MatchChip
	Game_SendUserRank
	Game_BlindChange
	Game_NextBlindInfo
	Game_SendRestTime
	Game_LeaveTable
	Game_PreCoin
	Game_BlindCoin
	Game_NowelterInfo
	OGReqSitdownSeat
	OGAckSitdownSeat
	OGReqBuyChip
	OGAckBuyChip
	OGNeetBugChip
	OGReqLeave
	OGAckLeave
	OGGameRule
	OGWaitBigBling
	OGNextBiglingWatch
	OGChatMsg
	OGProposalMsg
	OGReqPayMsg
	OGAckPayMsg
	OGReqExChangeHYD
	OGAckExChangeHYD
	OGNtfChangeHYD
	OGReqPresentCoins
	OGAckPresentCoins
	OGReqPrivateChatMsg
	OGAckPrivateChatMsg
	OGReqAbleOrUnableChat
	OGAckAbleOrUnableChat
	OGReqKick
	OGAckKick
	OGUserInfos
	OGUserList
	OGModifyConfig
	OGUnAbleChatList
	OGShowPictrue
	OGAddUserToList
	OGDeleteUserFromList
	OGBroadCastPlayerGiftStatus
	OGGiveGift
	OGGiveItem
	OGBroadCastFace
	OGReqRebuy
	OGAckRebuy
	OGBroadCastMatchRank
	REQThranReg
	ACKThranReg
	REQThranConn
	ACKThranConn
	REQThranShortCert
	ACKThranShortCert
	REQThranOpenId
	ACKThranOpenId
	REQSinaGame
	ACKSinaGame
	REQWeiBo
	ACKWeiBo
	REQThranExit
	REQThranGameVersion
	ACKThranGameVersion
	REQThranNewVerify
	ACKThranNewVerify
	REQThranFindPwd
	ACKThranFindPwd
	ACKThranHeart
	SinaApiInfo
	SinaApiRet
	OGRoomInfo
	OGThranMatchInfo
	ThranRoomInfo
	ThranJSSInfo
	OGBulletinInfo
	REQQuickConn
	ACKQuickConn
	NullMsg
	Game_SendAddUser
	Game_Notice
	Game_AckNotice
	Game_CreateDesk
	Game_AckCreateDesk
	Game_DissolveDesk
	Game_AckDissolveDesk
	Game_Ready
	Game_AckReady
	Game_Begin
	Game_GameRecord
	Game_BeanGameRecord
	Game_AckGameRecord
	ProtoHeader
	TerminalInfo
	User
	LoginTurntableBonus
	LoginSignInBonus
	OlineBonus
	TimingBonus
	TBetRecord
	TZjhRound
	TNotice
	ThServerUser
	ThServerDesk
	Shuiguoji
	ShuiguojiHilomp
	ShuiguojiRes
	GetIntoRoom
	ThRoom
	THRoomAddUserBroadcast
	THPoker
	THBet
	THBetBegin
	THBetBroadcast
	THUser
	THLottery
	ZjhRoom
	ZjhBet
	ZjhLottery
	BroadcastBet
	ZjhPai
	Pai
	ZjhQueryNoSeatUser
	ZjhReqSeat
	ZjhMsg
	ZjhBroadcastBeginBet
*/
package bbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MatchList_Login struct {
	Ticket           []byte `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	Username         []byte `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password         []byte `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Userip           []byte `protobuf:"bytes,4,opt,name=userip" json:"userip,omitempty"`
	LoginMode        *int32 `protobuf:"varint,5,opt,name=LoginMode" json:"LoginMode,omitempty"`
	CmStatus         *int32 `protobuf:"varint,6,opt,name=cmStatus" json:"cmStatus,omitempty"`
	Comefromid       *int32 `protobuf:"varint,7,opt,name=comefromid" json:"comefromid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_Login) Reset()                    { *m = MatchList_Login{} }
func (m *MatchList_Login) String() string            { return proto.CompactTextString(m) }
func (*MatchList_Login) ProtoMessage()               {}
func (*MatchList_Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MatchList_Login) GetTicket() []byte {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *MatchList_Login) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *MatchList_Login) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *MatchList_Login) GetUserip() []byte {
	if m != nil {
		return m.Userip
	}
	return nil
}

func (m *MatchList_Login) GetLoginMode() int32 {
	if m != nil && m.LoginMode != nil {
		return *m.LoginMode
	}
	return 0
}

func (m *MatchList_Login) GetCmStatus() int32 {
	if m != nil && m.CmStatus != nil {
		return *m.CmStatus
	}
	return 0
}

func (m *MatchList_Login) GetComefromid() int32 {
	if m != nil && m.Comefromid != nil {
		return *m.Comefromid
	}
	return 0
}

type MatchList_AckLogin struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Cert             []byte `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
	Rolename         []byte `protobuf:"bytes,3,opt,name=rolename" json:"rolename,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_AckLogin) Reset()                    { *m = MatchList_AckLogin{} }
func (m *MatchList_AckLogin) String() string            { return proto.CompactTextString(m) }
func (*MatchList_AckLogin) ProtoMessage()               {}
func (*MatchList_AckLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MatchList_AckLogin) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *MatchList_AckLogin) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *MatchList_AckLogin) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

type OGREQUserAuth struct {
	Ticket           []byte `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	Username         []byte `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password         []byte `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Userip           []byte `protobuf:"bytes,4,opt,name=userip" json:"userip,omitempty"`
	Flags            *int32 `protobuf:"varint,5,opt,name=flags,def=0" json:"flags,omitempty"`
	TicketType       *int32 `protobuf:"varint,6,opt,name=ticketType,def=0" json:"ticketType,omitempty"`
	CmStatus         *int32 `protobuf:"varint,7,opt,name=cmStatus,def=0" json:"cmStatus,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGREQUserAuth) Reset()                    { *m = OGREQUserAuth{} }
func (m *OGREQUserAuth) String() string            { return proto.CompactTextString(m) }
func (*OGREQUserAuth) ProtoMessage()               {}
func (*OGREQUserAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_OGREQUserAuth_Flags int32 = 0
const Default_OGREQUserAuth_TicketType int32 = 0
const Default_OGREQUserAuth_CmStatus int32 = 0

func (m *OGREQUserAuth) GetTicket() []byte {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *OGREQUserAuth) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *OGREQUserAuth) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *OGREQUserAuth) GetUserip() []byte {
	if m != nil {
		return m.Userip
	}
	return nil
}

func (m *OGREQUserAuth) GetFlags() int32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return Default_OGREQUserAuth_Flags
}

func (m *OGREQUserAuth) GetTicketType() int32 {
	if m != nil && m.TicketType != nil {
		return *m.TicketType
	}
	return Default_OGREQUserAuth_TicketType
}

func (m *OGREQUserAuth) GetCmStatus() int32 {
	if m != nil && m.CmStatus != nil {
		return *m.CmStatus
	}
	return Default_OGREQUserAuth_CmStatus
}

// 用户认证应答
type OGACKUserAuth struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Cert             []byte `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
	Kcdata           []byte `protobuf:"bytes,3,opt,name=kcdata" json:"kcdata,omitempty"`
	Username         []byte `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGACKUserAuth) Reset()                    { *m = OGACKUserAuth{} }
func (m *OGACKUserAuth) String() string            { return proto.CompactTextString(m) }
func (*OGACKUserAuth) ProtoMessage()               {}
func (*OGACKUserAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OGACKUserAuth) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *OGACKUserAuth) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *OGACKUserAuth) GetKcdata() []byte {
	if m != nil {
		return m.Kcdata
	}
	return nil
}

func (m *OGACKUserAuth) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

type MatchList_SendPlayerCount struct {
	Playercount      *int32 `protobuf:"varint,1,opt,name=playercount" json:"playercount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_SendPlayerCount) Reset()                    { *m = MatchList_SendPlayerCount{} }
func (m *MatchList_SendPlayerCount) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendPlayerCount) ProtoMessage()               {}
func (*MatchList_SendPlayerCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MatchList_SendPlayerCount) GetPlayercount() int32 {
	if m != nil && m.Playercount != nil {
		return *m.Playercount
	}
	return 0
}

// 客户端给列表发送渠道昵称
type MatchList_CFUserName struct {
	Username         []byte `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,2,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_CFUserName) Reset()                    { *m = MatchList_CFUserName{} }
func (m *MatchList_CFUserName) String() string            { return proto.CompactTextString(m) }
func (*MatchList_CFUserName) ProtoMessage()               {}
func (*MatchList_CFUserName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MatchList_CFUserName) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *MatchList_CFUserName) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

// #define OGID_TEXASPOKER_MATCHLIST_SEARCHMATCH				(OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x000000003)
type MatchList_SearchMatch struct {
	MatchMode        *int32 `protobuf:"varint,1,opt,name=MatchMode" json:"MatchMode,omitempty"`
	TableMode        *int32 `protobuf:"varint,2,opt,name=TableMode" json:"TableMode,omitempty"`
	PlanetMode       *int32 `protobuf:"varint,3,opt,name=PlanetMode" json:"PlanetMode,omitempty"`
	SignMode         *int32 `protobuf:"varint,4,opt,name=SignMode" json:"SignMode,omitempty"`
	ClassMode        *int32 `protobuf:"varint,5,opt,name=ClassMode" json:"ClassMode,omitempty"`
	Mask             *int32 `protobuf:"varint,6,opt,name=Mask" json:"Mask,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_SearchMatch) Reset()                    { *m = MatchList_SearchMatch{} }
func (m *MatchList_SearchMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SearchMatch) ProtoMessage()               {}
func (*MatchList_SearchMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MatchList_SearchMatch) GetMatchMode() int32 {
	if m != nil && m.MatchMode != nil {
		return *m.MatchMode
	}
	return 0
}

func (m *MatchList_SearchMatch) GetTableMode() int32 {
	if m != nil && m.TableMode != nil {
		return *m.TableMode
	}
	return 0
}

func (m *MatchList_SearchMatch) GetPlanetMode() int32 {
	if m != nil && m.PlanetMode != nil {
		return *m.PlanetMode
	}
	return 0
}

func (m *MatchList_SearchMatch) GetSignMode() int32 {
	if m != nil && m.SignMode != nil {
		return *m.SignMode
	}
	return 0
}

func (m *MatchList_SearchMatch) GetClassMode() int32 {
	if m != nil && m.ClassMode != nil {
		return *m.ClassMode
	}
	return 0
}

func (m *MatchList_SearchMatch) GetMask() int32 {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return 0
}

// 常规桌盲注限制、进入玩家金币限制
type MatchList_CGZEnterLimit struct {
	LimitID          *int32 `protobuf:"varint,1,opt,name=LimitID" json:"LimitID,omitempty"`
	MinBlind         *int64 `protobuf:"varint,2,opt,name=MinBlind" json:"MinBlind,omitempty"`
	MaxBlind         *int64 `protobuf:"varint,3,opt,name=MaxBlind" json:"MaxBlind,omitempty"`
	MinCoin          *int64 `protobuf:"varint,4,opt,name=MinCoin" json:"MinCoin,omitempty"`
	MaxCoin          *int64 `protobuf:"varint,5,opt,name=MaxCoin" json:"MaxCoin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_CGZEnterLimit) Reset()                    { *m = MatchList_CGZEnterLimit{} }
func (m *MatchList_CGZEnterLimit) String() string            { return proto.CompactTextString(m) }
func (*MatchList_CGZEnterLimit) ProtoMessage()               {}
func (*MatchList_CGZEnterLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MatchList_CGZEnterLimit) GetLimitID() int32 {
	if m != nil && m.LimitID != nil {
		return *m.LimitID
	}
	return 0
}

func (m *MatchList_CGZEnterLimit) GetMinBlind() int64 {
	if m != nil && m.MinBlind != nil {
		return *m.MinBlind
	}
	return 0
}

func (m *MatchList_CGZEnterLimit) GetMaxBlind() int64 {
	if m != nil && m.MaxBlind != nil {
		return *m.MaxBlind
	}
	return 0
}

func (m *MatchList_CGZEnterLimit) GetMinCoin() int64 {
	if m != nil && m.MinCoin != nil {
		return *m.MinCoin
	}
	return 0
}

func (m *MatchList_CGZEnterLimit) GetMaxCoin() int64 {
	if m != nil && m.MaxCoin != nil {
		return *m.MaxCoin
	}
	return 0
}

// (发送给客户端)常规桌盲注限制列表 * yanhp add 2012-5-30 *
type MatchList_CGZEnterLimitInfo struct {
	LimitDataList    []*MatchList_CGZEnterLimit `protobuf:"bytes,1,rep,name=LimitDataList" json:"LimitDataList,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *MatchList_CGZEnterLimitInfo) Reset()                    { *m = MatchList_CGZEnterLimitInfo{} }
func (m *MatchList_CGZEnterLimitInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_CGZEnterLimitInfo) ProtoMessage()               {}
func (*MatchList_CGZEnterLimitInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MatchList_CGZEnterLimitInfo) GetLimitDataList() []*MatchList_CGZEnterLimit {
	if m != nil {
		return m.LimitDataList
	}
	return nil
}

// (客户端请求)请求加入新手区
type MatchList_ReqEnterNoviceMatch struct {
	NEnterType       *int32 `protobuf:"varint,1,opt,name=nEnterType" json:"nEnterType,omitempty"`
	UserName         []byte `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	Coin             *int64 `protobuf:"varint,3,opt,name=Coin" json:"Coin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_ReqEnterNoviceMatch) Reset()                    { *m = MatchList_ReqEnterNoviceMatch{} }
func (m *MatchList_ReqEnterNoviceMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_ReqEnterNoviceMatch) ProtoMessage()               {}
func (*MatchList_ReqEnterNoviceMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MatchList_ReqEnterNoviceMatch) GetNEnterType() int32 {
	if m != nil && m.NEnterType != nil {
		return *m.NEnterType
	}
	return 0
}

func (m *MatchList_ReqEnterNoviceMatch) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *MatchList_ReqEnterNoviceMatch) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

// (应答客户端)进入新手区，开始游戏
type MatchList_AckEnterNoviceMatch struct {
	Reslut           *int32 `protobuf:"varint,1,opt,name=Reslut" json:"Reslut,omitempty"`
	MatchID          []byte `protobuf:"bytes,2,opt,name=MatchID" json:"MatchID,omitempty"`
	Tableid          *int32 `protobuf:"varint,3,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,4,opt,name=Seat" json:"Seat,omitempty"`
	GameServerIP     *int32 `protobuf:"varint,5,opt,name=GameServerIP" json:"GameServerIP,omitempty"`
	GameServerPort   *int32 `protobuf:"varint,6,opt,name=GameServerPort" json:"GameServerPort,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_AckEnterNoviceMatch) Reset()                    { *m = MatchList_AckEnterNoviceMatch{} }
func (m *MatchList_AckEnterNoviceMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_AckEnterNoviceMatch) ProtoMessage()               {}
func (*MatchList_AckEnterNoviceMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MatchList_AckEnterNoviceMatch) GetReslut() int32 {
	if m != nil && m.Reslut != nil {
		return *m.Reslut
	}
	return 0
}

func (m *MatchList_AckEnterNoviceMatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_AckEnterNoviceMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *MatchList_AckEnterNoviceMatch) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *MatchList_AckEnterNoviceMatch) GetGameServerIP() int32 {
	if m != nil && m.GameServerIP != nil {
		return *m.GameServerIP
	}
	return 0
}

func (m *MatchList_AckEnterNoviceMatch) GetGameServerPort() int32 {
	if m != nil && m.GameServerPort != nil {
		return *m.GameServerPort
	}
	return 0
}

// (客户端请求)请求新手区在线人数
type Match_ReqNoviceOnLinePlyCnt struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Match_ReqNoviceOnLinePlyCnt) Reset()                    { *m = Match_ReqNoviceOnLinePlyCnt{} }
func (m *Match_ReqNoviceOnLinePlyCnt) String() string            { return proto.CompactTextString(m) }
func (*Match_ReqNoviceOnLinePlyCnt) ProtoMessage()               {}
func (*Match_ReqNoviceOnLinePlyCnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// (应答客户端)新手区在线人数
type Match_AckNoviceOnLinePlyCnt struct {
	OnLinePlyCnt     *int32 `protobuf:"varint,1,opt,name=OnLinePlyCnt" json:"OnLinePlyCnt,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Match_AckNoviceOnLinePlyCnt) Reset()                    { *m = Match_AckNoviceOnLinePlyCnt{} }
func (m *Match_AckNoviceOnLinePlyCnt) String() string            { return proto.CompactTextString(m) }
func (*Match_AckNoviceOnLinePlyCnt) ProtoMessage()               {}
func (*Match_AckNoviceOnLinePlyCnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Match_AckNoviceOnLinePlyCnt) GetOnLinePlyCnt() int32 {
	if m != nil && m.OnLinePlyCnt != nil {
		return *m.OnLinePlyCnt
	}
	return 0
}

type MatchList_BlindInfo struct {
	BlindClass       *int32 `protobuf:"varint,1,opt,name=BlindClass" json:"BlindClass,omitempty"`
	SmallBlind       *int64 `protobuf:"varint,2,opt,name=SmallBlind" json:"SmallBlind,omitempty"`
	BigBlind         *int64 `protobuf:"varint,3,opt,name=BigBlind" json:"BigBlind,omitempty"`
	BlindTime        *int32 `protobuf:"varint,4,opt,name=BlindTime" json:"BlindTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_BlindInfo) Reset()                    { *m = MatchList_BlindInfo{} }
func (m *MatchList_BlindInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_BlindInfo) ProtoMessage()               {}
func (*MatchList_BlindInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MatchList_BlindInfo) GetBlindClass() int32 {
	if m != nil && m.BlindClass != nil {
		return *m.BlindClass
	}
	return 0
}

func (m *MatchList_BlindInfo) GetSmallBlind() int64 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *MatchList_BlindInfo) GetBigBlind() int64 {
	if m != nil && m.BigBlind != nil {
		return *m.BigBlind
	}
	return 0
}

func (m *MatchList_BlindInfo) GetBlindTime() int32 {
	if m != nil && m.BlindTime != nil {
		return *m.BlindTime
	}
	return 0
}

type MatchList_PreChipInfo struct {
	PrechipClass     *int32 `protobuf:"varint,1,opt,name=PrechipClass" json:"PrechipClass,omitempty"`
	PrechipValue     *int64 `protobuf:"varint,2,opt,name=PrechipValue" json:"PrechipValue,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_PreChipInfo) Reset()                    { *m = MatchList_PreChipInfo{} }
func (m *MatchList_PreChipInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_PreChipInfo) ProtoMessage()               {}
func (*MatchList_PreChipInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MatchList_PreChipInfo) GetPrechipClass() int32 {
	if m != nil && m.PrechipClass != nil {
		return *m.PrechipClass
	}
	return 0
}

func (m *MatchList_PreChipInfo) GetPrechipValue() int64 {
	if m != nil && m.PrechipValue != nil {
		return *m.PrechipValue
	}
	return 0
}

type MatchList_MatchData struct {
	MatchName           []byte                   `protobuf:"bytes,1,opt,name=MatchName" json:"MatchName,omitempty"`
	MatchID             []byte                   `protobuf:"bytes,2,opt,name=MatchID" json:"MatchID,omitempty"`
	MaxPlayer           *int32                   `protobuf:"varint,3,opt,name=MaxPlayer" json:"MaxPlayer,omitempty"`
	MatchStatus         *int32                   `protobuf:"varint,4,opt,name=MatchStatus" json:"MatchStatus,omitempty"`
	GameType            *int32                   `protobuf:"varint,5,opt,name=GameType" json:"GameType,omitempty"`
	SignFee             *int64                   `protobuf:"varint,6,opt,name=SignFee" json:"SignFee,omitempty"`
	Charge              *int64                   `protobuf:"varint,7,opt,name=Charge" json:"Charge,omitempty"`
	Rebuy               *int32                   `protobuf:"varint,8,opt,name=Rebuy" json:"Rebuy,omitempty"`
	DoubleStack         *int32                   `protobuf:"varint,9,opt,name=DoubleStack" json:"DoubleStack,omitempty"`
	SuperStack          *int32                   `protobuf:"varint,10,opt,name=SuperStack" json:"SuperStack,omitempty"`
	Turbo               *int32                   `protobuf:"varint,11,opt,name=Turbo" json:"Turbo,omitempty"`
	SurperTurbo         *int32                   `protobuf:"varint,12,opt,name=SurperTurbo" json:"SurperTurbo,omitempty"`
	Knockout            *int32                   `protobuf:"varint,13,opt,name=Knockout" json:"Knockout,omitempty"`
	SignPlayer          *int32                   `protobuf:"varint,14,opt,name=SignPlayer" json:"SignPlayer,omitempty"`
	MatchMode           *int32                   `protobuf:"varint,15,opt,name=MatchMode" json:"MatchMode,omitempty"`
	TableMode           *int32                   `protobuf:"varint,16,opt,name=TableMode" json:"TableMode,omitempty"`
	PlanetMode          *int32                   `protobuf:"varint,17,opt,name=PlanetMode" json:"PlanetMode,omitempty"`
	SignMode            *int32                   `protobuf:"varint,18,opt,name=SignMode" json:"SignMode,omitempty"`
	ClassMode           *int32                   `protobuf:"varint,19,opt,name=ClassMode" json:"ClassMode,omitempty"`
	StartTime           []byte                   `protobuf:"bytes,20,opt,name=StartTime" json:"StartTime,omitempty"`
	DualTime            *int32                   `protobuf:"varint,21,opt,name=DualTime" json:"DualTime,omitempty"`
	StartBlindClass     *int32                   `protobuf:"varint,22,opt,name=StartBlindClass" json:"StartBlindClass,omitempty"`
	MaxBlindClass       *int32                   `protobuf:"varint,23,opt,name=MaxBlindClass" json:"MaxBlindClass,omitempty"`
	BlindTime           *int32                   `protobuf:"varint,24,opt,name=BlindTime" json:"BlindTime,omitempty"`
	BlindClassToPreChip *int32                   `protobuf:"varint,25,opt,name=BlindClassToPreChip" json:"BlindClassToPreChip,omitempty"`
	MaxPrechipClass     *int32                   `protobuf:"varint,26,opt,name=MaxPrechipClass" json:"MaxPrechipClass,omitempty"`
	BlindInfo           []*MatchList_BlindInfo   `protobuf:"bytes,27,rep,name=BlindInfo" json:"BlindInfo,omitempty"`
	PreChipInfo         []*MatchList_PreChipInfo `protobuf:"bytes,28,rep,name=PreChipInfo" json:"PreChipInfo,omitempty"`
	CreateTime          *int64                   `protobuf:"varint,29,opt,name=CreateTime" json:"CreateTime,omitempty"`
	InitChip            *int64                   `protobuf:"varint,30,opt,name=InitChip" json:"InitChip,omitempty"`
	MinPlayer           *int32                   `protobuf:"varint,31,opt,name=MinPlayer" json:"MinPlayer,omitempty"`
	CheckSum            *int32                   `protobuf:"varint,32,opt,name=CheckSum" json:"CheckSum,omitempty"`
	XXX_unrecognized    []byte                   `json:"-"`
}

func (m *MatchList_MatchData) Reset()                    { *m = MatchList_MatchData{} }
func (m *MatchList_MatchData) String() string            { return proto.CompactTextString(m) }
func (*MatchList_MatchData) ProtoMessage()               {}
func (*MatchList_MatchData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MatchList_MatchData) GetMatchName() []byte {
	if m != nil {
		return m.MatchName
	}
	return nil
}

func (m *MatchList_MatchData) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_MatchData) GetMaxPlayer() int32 {
	if m != nil && m.MaxPlayer != nil {
		return *m.MaxPlayer
	}
	return 0
}

func (m *MatchList_MatchData) GetMatchStatus() int32 {
	if m != nil && m.MatchStatus != nil {
		return *m.MatchStatus
	}
	return 0
}

func (m *MatchList_MatchData) GetGameType() int32 {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return 0
}

func (m *MatchList_MatchData) GetSignFee() int64 {
	if m != nil && m.SignFee != nil {
		return *m.SignFee
	}
	return 0
}

func (m *MatchList_MatchData) GetCharge() int64 {
	if m != nil && m.Charge != nil {
		return *m.Charge
	}
	return 0
}

func (m *MatchList_MatchData) GetRebuy() int32 {
	if m != nil && m.Rebuy != nil {
		return *m.Rebuy
	}
	return 0
}

func (m *MatchList_MatchData) GetDoubleStack() int32 {
	if m != nil && m.DoubleStack != nil {
		return *m.DoubleStack
	}
	return 0
}

func (m *MatchList_MatchData) GetSuperStack() int32 {
	if m != nil && m.SuperStack != nil {
		return *m.SuperStack
	}
	return 0
}

func (m *MatchList_MatchData) GetTurbo() int32 {
	if m != nil && m.Turbo != nil {
		return *m.Turbo
	}
	return 0
}

func (m *MatchList_MatchData) GetSurperTurbo() int32 {
	if m != nil && m.SurperTurbo != nil {
		return *m.SurperTurbo
	}
	return 0
}

func (m *MatchList_MatchData) GetKnockout() int32 {
	if m != nil && m.Knockout != nil {
		return *m.Knockout
	}
	return 0
}

func (m *MatchList_MatchData) GetSignPlayer() int32 {
	if m != nil && m.SignPlayer != nil {
		return *m.SignPlayer
	}
	return 0
}

func (m *MatchList_MatchData) GetMatchMode() int32 {
	if m != nil && m.MatchMode != nil {
		return *m.MatchMode
	}
	return 0
}

func (m *MatchList_MatchData) GetTableMode() int32 {
	if m != nil && m.TableMode != nil {
		return *m.TableMode
	}
	return 0
}

func (m *MatchList_MatchData) GetPlanetMode() int32 {
	if m != nil && m.PlanetMode != nil {
		return *m.PlanetMode
	}
	return 0
}

func (m *MatchList_MatchData) GetSignMode() int32 {
	if m != nil && m.SignMode != nil {
		return *m.SignMode
	}
	return 0
}

func (m *MatchList_MatchData) GetClassMode() int32 {
	if m != nil && m.ClassMode != nil {
		return *m.ClassMode
	}
	return 0
}

func (m *MatchList_MatchData) GetStartTime() []byte {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *MatchList_MatchData) GetDualTime() int32 {
	if m != nil && m.DualTime != nil {
		return *m.DualTime
	}
	return 0
}

func (m *MatchList_MatchData) GetStartBlindClass() int32 {
	if m != nil && m.StartBlindClass != nil {
		return *m.StartBlindClass
	}
	return 0
}

func (m *MatchList_MatchData) GetMaxBlindClass() int32 {
	if m != nil && m.MaxBlindClass != nil {
		return *m.MaxBlindClass
	}
	return 0
}

func (m *MatchList_MatchData) GetBlindTime() int32 {
	if m != nil && m.BlindTime != nil {
		return *m.BlindTime
	}
	return 0
}

func (m *MatchList_MatchData) GetBlindClassToPreChip() int32 {
	if m != nil && m.BlindClassToPreChip != nil {
		return *m.BlindClassToPreChip
	}
	return 0
}

func (m *MatchList_MatchData) GetMaxPrechipClass() int32 {
	if m != nil && m.MaxPrechipClass != nil {
		return *m.MaxPrechipClass
	}
	return 0
}

func (m *MatchList_MatchData) GetBlindInfo() []*MatchList_BlindInfo {
	if m != nil {
		return m.BlindInfo
	}
	return nil
}

func (m *MatchList_MatchData) GetPreChipInfo() []*MatchList_PreChipInfo {
	if m != nil {
		return m.PreChipInfo
	}
	return nil
}

func (m *MatchList_MatchData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MatchList_MatchData) GetInitChip() int64 {
	if m != nil && m.InitChip != nil {
		return *m.InitChip
	}
	return 0
}

func (m *MatchList_MatchData) GetMinPlayer() int32 {
	if m != nil && m.MinPlayer != nil {
		return *m.MinPlayer
	}
	return 0
}

func (m *MatchList_MatchData) GetCheckSum() int32 {
	if m != nil && m.CheckSum != nil {
		return *m.CheckSum
	}
	return 0
}

type MatchList_SearchResult struct {
	MatchData        []*MatchList_MatchData `protobuf:"bytes,1,rep,name=MatchData" json:"MatchData,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *MatchList_SearchResult) Reset()                    { *m = MatchList_SearchResult{} }
func (m *MatchList_SearchResult) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SearchResult) ProtoMessage()               {}
func (*MatchList_SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MatchList_SearchResult) GetMatchData() []*MatchList_MatchData {
	if m != nil {
		return m.MatchData
	}
	return nil
}

type MatchList_Reward struct {
	Type             *int32 `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
	Rank             *int32 `protobuf:"varint,2,opt,name=Rank" json:"Rank,omitempty"`
	Value            *int64 `protobuf:"varint,3,opt,name=Value" json:"Value,omitempty"`
	RewardName       []byte `protobuf:"bytes,4,opt,name=RewardName" json:"RewardName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_Reward) Reset()                    { *m = MatchList_Reward{} }
func (m *MatchList_Reward) String() string            { return proto.CompactTextString(m) }
func (*MatchList_Reward) ProtoMessage()               {}
func (*MatchList_Reward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *MatchList_Reward) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *MatchList_Reward) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *MatchList_Reward) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *MatchList_Reward) GetRewardName() []byte {
	if m != nil {
		return m.RewardName
	}
	return nil
}

type MatchList_SendReward struct {
	Reward           []*MatchList_Reward `protobuf:"bytes,1,rep,name=Reward" json:"Reward,omitempty"`
	TotalReward      *int64              `protobuf:"varint,2,opt,name=TotalReward" json:"TotalReward,omitempty"`
	MatchID          []byte              `protobuf:"bytes,3,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *MatchList_SendReward) Reset()                    { *m = MatchList_SendReward{} }
func (m *MatchList_SendReward) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendReward) ProtoMessage()               {}
func (*MatchList_SendReward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *MatchList_SendReward) GetReward() []*MatchList_Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *MatchList_SendReward) GetTotalReward() int64 {
	if m != nil && m.TotalReward != nil {
		return *m.TotalReward
	}
	return 0
}

func (m *MatchList_SendReward) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

type MatchList_PlayerInfo struct {
	UserName         []byte `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Coin             *int64 `protobuf:"varint,2,opt,name=Coin" json:"Coin,omitempty"`
	Rank             *int32 `protobuf:"varint,3,opt,name=Rank" json:"Rank,omitempty"`
	Table            *int32 `protobuf:"varint,4,opt,name=Table" json:"Table,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,5,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_PlayerInfo) Reset()                    { *m = MatchList_PlayerInfo{} }
func (m *MatchList_PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_PlayerInfo) ProtoMessage()               {}
func (*MatchList_PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *MatchList_PlayerInfo) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *MatchList_PlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *MatchList_PlayerInfo) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *MatchList_PlayerInfo) GetTable() int32 {
	if m != nil && m.Table != nil {
		return *m.Table
	}
	return 0
}

func (m *MatchList_PlayerInfo) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

type MatchList_SendPlayerInfo struct {
	PlayerInfo       []*MatchList_PlayerInfo `protobuf:"bytes,1,rep,name=PlayerInfo" json:"PlayerInfo,omitempty"`
	MatchID          []byte                  `protobuf:"bytes,2,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *MatchList_SendPlayerInfo) Reset()                    { *m = MatchList_SendPlayerInfo{} }
func (m *MatchList_SendPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendPlayerInfo) ProtoMessage()               {}
func (*MatchList_SendPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MatchList_SendPlayerInfo) GetPlayerInfo() []*MatchList_PlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *MatchList_SendPlayerInfo) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

type MatchList_SendMatchChangeInfo struct {
	RestTime         *int32 `protobuf:"varint,1,opt,name=RestTime" json:"RestTime,omitempty"`
	SmallBlind       *int64 `protobuf:"varint,2,opt,name=SmallBlind" json:"SmallBlind,omitempty"`
	BigBlind         *int64 `protobuf:"varint,3,opt,name=BigBlind" json:"BigBlind,omitempty"`
	NextSmallBlind   *int64 `protobuf:"varint,4,opt,name=NextSmallBlind" json:"NextSmallBlind,omitempty"`
	NextBigBlind     *int64 `protobuf:"varint,5,opt,name=NextBigBlind" json:"NextBigBlind,omitempty"`
	BlindTime        *int32 `protobuf:"varint,6,opt,name=BlindTime" json:"BlindTime,omitempty"`
	MatchID          []byte `protobuf:"bytes,7,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_SendMatchChangeInfo) Reset()                    { *m = MatchList_SendMatchChangeInfo{} }
func (m *MatchList_SendMatchChangeInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendMatchChangeInfo) ProtoMessage()               {}
func (*MatchList_SendMatchChangeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *MatchList_SendMatchChangeInfo) GetRestTime() int32 {
	if m != nil && m.RestTime != nil {
		return *m.RestTime
	}
	return 0
}

func (m *MatchList_SendMatchChangeInfo) GetSmallBlind() int64 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *MatchList_SendMatchChangeInfo) GetBigBlind() int64 {
	if m != nil && m.BigBlind != nil {
		return *m.BigBlind
	}
	return 0
}

func (m *MatchList_SendMatchChangeInfo) GetNextSmallBlind() int64 {
	if m != nil && m.NextSmallBlind != nil {
		return *m.NextSmallBlind
	}
	return 0
}

func (m *MatchList_SendMatchChangeInfo) GetNextBigBlind() int64 {
	if m != nil && m.NextBigBlind != nil {
		return *m.NextBigBlind
	}
	return 0
}

func (m *MatchList_SendMatchChangeInfo) GetBlindTime() int32 {
	if m != nil && m.BlindTime != nil {
		return *m.BlindTime
	}
	return 0
}

func (m *MatchList_SendMatchChangeInfo) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

type MatchList_SendMatchCoinInfo struct {
	MaxCoin          *int64 `protobuf:"varint,1,opt,name=MaxCoin" json:"MaxCoin,omitempty"`
	MinCoin          *int64 `protobuf:"varint,2,opt,name=MinCoin" json:"MinCoin,omitempty"`
	AvgCoin          *int64 `protobuf:"varint,3,opt,name=AvgCoin" json:"AvgCoin,omitempty"`
	MatchID          []byte `protobuf:"bytes,4,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_SendMatchCoinInfo) Reset()                    { *m = MatchList_SendMatchCoinInfo{} }
func (m *MatchList_SendMatchCoinInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendMatchCoinInfo) ProtoMessage()               {}
func (*MatchList_SendMatchCoinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *MatchList_SendMatchCoinInfo) GetMaxCoin() int64 {
	if m != nil && m.MaxCoin != nil {
		return *m.MaxCoin
	}
	return 0
}

func (m *MatchList_SendMatchCoinInfo) GetMinCoin() int64 {
	if m != nil && m.MinCoin != nil {
		return *m.MinCoin
	}
	return 0
}

func (m *MatchList_SendMatchCoinInfo) GetAvgCoin() int64 {
	if m != nil && m.AvgCoin != nil {
		return *m.AvgCoin
	}
	return 0
}

func (m *MatchList_SendMatchCoinInfo) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

type MatchList_TableInfo struct {
	Talbe            *int32                  `protobuf:"varint,1,opt,name=Talbe" json:"Talbe,omitempty"`
	PlayerCount      *int32                  `protobuf:"varint,2,opt,name=PlayerCount" json:"PlayerCount,omitempty"`
	PlayerInfo       []*MatchList_PlayerInfo `protobuf:"bytes,3,rep,name=PlayerInfo" json:"PlayerInfo,omitempty"`
	MaxCoin          *int64                  `protobuf:"varint,4,opt,name=MaxCoin" json:"MaxCoin,omitempty"`
	MinCoin          *int64                  `protobuf:"varint,5,opt,name=MinCoin" json:"MinCoin,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *MatchList_TableInfo) Reset()                    { *m = MatchList_TableInfo{} }
func (m *MatchList_TableInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_TableInfo) ProtoMessage()               {}
func (*MatchList_TableInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *MatchList_TableInfo) GetTalbe() int32 {
	if m != nil && m.Talbe != nil {
		return *m.Talbe
	}
	return 0
}

func (m *MatchList_TableInfo) GetPlayerCount() int32 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

func (m *MatchList_TableInfo) GetPlayerInfo() []*MatchList_PlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *MatchList_TableInfo) GetMaxCoin() int64 {
	if m != nil && m.MaxCoin != nil {
		return *m.MaxCoin
	}
	return 0
}

func (m *MatchList_TableInfo) GetMinCoin() int64 {
	if m != nil && m.MinCoin != nil {
		return *m.MinCoin
	}
	return 0
}

type MatchList_SendTableInfo struct {
	TableInfo        []*MatchList_TableInfo `protobuf:"bytes,1,rep,name=TableInfo" json:"TableInfo,omitempty"`
	MatchID          []byte                 `protobuf:"bytes,2,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *MatchList_SendTableInfo) Reset()                    { *m = MatchList_SendTableInfo{} }
func (m *MatchList_SendTableInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendTableInfo) ProtoMessage()               {}
func (*MatchList_SendTableInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *MatchList_SendTableInfo) GetTableInfo() []*MatchList_TableInfo {
	if m != nil {
		return m.TableInfo
	}
	return nil
}

func (m *MatchList_SendTableInfo) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

type MatchList_EnterMatch struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_EnterMatch) Reset()                    { *m = MatchList_EnterMatch{} }
func (m *MatchList_EnterMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_EnterMatch) ProtoMessage()               {}
func (*MatchList_EnterMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *MatchList_EnterMatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

type MatchList_AckEnterMatch struct {
	MatchData        *MatchList_MatchData `protobuf:"bytes,1,opt,name=MatchData" json:"MatchData,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *MatchList_AckEnterMatch) Reset()                    { *m = MatchList_AckEnterMatch{} }
func (m *MatchList_AckEnterMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_AckEnterMatch) ProtoMessage()               {}
func (*MatchList_AckEnterMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *MatchList_AckEnterMatch) GetMatchData() *MatchList_MatchData {
	if m != nil {
		return m.MatchData
	}
	return nil
}

type MatchList_LeaveMatch struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_LeaveMatch) Reset()                    { *m = MatchList_LeaveMatch{} }
func (m *MatchList_LeaveMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_LeaveMatch) ProtoMessage()               {}
func (*MatchList_LeaveMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *MatchList_LeaveMatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

type MatchList_SignMatch struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	UserName         []byte `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	Type             *int32 `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`
	SignType         *int32 `protobuf:"varint,4,opt,name=SignType" json:"SignType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_SignMatch) Reset()                    { *m = MatchList_SignMatch{} }
func (m *MatchList_SignMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SignMatch) ProtoMessage()               {}
func (*MatchList_SignMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *MatchList_SignMatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_SignMatch) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *MatchList_SignMatch) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *MatchList_SignMatch) GetSignType() int32 {
	if m != nil && m.SignType != nil {
		return *m.SignType
	}
	return 0
}

type MatchList_AckSignMatch struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	UserName         []byte `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	Type             *int32 `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`
	Coin             *int64 `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	Score            *int64 `protobuf:"varint,5,opt,name=Score" json:"Score,omitempty"`
	Result           *int32 `protobuf:"varint,6,opt,name=result" json:"result,omitempty"`
	MatchCoin        *int64 `protobuf:"varint,7,opt,name=MatchCoin" json:"MatchCoin,omitempty"`
	TicketCount      *int64 `protobuf:"varint,8,opt,name=ticketCount" json:"ticketCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_AckSignMatch) Reset()                    { *m = MatchList_AckSignMatch{} }
func (m *MatchList_AckSignMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_AckSignMatch) ProtoMessage()               {}
func (*MatchList_AckSignMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *MatchList_AckSignMatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_AckSignMatch) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *MatchList_AckSignMatch) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *MatchList_AckSignMatch) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *MatchList_AckSignMatch) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *MatchList_AckSignMatch) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *MatchList_AckSignMatch) GetMatchCoin() int64 {
	if m != nil && m.MatchCoin != nil {
		return *m.MatchCoin
	}
	return 0
}

func (m *MatchList_AckSignMatch) GetTicketCount() int64 {
	if m != nil && m.TicketCount != nil {
		return *m.TicketCount
	}
	return 0
}

// 报告人数及自己的IP端口信息
type MatchList_ReportPlayer struct {
	IP               *int32 `protobuf:"varint,1,opt,name=IP" json:"IP,omitempty"`
	Port             *int32 `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
	ServerType       *int32 `protobuf:"varint,3,opt,name=ServerType" json:"ServerType,omitempty"`
	Player           *int32 `protobuf:"varint,4,opt,name=Player" json:"Player,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_ReportPlayer) Reset()                    { *m = MatchList_ReportPlayer{} }
func (m *MatchList_ReportPlayer) String() string            { return proto.CompactTextString(m) }
func (*MatchList_ReportPlayer) ProtoMessage()               {}
func (*MatchList_ReportPlayer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *MatchList_ReportPlayer) GetIP() int32 {
	if m != nil && m.IP != nil {
		return *m.IP
	}
	return 0
}

func (m *MatchList_ReportPlayer) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *MatchList_ReportPlayer) GetServerType() int32 {
	if m != nil && m.ServerType != nil {
		return *m.ServerType
	}
	return 0
}

func (m *MatchList_ReportPlayer) GetPlayer() int32 {
	if m != nil && m.Player != nil {
		return *m.Player
	}
	return 0
}

// MATCHLIST服务器通知用户开始比赛
type MatchList_NotifyStartMatch struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	GameServerIP     *int32 `protobuf:"varint,3,opt,name=GameServerIP" json:"GameServerIP,omitempty"`
	GameServerPort   *int32 `protobuf:"varint,4,opt,name=GameServerPort" json:"GameServerPort,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_NotifyStartMatch) Reset()                    { *m = MatchList_NotifyStartMatch{} }
func (m *MatchList_NotifyStartMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_NotifyStartMatch) ProtoMessage()               {}
func (*MatchList_NotifyStartMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *MatchList_NotifyStartMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *MatchList_NotifyStartMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *MatchList_NotifyStartMatch) GetGameServerIP() int32 {
	if m != nil && m.GameServerIP != nil {
		return *m.GameServerIP
	}
	return 0
}

func (m *MatchList_NotifyStartMatch) GetGameServerPort() int32 {
	if m != nil && m.GameServerPort != nil {
		return *m.GameServerPort
	}
	return 0
}

// 通知比赛定时变化的信息,含人数变化，时间变化
type MatchList_MatchChangeInfo struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	NMaxPlayer       *int32 `protobuf:"varint,2,opt,name=nMaxPlayer" json:"nMaxPlayer,omitempty"`
	NSignPlayer      *int32 `protobuf:"varint,3,opt,name=nSignPlayer" json:"nSignPlayer,omitempty"`
	StartTime        []byte `protobuf:"bytes,4,opt,name=StartTime" json:"StartTime,omitempty"`
	DualTime         *int32 `protobuf:"varint,5,opt,name=DualTime" json:"DualTime,omitempty"`
	MatchStatus      *int32 `protobuf:"varint,6,opt,name=MatchStatus" json:"MatchStatus,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_MatchChangeInfo) Reset()                    { *m = MatchList_MatchChangeInfo{} }
func (m *MatchList_MatchChangeInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_MatchChangeInfo) ProtoMessage()               {}
func (*MatchList_MatchChangeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *MatchList_MatchChangeInfo) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *MatchList_MatchChangeInfo) GetNMaxPlayer() int32 {
	if m != nil && m.NMaxPlayer != nil {
		return *m.NMaxPlayer
	}
	return 0
}

func (m *MatchList_MatchChangeInfo) GetNSignPlayer() int32 {
	if m != nil && m.NSignPlayer != nil {
		return *m.NSignPlayer
	}
	return 0
}

func (m *MatchList_MatchChangeInfo) GetStartTime() []byte {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *MatchList_MatchChangeInfo) GetDualTime() int32 {
	if m != nil && m.DualTime != nil {
		return *m.DualTime
	}
	return 0
}

func (m *MatchList_MatchChangeInfo) GetMatchStatus() int32 {
	if m != nil && m.MatchStatus != nil {
		return *m.MatchStatus
	}
	return 0
}

type MatchList_NotifyMatchPlayer struct {
	MatchInfo        []*MatchList_MatchChangeInfo `protobuf:"bytes,1,rep,name=MatchInfo" json:"MatchInfo,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *MatchList_NotifyMatchPlayer) Reset()                    { *m = MatchList_NotifyMatchPlayer{} }
func (m *MatchList_NotifyMatchPlayer) String() string            { return proto.CompactTextString(m) }
func (*MatchList_NotifyMatchPlayer) ProtoMessage()               {}
func (*MatchList_NotifyMatchPlayer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *MatchList_NotifyMatchPlayer) GetMatchInfo() []*MatchList_MatchChangeInfo {
	if m != nil {
		return m.MatchInfo
	}
	return nil
}

// 从DB获取某个用户的信息
type MatchList_GetUserInfo struct {
	Username         []byte `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_GetUserInfo) Reset()                    { *m = MatchList_GetUserInfo{} }
func (m *MatchList_GetUserInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_GetUserInfo) ProtoMessage()               {}
func (*MatchList_GetUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *MatchList_GetUserInfo) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

type MatchList_AckGetUserInfo struct {
	Username         []byte `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Gold             *int64 `protobuf:"varint,2,opt,name=gold" json:"gold,omitempty"`
	Coin             *int64 `protobuf:"varint,3,opt,name=Coin" json:"Coin,omitempty"`
	Score            *int64 `protobuf:"varint,4,opt,name=Score" json:"Score,omitempty"`
	MatchCoin        *int64 `protobuf:"varint,5,opt,name=MatchCoin" json:"MatchCoin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_AckGetUserInfo) Reset()                    { *m = MatchList_AckGetUserInfo{} }
func (m *MatchList_AckGetUserInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_AckGetUserInfo) ProtoMessage()               {}
func (*MatchList_AckGetUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *MatchList_AckGetUserInfo) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *MatchList_AckGetUserInfo) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *MatchList_AckGetUserInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *MatchList_AckGetUserInfo) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *MatchList_AckGetUserInfo) GetMatchCoin() int64 {
	if m != nil && m.MatchCoin != nil {
		return *m.MatchCoin
	}
	return 0
}

// 发送和自己相关的报名信息
type MatchList_SendSignInfo struct {
	Matchid          [][]byte `protobuf:"bytes,1,rep,name=matchid" json:"matchid,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MatchList_SendSignInfo) Reset()                    { *m = MatchList_SendSignInfo{} }
func (m *MatchList_SendSignInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendSignInfo) ProtoMessage()               {}
func (*MatchList_SendSignInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *MatchList_SendSignInfo) GetMatchid() [][]byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

// 客户端发送选择比赛列表进入
type MatchList_SendEnterSignedMatch struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_SendEnterSignedMatch) Reset()                    { *m = MatchList_SendEnterSignedMatch{} }
func (m *MatchList_SendEnterSignedMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendEnterSignedMatch) ProtoMessage()               {}
func (*MatchList_SendEnterSignedMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *MatchList_SendEnterSignedMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

// 发送旁观比赛消息
type MatchList_WatchMatch struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_WatchMatch) Reset()                    { *m = MatchList_WatchMatch{} }
func (m *MatchList_WatchMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_WatchMatch) ProtoMessage()               {}
func (*MatchList_WatchMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *MatchList_WatchMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *MatchList_WatchMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

// 发送比赛状态变化消息
type MatchList_NotifyMatchStatus struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Matchstatus      *int32 `protobuf:"varint,2,opt,name=matchstatus" json:"matchstatus,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_NotifyMatchStatus) Reset()                    { *m = MatchList_NotifyMatchStatus{} }
func (m *MatchList_NotifyMatchStatus) String() string            { return proto.CompactTextString(m) }
func (*MatchList_NotifyMatchStatus) ProtoMessage()               {}
func (*MatchList_NotifyMatchStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *MatchList_NotifyMatchStatus) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *MatchList_NotifyMatchStatus) GetMatchstatus() int32 {
	if m != nil && m.Matchstatus != nil {
		return *m.Matchstatus
	}
	return 0
}

// 发送新增比赛消息
type MatchList_NewMatch struct {
	MatchData        []*MatchList_MatchData `protobuf:"bytes,1,rep,name=MatchData" json:"MatchData,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *MatchList_NewMatch) Reset()                    { *m = MatchList_NewMatch{} }
func (m *MatchList_NewMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_NewMatch) ProtoMessage()               {}
func (*MatchList_NewMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *MatchList_NewMatch) GetMatchData() []*MatchList_MatchData {
	if m != nil {
		return m.MatchData
	}
	return nil
}

// 发送服务器时间
type MatchList_SendServerTime struct {
	Servertime       []byte `protobuf:"bytes,1,opt,name=servertime" json:"servertime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_SendServerTime) Reset()                    { *m = MatchList_SendServerTime{} }
func (m *MatchList_SendServerTime) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendServerTime) ProtoMessage()               {}
func (*MatchList_SendServerTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *MatchList_SendServerTime) GetServertime() []byte {
	if m != nil {
		return m.Servertime
	}
	return nil
}

// 发送在线人数
type MatchList_SendOnLineCount struct {
	OnLineCount      *int32 `protobuf:"varint,1,opt,name=OnLineCount" json:"OnLineCount,omitempty"`
	TableCount       *int32 `protobuf:"varint,2,opt,name=TableCount" json:"TableCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_SendOnLineCount) Reset()                    { *m = MatchList_SendOnLineCount{} }
func (m *MatchList_SendOnLineCount) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendOnLineCount) ProtoMessage()               {}
func (*MatchList_SendOnLineCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *MatchList_SendOnLineCount) GetOnLineCount() int32 {
	if m != nil && m.OnLineCount != nil {
		return *m.OnLineCount
	}
	return 0
}

func (m *MatchList_SendOnLineCount) GetTableCount() int32 {
	if m != nil && m.TableCount != nil {
		return *m.TableCount
	}
	return 0
}

// 取用户的账户信息
type MatchList_GetUserCoinInfo struct {
	Username         []byte `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,2,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_GetUserCoinInfo) Reset()                    { *m = MatchList_GetUserCoinInfo{} }
func (m *MatchList_GetUserCoinInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_GetUserCoinInfo) ProtoMessage()               {}
func (*MatchList_GetUserCoinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *MatchList_GetUserCoinInfo) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *MatchList_GetUserCoinInfo) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

type MatchList_AckGetUserCoinInfo struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Username         []byte `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Gold             *int64 `protobuf:"varint,3,opt,name=Gold" json:"Gold,omitempty"`
	Coin             *int64 `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	GameCoin         *int64 `protobuf:"varint,5,opt,name=GameCoin" json:"GameCoin,omitempty"`
	BuyCoinUrl       []byte `protobuf:"bytes,6,opt,name=BuyCoinUrl" json:"BuyCoinUrl,omitempty"`
	BuyGoldUrl       []byte `protobuf:"bytes,7,opt,name=BuyGoldUrl" json:"BuyGoldUrl,omitempty"`
	ShopUrl          []byte `protobuf:"bytes,8,opt,name=ShopUrl" json:"ShopUrl,omitempty"`
	Score            *int64 `protobuf:"varint,9,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_AckGetUserCoinInfo) Reset()                    { *m = MatchList_AckGetUserCoinInfo{} }
func (m *MatchList_AckGetUserCoinInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_AckGetUserCoinInfo) ProtoMessage()               {}
func (*MatchList_AckGetUserCoinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *MatchList_AckGetUserCoinInfo) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *MatchList_AckGetUserCoinInfo) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *MatchList_AckGetUserCoinInfo) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *MatchList_AckGetUserCoinInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *MatchList_AckGetUserCoinInfo) GetGameCoin() int64 {
	if m != nil && m.GameCoin != nil {
		return *m.GameCoin
	}
	return 0
}

func (m *MatchList_AckGetUserCoinInfo) GetBuyCoinUrl() []byte {
	if m != nil {
		return m.BuyCoinUrl
	}
	return nil
}

func (m *MatchList_AckGetUserCoinInfo) GetBuyGoldUrl() []byte {
	if m != nil {
		return m.BuyGoldUrl
	}
	return nil
}

func (m *MatchList_AckGetUserCoinInfo) GetShopUrl() []byte {
	if m != nil {
		return m.ShopUrl
	}
	return nil
}

func (m *MatchList_AckGetUserCoinInfo) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type MatchList_NewSearchMatch struct {
	MatchCount       *int32 `protobuf:"varint,1,opt,name=MatchCount" json:"MatchCount,omitempty"`
	MatchDadaLen     *int32 `protobuf:"varint,2,opt,name=MatchDadaLen" json:"MatchDadaLen,omitempty"`
	MatchData        []byte `protobuf:"bytes,3,opt,name=MatchData" json:"MatchData,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_NewSearchMatch) Reset()                    { *m = MatchList_NewSearchMatch{} }
func (m *MatchList_NewSearchMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_NewSearchMatch) ProtoMessage()               {}
func (*MatchList_NewSearchMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *MatchList_NewSearchMatch) GetMatchCount() int32 {
	if m != nil && m.MatchCount != nil {
		return *m.MatchCount
	}
	return 0
}

func (m *MatchList_NewSearchMatch) GetMatchDadaLen() int32 {
	if m != nil && m.MatchDadaLen != nil {
		return *m.MatchDadaLen
	}
	return 0
}

func (m *MatchList_NewSearchMatch) GetMatchData() []byte {
	if m != nil {
		return m.MatchData
	}
	return nil
}

type MatchList_NewNotifyMatchPlayer struct {
	Count            *int32 `protobuf:"varint,1,opt,name=Count" json:"Count,omitempty"`
	MatchData        []byte `protobuf:"bytes,2,opt,name=MatchData" json:"MatchData,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_NewNotifyMatchPlayer) Reset()                    { *m = MatchList_NewNotifyMatchPlayer{} }
func (m *MatchList_NewNotifyMatchPlayer) String() string            { return proto.CompactTextString(m) }
func (*MatchList_NewNotifyMatchPlayer) ProtoMessage()               {}
func (*MatchList_NewNotifyMatchPlayer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *MatchList_NewNotifyMatchPlayer) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *MatchList_NewNotifyMatchPlayer) GetMatchData() []byte {
	if m != nil {
		return m.MatchData
	}
	return nil
}

// 新的新增比赛消息
type MatchList_NewAddNewMatch struct {
	MatchData        []byte `protobuf:"bytes,1,opt,name=MatchData" json:"MatchData,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_NewAddNewMatch) Reset()                    { *m = MatchList_NewAddNewMatch{} }
func (m *MatchList_NewAddNewMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_NewAddNewMatch) ProtoMessage()               {}
func (*MatchList_NewAddNewMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *MatchList_NewAddNewMatch) GetMatchData() []byte {
	if m != nil {
		return m.MatchData
	}
	return nil
}

// 用户收到该消息后，按要求从服务器取数据
type MatchList_BroadCastMsg struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	MatchIdCheckSum  *int32 `protobuf:"varint,2,opt,name=MatchIdCheckSum" json:"MatchIdCheckSum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_BroadCastMsg) Reset()                    { *m = MatchList_BroadCastMsg{} }
func (m *MatchList_BroadCastMsg) String() string            { return proto.CompactTextString(m) }
func (*MatchList_BroadCastMsg) ProtoMessage()               {}
func (*MatchList_BroadCastMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *MatchList_BroadCastMsg) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *MatchList_BroadCastMsg) GetMatchIdCheckSum() int32 {
	if m != nil && m.MatchIdCheckSum != nil {
		return *m.MatchIdCheckSum
	}
	return 0
}

// 用户从服务器取广播数据
type MatchList_GetBoradcastData struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	MatchIDCheckSum  *int32 `protobuf:"varint,2,opt,name=MatchIDCheckSum" json:"MatchIDCheckSum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_GetBoradcastData) Reset()                    { *m = MatchList_GetBoradcastData{} }
func (m *MatchList_GetBoradcastData) String() string            { return proto.CompactTextString(m) }
func (*MatchList_GetBoradcastData) ProtoMessage()               {}
func (*MatchList_GetBoradcastData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *MatchList_GetBoradcastData) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *MatchList_GetBoradcastData) GetMatchIDCheckSum() int32 {
	if m != nil && m.MatchIDCheckSum != nil {
		return *m.MatchIDCheckSum
	}
	return 0
}

type MatchList_SvrInfo struct {
	IP               *int32 `protobuf:"varint,1,opt,name=IP" json:"IP,omitempty"`
	Port             *int32 `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
	Player           *int32 `protobuf:"varint,3,opt,name=Player" json:"Player,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_SvrInfo) Reset()                    { *m = MatchList_SvrInfo{} }
func (m *MatchList_SvrInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SvrInfo) ProtoMessage()               {}
func (*MatchList_SvrInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *MatchList_SvrInfo) GetIP() int32 {
	if m != nil && m.IP != nil {
		return *m.IP
	}
	return 0
}

func (m *MatchList_SvrInfo) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *MatchList_SvrInfo) GetPlayer() int32 {
	if m != nil && m.Player != nil {
		return *m.Player
	}
	return 0
}

// 通知用户比赛列表信息
type MatchList_SendMatchlistSvrInfo struct {
	Result           *int32               `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	SvrInfo          []*MatchList_SvrInfo `protobuf:"bytes,2,rep,name=svrInfo" json:"svrInfo,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *MatchList_SendMatchlistSvrInfo) Reset()                    { *m = MatchList_SendMatchlistSvrInfo{} }
func (m *MatchList_SendMatchlistSvrInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_SendMatchlistSvrInfo) ProtoMessage()               {}
func (*MatchList_SendMatchlistSvrInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *MatchList_SendMatchlistSvrInfo) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *MatchList_SendMatchlistSvrInfo) GetSvrInfo() []*MatchList_SvrInfo {
	if m != nil {
		return m.SvrInfo
	}
	return nil
}

type MatchList_GetRoleResult struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_GetRoleResult) Reset()                    { *m = MatchList_GetRoleResult{} }
func (m *MatchList_GetRoleResult) String() string            { return proto.CompactTextString(m) }
func (*MatchList_GetRoleResult) ProtoMessage()               {}
func (*MatchList_GetRoleResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *MatchList_GetRoleResult) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type MatchList_CheckRoleName struct {
	Rolename         []byte `protobuf:"bytes,1,opt,name=rolename" json:"rolename,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_CheckRoleName) Reset()                    { *m = MatchList_CheckRoleName{} }
func (m *MatchList_CheckRoleName) String() string            { return proto.CompactTextString(m) }
func (*MatchList_CheckRoleName) ProtoMessage()               {}
func (*MatchList_CheckRoleName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *MatchList_CheckRoleName) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

type MatchList_CheckRoleNameResult struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_CheckRoleNameResult) Reset()                    { *m = MatchList_CheckRoleNameResult{} }
func (m *MatchList_CheckRoleNameResult) String() string            { return proto.CompactTextString(m) }
func (*MatchList_CheckRoleNameResult) ProtoMessage()               {}
func (*MatchList_CheckRoleNameResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *MatchList_CheckRoleNameResult) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 创建角色消息
type MatchList_CreateRole struct {
	Rolename         *string `protobuf:"bytes,1,opt,name=rolename" json:"rolename,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MatchList_CreateRole) Reset()                    { *m = MatchList_CreateRole{} }
func (m *MatchList_CreateRole) String() string            { return proto.CompactTextString(m) }
func (*MatchList_CreateRole) ProtoMessage()               {}
func (*MatchList_CreateRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *MatchList_CreateRole) GetRolename() string {
	if m != nil && m.Rolename != nil {
		return *m.Rolename
	}
	return ""
}

type MatchList_CreateRoleResult struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_CreateRoleResult) Reset()                    { *m = MatchList_CreateRoleResult{} }
func (m *MatchList_CreateRoleResult) String() string            { return proto.CompactTextString(m) }
func (*MatchList_CreateRoleResult) ProtoMessage()               {}
func (*MatchList_CreateRoleResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *MatchList_CreateRoleResult) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type MatchList_DelMatch struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_DelMatch) Reset()                    { *m = MatchList_DelMatch{} }
func (m *MatchList_DelMatch) String() string            { return proto.CompactTextString(m) }
func (*MatchList_DelMatch) ProtoMessage()               {}
func (*MatchList_DelMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *MatchList_DelMatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

type MatchList_GetGameUserInfo struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_GetGameUserInfo) Reset()                    { *m = MatchList_GetGameUserInfo{} }
func (m *MatchList_GetGameUserInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_GetGameUserInfo) ProtoMessage()               {}
func (*MatchList_GetGameUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *MatchList_GetGameUserInfo) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

type MatchList_GameUserInfo struct {
	UserName         []byte `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	NCoin            *int64 `protobuf:"varint,2,opt,name=nCoin" json:"nCoin,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,3,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_GameUserInfo) Reset()                    { *m = MatchList_GameUserInfo{} }
func (m *MatchList_GameUserInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_GameUserInfo) ProtoMessage()               {}
func (*MatchList_GameUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *MatchList_GameUserInfo) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *MatchList_GameUserInfo) GetNCoin() int64 {
	if m != nil && m.NCoin != nil {
		return *m.NCoin
	}
	return 0
}

func (m *MatchList_GameUserInfo) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

type MatchList_AckGetGameUserInfo struct {
	MatchID          []byte                    `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	UserInfo         []*MatchList_GameUserInfo `protobuf:"bytes,2,rep,name=UserInfo" json:"UserInfo,omitempty"`
	FlopRate         *int32                    `protobuf:"varint,3,opt,name=FlopRate" json:"FlopRate,omitempty"`
	GameCountPerHour *int32                    `protobuf:"varint,4,opt,name=GameCountPerHour" json:"GameCountPerHour,omitempty"`
	AvgPool          *int64                    `protobuf:"varint,5,opt,name=AvgPool" json:"AvgPool,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *MatchList_AckGetGameUserInfo) Reset()                    { *m = MatchList_AckGetGameUserInfo{} }
func (m *MatchList_AckGetGameUserInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_AckGetGameUserInfo) ProtoMessage()               {}
func (*MatchList_AckGetGameUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *MatchList_AckGetGameUserInfo) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_AckGetGameUserInfo) GetUserInfo() []*MatchList_GameUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *MatchList_AckGetGameUserInfo) GetFlopRate() int32 {
	if m != nil && m.FlopRate != nil {
		return *m.FlopRate
	}
	return 0
}

func (m *MatchList_AckGetGameUserInfo) GetGameCountPerHour() int32 {
	if m != nil && m.GameCountPerHour != nil {
		return *m.GameCountPerHour
	}
	return 0
}

func (m *MatchList_AckGetGameUserInfo) GetAvgPool() int64 {
	if m != nil && m.AvgPool != nil {
		return *m.AvgPool
	}
	return 0
}

type MatchList_MatchTopInfo struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	NTopIndex        *int32 `protobuf:"varint,2,opt,name=nTopIndex" json:"nTopIndex,omitempty"`
	NTopColor        *int32 `protobuf:"varint,3,opt,name=nTopColor" json:"nTopColor,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_MatchTopInfo) Reset()                    { *m = MatchList_MatchTopInfo{} }
func (m *MatchList_MatchTopInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchList_MatchTopInfo) ProtoMessage()               {}
func (*MatchList_MatchTopInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *MatchList_MatchTopInfo) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_MatchTopInfo) GetNTopIndex() int32 {
	if m != nil && m.NTopIndex != nil {
		return *m.NTopIndex
	}
	return 0
}

func (m *MatchList_MatchTopInfo) GetNTopColor() int32 {
	if m != nil && m.NTopColor != nil {
		return *m.NTopColor
	}
	return 0
}

type MatchList_ModifyConfig struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	NType            *int32 `protobuf:"varint,2,opt,name=nType" json:"nType,omitempty"`
	NBigBlind        *int64 `protobuf:"varint,3,opt,name=nBigBlind" json:"nBigBlind,omitempty"`
	NSmallBlind      *int64 `protobuf:"varint,4,opt,name=nSmallBlind" json:"nSmallBlind,omitempty"`
	TableName        []byte `protobuf:"bytes,5,opt,name=TableName" json:"TableName,omitempty"`
	BPassWord        *int32 `protobuf:"varint,6,opt,name=bPassWord" json:"bPassWord,omitempty"`
	Prechip          *int64 `protobuf:"varint,7,opt,name=prechip" json:"prechip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_ModifyConfig) Reset()                    { *m = MatchList_ModifyConfig{} }
func (m *MatchList_ModifyConfig) String() string            { return proto.CompactTextString(m) }
func (*MatchList_ModifyConfig) ProtoMessage()               {}
func (*MatchList_ModifyConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *MatchList_ModifyConfig) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_ModifyConfig) GetNType() int32 {
	if m != nil && m.NType != nil {
		return *m.NType
	}
	return 0
}

func (m *MatchList_ModifyConfig) GetNBigBlind() int64 {
	if m != nil && m.NBigBlind != nil {
		return *m.NBigBlind
	}
	return 0
}

func (m *MatchList_ModifyConfig) GetNSmallBlind() int64 {
	if m != nil && m.NSmallBlind != nil {
		return *m.NSmallBlind
	}
	return 0
}

func (m *MatchList_ModifyConfig) GetTableName() []byte {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *MatchList_ModifyConfig) GetBPassWord() int32 {
	if m != nil && m.BPassWord != nil {
		return *m.BPassWord
	}
	return 0
}

func (m *MatchList_ModifyConfig) GetPrechip() int64 {
	if m != nil && m.Prechip != nil {
		return *m.Prechip
	}
	return 0
}

type OGMatchList_MatchInfos struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	NTableID         *int64 `protobuf:"varint,2,opt,name=nTableID" json:"nTableID,omitempty"`
	NBeginTime       *int64 `protobuf:"varint,3,opt,name=nBeginTime" json:"nBeginTime,omitempty"`
	NEndTime         *int64 `protobuf:"varint,4,opt,name=nEndTime" json:"nEndTime,omitempty"`
	SCreater         []byte `protobuf:"bytes,5,opt,name=sCreater" json:"sCreater,omitempty"`
	BPassWord        *int32 `protobuf:"varint,6,opt,name=bPassWord" json:"bPassWord,omitempty"`
	NHYDValue        *int64 `protobuf:"varint,7,opt,name=nHYDValue" json:"nHYDValue,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGMatchList_MatchInfos) Reset()                    { *m = OGMatchList_MatchInfos{} }
func (m *OGMatchList_MatchInfos) String() string            { return proto.CompactTextString(m) }
func (*OGMatchList_MatchInfos) ProtoMessage()               {}
func (*OGMatchList_MatchInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *OGMatchList_MatchInfos) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGMatchList_MatchInfos) GetNTableID() int64 {
	if m != nil && m.NTableID != nil {
		return *m.NTableID
	}
	return 0
}

func (m *OGMatchList_MatchInfos) GetNBeginTime() int64 {
	if m != nil && m.NBeginTime != nil {
		return *m.NBeginTime
	}
	return 0
}

func (m *OGMatchList_MatchInfos) GetNEndTime() int64 {
	if m != nil && m.NEndTime != nil {
		return *m.NEndTime
	}
	return 0
}

func (m *OGMatchList_MatchInfos) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

func (m *OGMatchList_MatchInfos) GetBPassWord() int32 {
	if m != nil && m.BPassWord != nil {
		return *m.BPassWord
	}
	return 0
}

func (m *OGMatchList_MatchInfos) GetNHYDValue() int64 {
	if m != nil && m.NHYDValue != nil {
		return *m.NHYDValue
	}
	return 0
}

// 客户端需要知道的部分配置信息
// #define OGID_TEXASPOKER_MATCHLIST_CONFIGINFO	 (OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x000000030)
type OGMatchList_ConfigInfo struct {
	NHornValue             *int64 `protobuf:"varint,1,opt,name=nHornValue" json:"nHornValue,omitempty"`
	NPresent_MaxCoin_Times *int64 `protobuf:"varint,2,opt,name=nPresent_MaxCoin_Times" json:"nPresent_MaxCoin_Times,omitempty"`
	NPresent_MaxTimes_Day  *int64 `protobuf:"varint,3,opt,name=nPresent_MaxTimes_Day" json:"nPresent_MaxTimes_Day,omitempty"`
	NPresent_MaxTimes_User *int64 `protobuf:"varint,4,opt,name=nPresent_MaxTimes_User" json:"nPresent_MaxTimes_User,omitempty"`
	NPresent_ChipToCoin    *int64 `protobuf:"varint,5,opt,name=nPresent_ChipToCoin" json:"nPresent_ChipToCoin,omitempty"`
	XXX_unrecognized       []byte `json:"-"`
}

func (m *OGMatchList_ConfigInfo) Reset()                    { *m = OGMatchList_ConfigInfo{} }
func (m *OGMatchList_ConfigInfo) String() string            { return proto.CompactTextString(m) }
func (*OGMatchList_ConfigInfo) ProtoMessage()               {}
func (*OGMatchList_ConfigInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *OGMatchList_ConfigInfo) GetNHornValue() int64 {
	if m != nil && m.NHornValue != nil {
		return *m.NHornValue
	}
	return 0
}

func (m *OGMatchList_ConfigInfo) GetNPresent_MaxCoin_Times() int64 {
	if m != nil && m.NPresent_MaxCoin_Times != nil {
		return *m.NPresent_MaxCoin_Times
	}
	return 0
}

func (m *OGMatchList_ConfigInfo) GetNPresent_MaxTimes_Day() int64 {
	if m != nil && m.NPresent_MaxTimes_Day != nil {
		return *m.NPresent_MaxTimes_Day
	}
	return 0
}

func (m *OGMatchList_ConfigInfo) GetNPresent_MaxTimes_User() int64 {
	if m != nil && m.NPresent_MaxTimes_User != nil {
		return *m.NPresent_MaxTimes_User
	}
	return 0
}

func (m *OGMatchList_ConfigInfo) GetNPresent_ChipToCoin() int64 {
	if m != nil && m.NPresent_ChipToCoin != nil {
		return *m.NPresent_ChipToCoin
	}
	return 0
}

// 赠送礼物
// #define OGID_TEXASPOKER_MATCHLIST_GIVEGIFT	 (OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x000000031)
type OGMatchList_GiveGift struct {
	CustomerName     []byte `protobuf:"bytes,1,opt,name=customerName" json:"customerName,omitempty"`
	GiftId           []byte `protobuf:"bytes,2,opt,name=giftId" json:"giftId,omitempty"`
	Receivers        []byte `protobuf:"bytes,3,opt,name=receivers" json:"receivers,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGMatchList_GiveGift) Reset()                    { *m = OGMatchList_GiveGift{} }
func (m *OGMatchList_GiveGift) String() string            { return proto.CompactTextString(m) }
func (*OGMatchList_GiveGift) ProtoMessage()               {}
func (*OGMatchList_GiveGift) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *OGMatchList_GiveGift) GetCustomerName() []byte {
	if m != nil {
		return m.CustomerName
	}
	return nil
}

func (m *OGMatchList_GiveGift) GetGiftId() []byte {
	if m != nil {
		return m.GiftId
	}
	return nil
}

func (m *OGMatchList_GiveGift) GetReceivers() []byte {
	if m != nil {
		return m.Receivers
	}
	return nil
}

// 赠送道具
// #define OGID_TEXASPOKER_MATCHLIST_GIVEITEM	 (OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x000000032)
type OGMatchList_GiveItem struct {
	CustomRoleName   []byte `protobuf:"bytes,1,opt,name=customRoleName" json:"customRoleName,omitempty"`
	ItemID           []byte `protobuf:"bytes,2,opt,name=itemID" json:"itemID,omitempty"`
	Receivers        []byte `protobuf:"bytes,3,opt,name=receivers" json:"receivers,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGMatchList_GiveItem) Reset()                    { *m = OGMatchList_GiveItem{} }
func (m *OGMatchList_GiveItem) String() string            { return proto.CompactTextString(m) }
func (*OGMatchList_GiveItem) ProtoMessage()               {}
func (*OGMatchList_GiveItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *OGMatchList_GiveItem) GetCustomRoleName() []byte {
	if m != nil {
		return m.CustomRoleName
	}
	return nil
}

func (m *OGMatchList_GiveItem) GetItemID() []byte {
	if m != nil {
		return m.ItemID
	}
	return nil
}

func (m *OGMatchList_GiveItem) GetReceivers() []byte {
	if m != nil {
		return m.Receivers
	}
	return nil
}

// 请求排行榜信息
// #define OGID_TEXASPOKER_MATCHLIST_USER_COIN_RNK_LIST_REQ (OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x000000033)
// #define OGID_TEXASPOKER_MATCHLIST_USER_COIN_RNK_LIST_ACK (OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x000000034)
type OGMatchList_UserCoinRnkListAck struct {
	UserRnkList      []*OGMatchList_UserCoinRnkListAck_UserCoinInfo `protobuf:"bytes,1,rep,name=userRnkList" json:"userRnkList,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *OGMatchList_UserCoinRnkListAck) Reset()                    { *m = OGMatchList_UserCoinRnkListAck{} }
func (m *OGMatchList_UserCoinRnkListAck) String() string            { return proto.CompactTextString(m) }
func (*OGMatchList_UserCoinRnkListAck) ProtoMessage()               {}
func (*OGMatchList_UserCoinRnkListAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *OGMatchList_UserCoinRnkListAck) GetUserRnkList() []*OGMatchList_UserCoinRnkListAck_UserCoinInfo {
	if m != nil {
		return m.UserRnkList
	}
	return nil
}

type OGMatchList_UserCoinRnkListAck_UserCoinInfo struct {
	SRoleName        []byte `protobuf:"bytes,1,opt,name=sRoleName" json:"sRoleName,omitempty"`
	NCoin            *int64 `protobuf:"varint,2,opt,name=nCoin" json:"nCoin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGMatchList_UserCoinRnkListAck_UserCoinInfo) Reset() {
	*m = OGMatchList_UserCoinRnkListAck_UserCoinInfo{}
}
func (m *OGMatchList_UserCoinRnkListAck_UserCoinInfo) String() string {
	return proto.CompactTextString(m)
}
func (*OGMatchList_UserCoinRnkListAck_UserCoinInfo) ProtoMessage() {}
func (*OGMatchList_UserCoinRnkListAck_UserCoinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{67, 0}
}

func (m *OGMatchList_UserCoinRnkListAck_UserCoinInfo) GetSRoleName() []byte {
	if m != nil {
		return m.SRoleName
	}
	return nil
}

func (m *OGMatchList_UserCoinRnkListAck_UserCoinInfo) GetNCoin() int64 {
	if m != nil && m.NCoin != nil {
		return *m.NCoin
	}
	return 0
}

// 请求新闻广告信息
// #define OGID_TEXASPOKER_MATCHLIST_BROADCAST_NEWS_REQ (OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x000000035)
// #define OGID_TEXASPOKER_MATCHLIST_BROADCAST_NEWS_ACK (OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x000000036)
type OGMatchList_BroadCast_News struct {
	Newslist         []*OGMatchList_BroadCast_News_NewsInfo `protobuf:"bytes,1,rep,name=newslist" json:"newslist,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *OGMatchList_BroadCast_News) Reset()                    { *m = OGMatchList_BroadCast_News{} }
func (m *OGMatchList_BroadCast_News) String() string            { return proto.CompactTextString(m) }
func (*OGMatchList_BroadCast_News) ProtoMessage()               {}
func (*OGMatchList_BroadCast_News) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *OGMatchList_BroadCast_News) GetNewslist() []*OGMatchList_BroadCast_News_NewsInfo {
	if m != nil {
		return m.Newslist
	}
	return nil
}

type OGMatchList_BroadCast_News_NewsInfo struct {
	NewsTitle        []byte `protobuf:"bytes,1,opt,name=news_title" json:"news_title,omitempty"`
	NewsUrl          []byte `protobuf:"bytes,2,opt,name=news_url" json:"news_url,omitempty"`
	NewsType         *int32 `protobuf:"varint,3,opt,name=news_type" json:"news_type,omitempty"`
	NewsTopd         *int32 `protobuf:"varint,4,opt,name=news_topd" json:"news_topd,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGMatchList_BroadCast_News_NewsInfo) Reset()         { *m = OGMatchList_BroadCast_News_NewsInfo{} }
func (m *OGMatchList_BroadCast_News_NewsInfo) String() string { return proto.CompactTextString(m) }
func (*OGMatchList_BroadCast_News_NewsInfo) ProtoMessage()    {}
func (*OGMatchList_BroadCast_News_NewsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{68, 0}
}

func (m *OGMatchList_BroadCast_News_NewsInfo) GetNewsTitle() []byte {
	if m != nil {
		return m.NewsTitle
	}
	return nil
}

func (m *OGMatchList_BroadCast_News_NewsInfo) GetNewsUrl() []byte {
	if m != nil {
		return m.NewsUrl
	}
	return nil
}

func (m *OGMatchList_BroadCast_News_NewsInfo) GetNewsType() int32 {
	if m != nil && m.NewsType != nil {
		return *m.NewsType
	}
	return 0
}

func (m *OGMatchList_BroadCast_News_NewsInfo) GetNewsTopd() int32 {
	if m != nil && m.NewsTopd != nil {
		return *m.NewsTopd
	}
	return 0
}

// #define OGID_TEXASPOKER_MATCHLIST_PROPERTY  	 (OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x00000003B)
type OGMatchList_Property struct {
	Plist            []*OGMatchList_Property_Property `protobuf:"bytes,1,rep,name=plist" json:"plist,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *OGMatchList_Property) Reset()                    { *m = OGMatchList_Property{} }
func (m *OGMatchList_Property) String() string            { return proto.CompactTextString(m) }
func (*OGMatchList_Property) ProtoMessage()               {}
func (*OGMatchList_Property) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *OGMatchList_Property) GetPlist() []*OGMatchList_Property_Property {
	if m != nil {
		return m.Plist
	}
	return nil
}

type OGMatchList_Property_Property struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	EntryUrl         []byte `protobuf:"bytes,2,opt,name=entryUrl" json:"entryUrl,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGMatchList_Property_Property) Reset()         { *m = OGMatchList_Property_Property{} }
func (m *OGMatchList_Property_Property) String() string { return proto.CompactTextString(m) }
func (*OGMatchList_Property_Property) ProtoMessage()    {}
func (*OGMatchList_Property_Property) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{69, 0}
}

func (m *OGMatchList_Property_Property) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *OGMatchList_Property_Property) GetEntryUrl() []byte {
	if m != nil {
		return m.EntryUrl
	}
	return nil
}

// 客户端请求all in 场
type OGMatchList_AllInMatchListReq struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGMatchList_AllInMatchListReq) Reset()                    { *m = OGMatchList_AllInMatchListReq{} }
func (m *OGMatchList_AllInMatchListReq) String() string            { return proto.CompactTextString(m) }
func (*OGMatchList_AllInMatchListReq) ProtoMessage()               {}
func (*OGMatchList_AllInMatchListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *OGMatchList_AllInMatchListReq) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

// ALL In场比赛列表
type OGMatchList_AllInMatchListAck struct {
	MatchID          [][]byte `protobuf:"bytes,1,rep,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *OGMatchList_AllInMatchListAck) Reset()                    { *m = OGMatchList_AllInMatchListAck{} }
func (m *OGMatchList_AllInMatchListAck) String() string            { return proto.CompactTextString(m) }
func (*OGMatchList_AllInMatchListAck) ProtoMessage()               {}
func (*OGMatchList_AllInMatchListAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *OGMatchList_AllInMatchListAck) GetMatchID() [][]byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

// 客户端请求兑换短证书
// #define OGID_USER_LONGCERT_TO_SHORT							(OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x00000003E)
// optional int32  webType = 2;    //网页类型，1商城，2朋友桌管理，3朋友桌设置，4更改朋友桌密码
// optional int32  webType = 4;  //网页类型，1商城，2朋友桌管理，3朋友桌设置，4更改朋友桌密码
type OGMatchList_UserLongCertToShortReq struct {
	Userip           []byte `protobuf:"bytes,1,opt,name=userip" json:"userip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGMatchList_UserLongCertToShortReq) Reset()         { *m = OGMatchList_UserLongCertToShortReq{} }
func (m *OGMatchList_UserLongCertToShortReq) String() string { return proto.CompactTextString(m) }
func (*OGMatchList_UserLongCertToShortReq) ProtoMessage()    {}
func (*OGMatchList_UserLongCertToShortReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{72}
}

func (m *OGMatchList_UserLongCertToShortReq) GetUserip() []byte {
	if m != nil {
		return m.Userip
	}
	return nil
}

type OGMatchList_UserLongCertToShortAck struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Shortcert        []byte `protobuf:"bytes,2,opt,name=shortcert" json:"shortcert,omitempty"`
	Rolename         []byte `protobuf:"bytes,3,opt,name=rolename" json:"rolename,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGMatchList_UserLongCertToShortAck) Reset()         { *m = OGMatchList_UserLongCertToShortAck{} }
func (m *OGMatchList_UserLongCertToShortAck) String() string { return proto.CompactTextString(m) }
func (*OGMatchList_UserLongCertToShortAck) ProtoMessage()    {}
func (*OGMatchList_UserLongCertToShortAck) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{73}
}

func (m *OGMatchList_UserLongCertToShortAck) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *OGMatchList_UserLongCertToShortAck) GetShortcert() []byte {
	if m != nil {
		return m.Shortcert
	}
	return nil
}

func (m *OGMatchList_UserLongCertToShortAck) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

// 认证服务长证书换取短证书
// #define OGID_USER_GET_SHORTCERT							(OGID_MSGBASE_GAMEUSERDBSVR + 20)
type OGReqUserGetShortCert struct {
	Ticket           []byte `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	Username         []byte `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	UserIp           []byte `protobuf:"bytes,4,opt,name=userIp" json:"userIp,omitempty"`
	Flags            *int32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqUserGetShortCert) Reset()                    { *m = OGReqUserGetShortCert{} }
func (m *OGReqUserGetShortCert) String() string            { return proto.CompactTextString(m) }
func (*OGReqUserGetShortCert) ProtoMessage()               {}
func (*OGReqUserGetShortCert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *OGReqUserGetShortCert) GetTicket() []byte {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *OGReqUserGetShortCert) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *OGReqUserGetShortCert) GetUserIp() []byte {
	if m != nil {
		return m.UserIp
	}
	return nil
}

func (m *OGReqUserGetShortCert) GetFlags() int32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

type OGAckUserGetShortCert struct {
	Result           *int32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	UserName         *string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	ShortCert        []byte  `protobuf:"bytes,3,opt,name=shortCert" json:"shortCert,omitempty"`
	Flags            *int32  `protobuf:"varint,4,opt,name=flags,def=0" json:"flags,omitempty"`
	CmStatus         *int32  `protobuf:"varint,5,opt,name=cmStatus,def=0" json:"cmStatus,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OGAckUserGetShortCert) Reset()                    { *m = OGAckUserGetShortCert{} }
func (m *OGAckUserGetShortCert) String() string            { return proto.CompactTextString(m) }
func (*OGAckUserGetShortCert) ProtoMessage()               {}
func (*OGAckUserGetShortCert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

const Default_OGAckUserGetShortCert_Flags int32 = 0
const Default_OGAckUserGetShortCert_CmStatus int32 = 0

func (m *OGAckUserGetShortCert) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *OGAckUserGetShortCert) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *OGAckUserGetShortCert) GetShortCert() []byte {
	if m != nil {
		return m.ShortCert
	}
	return nil
}

func (m *OGAckUserGetShortCert) GetFlags() int32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return Default_OGAckUserGetShortCert_Flags
}

func (m *OGAckUserGetShortCert) GetCmStatus() int32 {
	if m != nil && m.CmStatus != nil {
		return *m.CmStatus
	}
	return Default_OGAckUserGetShortCert_CmStatus
}

// web客户端定时请求match的玩家、牌桌信息
// #define OGID_TEXASPOKER_MATCHLIST_MATCHSTATEINFO			(OGID_MSGBASE_TEXASPOKER_MATCHLISTBASE + 0x00000003F)
type OGReqMatchStateInfo struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OGReqMatchStateInfo) Reset()                    { *m = OGReqMatchStateInfo{} }
func (m *OGReqMatchStateInfo) String() string            { return proto.CompactTextString(m) }
func (*OGReqMatchStateInfo) ProtoMessage()               {}
func (*OGReqMatchStateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *OGReqMatchStateInfo) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

// （移动类型客户端）请求大小盲注、最大最小带入列表
type MatchList_ReqMobileBlindList struct {
	Rolename         []byte `protobuf:"bytes,1,opt,name=rolename" json:"rolename,omitempty"`
	Coin             *int64 `protobuf:"varint,2,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_ReqMobileBlindList) Reset()                    { *m = MatchList_ReqMobileBlindList{} }
func (m *MatchList_ReqMobileBlindList) String() string            { return proto.CompactTextString(m) }
func (*MatchList_ReqMobileBlindList) ProtoMessage()               {}
func (*MatchList_ReqMobileBlindList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *MatchList_ReqMobileBlindList) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

func (m *MatchList_ReqMobileBlindList) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

// 应答
type MatchList_AckMobileBlindList struct {
	Mobileblindlist  []*MatchList_AckMobileBlindList_MobileBlind `protobuf:"bytes,1,rep,name=mobileblindlist" json:"mobileblindlist,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *MatchList_AckMobileBlindList) Reset()                    { *m = MatchList_AckMobileBlindList{} }
func (m *MatchList_AckMobileBlindList) String() string            { return proto.CompactTextString(m) }
func (*MatchList_AckMobileBlindList) ProtoMessage()               {}
func (*MatchList_AckMobileBlindList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *MatchList_AckMobileBlindList) GetMobileblindlist() []*MatchList_AckMobileBlindList_MobileBlind {
	if m != nil {
		return m.Mobileblindlist
	}
	return nil
}

type MatchList_AckMobileBlindList_MobileBlind struct {
	// 		optional bytes MatchName    = 1;			//比赛名称
	SmallBlind       *int64 `protobuf:"varint,1,opt,name=SmallBlind" json:"SmallBlind,omitempty"`
	BigBlind         *int64 `protobuf:"varint,2,opt,name=BigBlind" json:"BigBlind,omitempty"`
	Enable           *int32 `protobuf:"varint,3,opt,name=Enable" json:"Enable,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_AckMobileBlindList_MobileBlind) Reset() {
	*m = MatchList_AckMobileBlindList_MobileBlind{}
}
func (m *MatchList_AckMobileBlindList_MobileBlind) String() string { return proto.CompactTextString(m) }
func (*MatchList_AckMobileBlindList_MobileBlind) ProtoMessage()    {}
func (*MatchList_AckMobileBlindList_MobileBlind) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{78, 0}
}

func (m *MatchList_AckMobileBlindList_MobileBlind) GetSmallBlind() int64 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *MatchList_AckMobileBlindList_MobileBlind) GetBigBlind() int64 {
	if m != nil && m.BigBlind != nil {
		return *m.BigBlind
	}
	return 0
}

func (m *MatchList_AckMobileBlindList_MobileBlind) GetEnable() int32 {
	if m != nil && m.Enable != nil {
		return *m.Enable
	}
	return 0
}

// (移动类型客户端)请求比赛列表
type MatchList_ReqMobileMatchList struct {
	Rolename         []byte `protobuf:"bytes,1,opt,name=rolename" json:"rolename,omitempty"`
	Coin             *int64 `protobuf:"varint,2,opt,name=coin" json:"coin,omitempty"`
	SmallBlind       *int64 `protobuf:"varint,3,opt,name=SmallBlind" json:"SmallBlind,omitempty"`
	BigBlind         *int64 `protobuf:"varint,4,opt,name=BigBlind" json:"BigBlind,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_ReqMobileMatchList) Reset()                    { *m = MatchList_ReqMobileMatchList{} }
func (m *MatchList_ReqMobileMatchList) String() string            { return proto.CompactTextString(m) }
func (*MatchList_ReqMobileMatchList) ProtoMessage()               {}
func (*MatchList_ReqMobileMatchList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *MatchList_ReqMobileMatchList) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

func (m *MatchList_ReqMobileMatchList) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *MatchList_ReqMobileMatchList) GetSmallBlind() int64 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *MatchList_ReqMobileMatchList) GetBigBlind() int64 {
	if m != nil && m.BigBlind != nil {
		return *m.BigBlind
	}
	return 0
}

// 应答
type MatchList_AckMobileMatchList struct {
	Mobilematchlist  []*MatchList_AckMobileMatchList_MobileMatch `protobuf:"bytes,1,rep,name=mobilematchlist" json:"mobilematchlist,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *MatchList_AckMobileMatchList) Reset()                    { *m = MatchList_AckMobileMatchList{} }
func (m *MatchList_AckMobileMatchList) String() string            { return proto.CompactTextString(m) }
func (*MatchList_AckMobileMatchList) ProtoMessage()               {}
func (*MatchList_AckMobileMatchList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *MatchList_AckMobileMatchList) GetMobilematchlist() []*MatchList_AckMobileMatchList_MobileMatch {
	if m != nil {
		return m.Mobilematchlist
	}
	return nil
}

type MatchList_AckMobileMatchList_MobileMatch struct {
	MatchID          []byte                   `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	MatchName        []byte                   `protobuf:"bytes,2,opt,name=MatchName" json:"MatchName,omitempty"`
	MatchMode        *int32                   `protobuf:"varint,3,opt,name=MatchMode" json:"MatchMode,omitempty"`
	MaxPlayer        *int32                   `protobuf:"varint,4,opt,name=MaxPlayer" json:"MaxPlayer,omitempty"`
	CurPlayer        *int32                   `protobuf:"varint,5,opt,name=CurPlayer" json:"CurPlayer,omitempty"`
	TableID          *int32                   `protobuf:"varint,6,opt,name=TableID" json:"TableID,omitempty"`
	BlindInfo        []*MatchList_BlindInfo   `protobuf:"bytes,7,rep,name=BlindInfo" json:"BlindInfo,omitempty"`
	PreChipInfo      []*MatchList_PreChipInfo `protobuf:"bytes,8,rep,name=PreChipInfo" json:"PreChipInfo,omitempty"`
	GameServerIP     *int32                   `protobuf:"varint,9,opt,name=GameServerIP" json:"GameServerIP,omitempty"`
	GameServerPort   *int32                   `protobuf:"varint,10,opt,name=GameServerPort" json:"GameServerPort,omitempty"`
	NField           *int32                   `protobuf:"varint,11,opt,name=nField" json:"nField,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *MatchList_AckMobileMatchList_MobileMatch) Reset() {
	*m = MatchList_AckMobileMatchList_MobileMatch{}
}
func (m *MatchList_AckMobileMatchList_MobileMatch) String() string { return proto.CompactTextString(m) }
func (*MatchList_AckMobileMatchList_MobileMatch) ProtoMessage()    {}
func (*MatchList_AckMobileMatchList_MobileMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{80, 0}
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetMatchName() []byte {
	if m != nil {
		return m.MatchName
	}
	return nil
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetMatchMode() int32 {
	if m != nil && m.MatchMode != nil {
		return *m.MatchMode
	}
	return 0
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetMaxPlayer() int32 {
	if m != nil && m.MaxPlayer != nil {
		return *m.MaxPlayer
	}
	return 0
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetCurPlayer() int32 {
	if m != nil && m.CurPlayer != nil {
		return *m.CurPlayer
	}
	return 0
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetTableID() int32 {
	if m != nil && m.TableID != nil {
		return *m.TableID
	}
	return 0
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetBlindInfo() []*MatchList_BlindInfo {
	if m != nil {
		return m.BlindInfo
	}
	return nil
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetPreChipInfo() []*MatchList_PreChipInfo {
	if m != nil {
		return m.PreChipInfo
	}
	return nil
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetGameServerIP() int32 {
	if m != nil && m.GameServerIP != nil {
		return *m.GameServerIP
	}
	return 0
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetGameServerPort() int32 {
	if m != nil && m.GameServerPort != nil {
		return *m.GameServerPort
	}
	return 0
}

func (m *MatchList_AckMobileMatchList_MobileMatch) GetNField() int32 {
	if m != nil && m.NField != nil {
		return *m.NField
	}
	return 0
}

// 根据证书登陆列表服
type MatchList_LoginSpe struct {
	Letter           []byte `protobuf:"bytes,1,opt,name=Letter" json:"Letter,omitempty"`
	LoginMode        *int32 `protobuf:"varint,2,opt,name=LoginMode" json:"LoginMode,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_LoginSpe) Reset()                    { *m = MatchList_LoginSpe{} }
func (m *MatchList_LoginSpe) String() string            { return proto.CompactTextString(m) }
func (*MatchList_LoginSpe) ProtoMessage()               {}
func (*MatchList_LoginSpe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *MatchList_LoginSpe) GetLetter() []byte {
	if m != nil {
		return m.Letter
	}
	return nil
}

func (m *MatchList_LoginSpe) GetLoginMode() int32 {
	if m != nil && m.LoginMode != nil {
		return *m.LoginMode
	}
	return 0
}

// 移动端请求朋友桌列表
type MatchList_FriendMatchListReq struct {
	NKey             *int32 `protobuf:"varint,1,opt,name=nKey" json:"nKey,omitempty"`
	NCurPage         *int32 `protobuf:"varint,2,opt,name=nCurPage" json:"nCurPage,omitempty"`
	NNeedPage        *int32 `protobuf:"varint,3,opt,name=nNeedPage" json:"nNeedPage,omitempty"`
	NRecord          *int32 `protobuf:"varint,4,opt,name=nRecord" json:"nRecord,omitempty"`
	Rolename         []byte `protobuf:"bytes,5,opt,name=rolename" json:"rolename,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_FriendMatchListReq) Reset()                    { *m = MatchList_FriendMatchListReq{} }
func (m *MatchList_FriendMatchListReq) String() string            { return proto.CompactTextString(m) }
func (*MatchList_FriendMatchListReq) ProtoMessage()               {}
func (*MatchList_FriendMatchListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *MatchList_FriendMatchListReq) GetNKey() int32 {
	if m != nil && m.NKey != nil {
		return *m.NKey
	}
	return 0
}

func (m *MatchList_FriendMatchListReq) GetNCurPage() int32 {
	if m != nil && m.NCurPage != nil {
		return *m.NCurPage
	}
	return 0
}

func (m *MatchList_FriendMatchListReq) GetNNeedPage() int32 {
	if m != nil && m.NNeedPage != nil {
		return *m.NNeedPage
	}
	return 0
}

func (m *MatchList_FriendMatchListReq) GetNRecord() int32 {
	if m != nil && m.NRecord != nil {
		return *m.NRecord
	}
	return 0
}

func (m *MatchList_FriendMatchListReq) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

// 应答
type MatchList_FriendMatchListAck struct {
	FriendMatchList  []*MatchList_FriendMatchListAck_FriendMatchInfo `protobuf:"bytes,1,rep,name=FriendMatchList" json:"FriendMatchList,omitempty"`
	NRecordNum       *int32                                          `protobuf:"varint,2,opt,name=nRecordNum" json:"nRecordNum,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *MatchList_FriendMatchListAck) Reset()                    { *m = MatchList_FriendMatchListAck{} }
func (m *MatchList_FriendMatchListAck) String() string            { return proto.CompactTextString(m) }
func (*MatchList_FriendMatchListAck) ProtoMessage()               {}
func (*MatchList_FriendMatchListAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *MatchList_FriendMatchListAck) GetFriendMatchList() []*MatchList_FriendMatchListAck_FriendMatchInfo {
	if m != nil {
		return m.FriendMatchList
	}
	return nil
}

func (m *MatchList_FriendMatchListAck) GetNRecordNum() int32 {
	if m != nil && m.NRecordNum != nil {
		return *m.NRecordNum
	}
	return 0
}

type MatchList_FriendMatchListAck_FriendMatchInfo struct {
	MatchID          []byte                   `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	MatchName        []byte                   `protobuf:"bytes,2,opt,name=MatchName" json:"MatchName,omitempty"`
	MaxPlayer        *int32                   `protobuf:"varint,3,opt,name=MaxPlayer" json:"MaxPlayer,omitempty"`
	CurPlayer        *int32                   `protobuf:"varint,4,opt,name=CurPlayer" json:"CurPlayer,omitempty"`
	TableID          *int32                   `protobuf:"varint,5,opt,name=TableID" json:"TableID,omitempty"`
	NBeLock          *int32                   `protobuf:"varint,6,opt,name=nBeLock" json:"nBeLock,omitempty"`
	BlindInfo        []*MatchList_BlindInfo   `protobuf:"bytes,7,rep,name=BlindInfo" json:"BlindInfo,omitempty"`
	PreChipInfo      []*MatchList_PreChipInfo `protobuf:"bytes,8,rep,name=PreChipInfo" json:"PreChipInfo,omitempty"`
	GameServerIP     *int32                   `protobuf:"varint,9,opt,name=GameServerIP" json:"GameServerIP,omitempty"`
	GameServerPort   *int32                   `protobuf:"varint,10,opt,name=GameServerPort" json:"GameServerPort,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) Reset() {
	*m = MatchList_FriendMatchListAck_FriendMatchInfo{}
}
func (m *MatchList_FriendMatchListAck_FriendMatchInfo) String() string {
	return proto.CompactTextString(m)
}
func (*MatchList_FriendMatchListAck_FriendMatchInfo) ProtoMessage() {}
func (*MatchList_FriendMatchListAck_FriendMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{83, 0}
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetMatchName() []byte {
	if m != nil {
		return m.MatchName
	}
	return nil
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetMaxPlayer() int32 {
	if m != nil && m.MaxPlayer != nil {
		return *m.MaxPlayer
	}
	return 0
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetCurPlayer() int32 {
	if m != nil && m.CurPlayer != nil {
		return *m.CurPlayer
	}
	return 0
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetTableID() int32 {
	if m != nil && m.TableID != nil {
		return *m.TableID
	}
	return 0
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetNBeLock() int32 {
	if m != nil && m.NBeLock != nil {
		return *m.NBeLock
	}
	return 0
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetBlindInfo() []*MatchList_BlindInfo {
	if m != nil {
		return m.BlindInfo
	}
	return nil
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetPreChipInfo() []*MatchList_PreChipInfo {
	if m != nil {
		return m.PreChipInfo
	}
	return nil
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetGameServerIP() int32 {
	if m != nil && m.GameServerIP != nil {
		return *m.GameServerIP
	}
	return 0
}

func (m *MatchList_FriendMatchListAck_FriendMatchInfo) GetGameServerPort() int32 {
	if m != nil && m.GameServerPort != nil {
		return *m.GameServerPort
	}
	return 0
}

// 移动端定时请求朋友桌信息
type MatchList_ReqFriendMatchInfoInTime struct {
	NKey             *int32 `protobuf:"varint,1,opt,name=nKey" json:"nKey,omitempty"`
	NCurPage         *int32 `protobuf:"varint,2,opt,name=nCurPage" json:"nCurPage,omitempty"`
	NNeedPage        *int32 `protobuf:"varint,3,opt,name=nNeedPage" json:"nNeedPage,omitempty"`
	NRecord          *int32 `protobuf:"varint,4,opt,name=nRecord" json:"nRecord,omitempty"`
	Rolename         []byte `protobuf:"bytes,5,opt,name=rolename" json:"rolename,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_ReqFriendMatchInfoInTime) Reset()         { *m = MatchList_ReqFriendMatchInfoInTime{} }
func (m *MatchList_ReqFriendMatchInfoInTime) String() string { return proto.CompactTextString(m) }
func (*MatchList_ReqFriendMatchInfoInTime) ProtoMessage()    {}
func (*MatchList_ReqFriendMatchInfoInTime) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{84}
}

func (m *MatchList_ReqFriendMatchInfoInTime) GetNKey() int32 {
	if m != nil && m.NKey != nil {
		return *m.NKey
	}
	return 0
}

func (m *MatchList_ReqFriendMatchInfoInTime) GetNCurPage() int32 {
	if m != nil && m.NCurPage != nil {
		return *m.NCurPage
	}
	return 0
}

func (m *MatchList_ReqFriendMatchInfoInTime) GetNNeedPage() int32 {
	if m != nil && m.NNeedPage != nil {
		return *m.NNeedPage
	}
	return 0
}

func (m *MatchList_ReqFriendMatchInfoInTime) GetNRecord() int32 {
	if m != nil && m.NRecord != nil {
		return *m.NRecord
	}
	return 0
}

func (m *MatchList_ReqFriendMatchInfoInTime) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

// 应答
type MatchList_AckFriendMatchInfoInTime struct {
	FriendMatchList  []*MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime `protobuf:"bytes,1,rep,name=FriendMatchList" json:"FriendMatchList,omitempty"`
	XXX_unrecognized []byte                                                      `json:"-"`
}

func (m *MatchList_AckFriendMatchInfoInTime) Reset()         { *m = MatchList_AckFriendMatchInfoInTime{} }
func (m *MatchList_AckFriendMatchInfoInTime) String() string { return proto.CompactTextString(m) }
func (*MatchList_AckFriendMatchInfoInTime) ProtoMessage()    {}
func (*MatchList_AckFriendMatchInfoInTime) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{85}
}

func (m *MatchList_AckFriendMatchInfoInTime) GetFriendMatchList() []*MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime {
	if m != nil {
		return m.FriendMatchList
	}
	return nil
}

type MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	CurPlayer        *int32 `protobuf:"varint,2,opt,name=CurPlayer" json:"CurPlayer,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime) Reset() {
	*m = MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime{}
}
func (m *MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime) String() string {
	return proto.CompactTextString(m)
}
func (*MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime) ProtoMessage() {}
func (*MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{85, 0}
}

func (m *MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime) GetCurPlayer() int32 {
	if m != nil && m.CurPlayer != nil {
		return *m.CurPlayer
	}
	return 0
}

func init() {
	proto.RegisterType((*MatchList_Login)(nil), "bbproto.MatchList_Login")
	proto.RegisterType((*MatchList_AckLogin)(nil), "bbproto.MatchList_AckLogin")
	proto.RegisterType((*OGREQUserAuth)(nil), "bbproto.OGREQUserAuth")
	proto.RegisterType((*OGACKUserAuth)(nil), "bbproto.OGACKUserAuth")
	proto.RegisterType((*MatchList_SendPlayerCount)(nil), "bbproto.MatchList_SendPlayerCount")
	proto.RegisterType((*MatchList_CFUserName)(nil), "bbproto.MatchList_CFUserName")
	proto.RegisterType((*MatchList_SearchMatch)(nil), "bbproto.MatchList_SearchMatch")
	proto.RegisterType((*MatchList_CGZEnterLimit)(nil), "bbproto.MatchList_CGZEnterLimit")
	proto.RegisterType((*MatchList_CGZEnterLimitInfo)(nil), "bbproto.MatchList_CGZEnterLimitInfo")
	proto.RegisterType((*MatchList_ReqEnterNoviceMatch)(nil), "bbproto.MatchList_ReqEnterNoviceMatch")
	proto.RegisterType((*MatchList_AckEnterNoviceMatch)(nil), "bbproto.MatchList_AckEnterNoviceMatch")
	proto.RegisterType((*Match_ReqNoviceOnLinePlyCnt)(nil), "bbproto.Match_ReqNoviceOnLinePlyCnt")
	proto.RegisterType((*Match_AckNoviceOnLinePlyCnt)(nil), "bbproto.Match_AckNoviceOnLinePlyCnt")
	proto.RegisterType((*MatchList_BlindInfo)(nil), "bbproto.MatchList_BlindInfo")
	proto.RegisterType((*MatchList_PreChipInfo)(nil), "bbproto.MatchList_PreChipInfo")
	proto.RegisterType((*MatchList_MatchData)(nil), "bbproto.MatchList_MatchData")
	proto.RegisterType((*MatchList_SearchResult)(nil), "bbproto.MatchList_SearchResult")
	proto.RegisterType((*MatchList_Reward)(nil), "bbproto.MatchList_Reward")
	proto.RegisterType((*MatchList_SendReward)(nil), "bbproto.MatchList_SendReward")
	proto.RegisterType((*MatchList_PlayerInfo)(nil), "bbproto.MatchList_PlayerInfo")
	proto.RegisterType((*MatchList_SendPlayerInfo)(nil), "bbproto.MatchList_SendPlayerInfo")
	proto.RegisterType((*MatchList_SendMatchChangeInfo)(nil), "bbproto.MatchList_SendMatchChangeInfo")
	proto.RegisterType((*MatchList_SendMatchCoinInfo)(nil), "bbproto.MatchList_SendMatchCoinInfo")
	proto.RegisterType((*MatchList_TableInfo)(nil), "bbproto.MatchList_TableInfo")
	proto.RegisterType((*MatchList_SendTableInfo)(nil), "bbproto.MatchList_SendTableInfo")
	proto.RegisterType((*MatchList_EnterMatch)(nil), "bbproto.MatchList_EnterMatch")
	proto.RegisterType((*MatchList_AckEnterMatch)(nil), "bbproto.MatchList_AckEnterMatch")
	proto.RegisterType((*MatchList_LeaveMatch)(nil), "bbproto.MatchList_LeaveMatch")
	proto.RegisterType((*MatchList_SignMatch)(nil), "bbproto.MatchList_SignMatch")
	proto.RegisterType((*MatchList_AckSignMatch)(nil), "bbproto.MatchList_AckSignMatch")
	proto.RegisterType((*MatchList_ReportPlayer)(nil), "bbproto.MatchList_ReportPlayer")
	proto.RegisterType((*MatchList_NotifyStartMatch)(nil), "bbproto.MatchList_NotifyStartMatch")
	proto.RegisterType((*MatchList_MatchChangeInfo)(nil), "bbproto.MatchList_MatchChangeInfo")
	proto.RegisterType((*MatchList_NotifyMatchPlayer)(nil), "bbproto.MatchList_NotifyMatchPlayer")
	proto.RegisterType((*MatchList_GetUserInfo)(nil), "bbproto.MatchList_GetUserInfo")
	proto.RegisterType((*MatchList_AckGetUserInfo)(nil), "bbproto.MatchList_AckGetUserInfo")
	proto.RegisterType((*MatchList_SendSignInfo)(nil), "bbproto.MatchList_SendSignInfo")
	proto.RegisterType((*MatchList_SendEnterSignedMatch)(nil), "bbproto.MatchList_SendEnterSignedMatch")
	proto.RegisterType((*MatchList_WatchMatch)(nil), "bbproto.MatchList_WatchMatch")
	proto.RegisterType((*MatchList_NotifyMatchStatus)(nil), "bbproto.MatchList_NotifyMatchStatus")
	proto.RegisterType((*MatchList_NewMatch)(nil), "bbproto.MatchList_NewMatch")
	proto.RegisterType((*MatchList_SendServerTime)(nil), "bbproto.MatchList_SendServerTime")
	proto.RegisterType((*MatchList_SendOnLineCount)(nil), "bbproto.MatchList_SendOnLineCount")
	proto.RegisterType((*MatchList_GetUserCoinInfo)(nil), "bbproto.MatchList_GetUserCoinInfo")
	proto.RegisterType((*MatchList_AckGetUserCoinInfo)(nil), "bbproto.MatchList_AckGetUserCoinInfo")
	proto.RegisterType((*MatchList_NewSearchMatch)(nil), "bbproto.MatchList_NewSearchMatch")
	proto.RegisterType((*MatchList_NewNotifyMatchPlayer)(nil), "bbproto.MatchList_NewNotifyMatchPlayer")
	proto.RegisterType((*MatchList_NewAddNewMatch)(nil), "bbproto.MatchList_NewAddNewMatch")
	proto.RegisterType((*MatchList_BroadCastMsg)(nil), "bbproto.MatchList_BroadCastMsg")
	proto.RegisterType((*MatchList_GetBoradcastData)(nil), "bbproto.MatchList_GetBoradcastData")
	proto.RegisterType((*MatchList_SvrInfo)(nil), "bbproto.MatchList_SvrInfo")
	proto.RegisterType((*MatchList_SendMatchlistSvrInfo)(nil), "bbproto.MatchList_SendMatchlistSvrInfo")
	proto.RegisterType((*MatchList_GetRoleResult)(nil), "bbproto.MatchList_GetRoleResult")
	proto.RegisterType((*MatchList_CheckRoleName)(nil), "bbproto.MatchList_CheckRoleName")
	proto.RegisterType((*MatchList_CheckRoleNameResult)(nil), "bbproto.MatchList_CheckRoleNameResult")
	proto.RegisterType((*MatchList_CreateRole)(nil), "bbproto.MatchList_CreateRole")
	proto.RegisterType((*MatchList_CreateRoleResult)(nil), "bbproto.MatchList_CreateRoleResult")
	proto.RegisterType((*MatchList_DelMatch)(nil), "bbproto.MatchList_DelMatch")
	proto.RegisterType((*MatchList_GetGameUserInfo)(nil), "bbproto.MatchList_GetGameUserInfo")
	proto.RegisterType((*MatchList_GameUserInfo)(nil), "bbproto.MatchList_GameUserInfo")
	proto.RegisterType((*MatchList_AckGetGameUserInfo)(nil), "bbproto.MatchList_AckGetGameUserInfo")
	proto.RegisterType((*MatchList_MatchTopInfo)(nil), "bbproto.MatchList_MatchTopInfo")
	proto.RegisterType((*MatchList_ModifyConfig)(nil), "bbproto.MatchList_ModifyConfig")
	proto.RegisterType((*OGMatchList_MatchInfos)(nil), "bbproto.OGMatchList_MatchInfos")
	proto.RegisterType((*OGMatchList_ConfigInfo)(nil), "bbproto.OGMatchList_ConfigInfo")
	proto.RegisterType((*OGMatchList_GiveGift)(nil), "bbproto.OGMatchList_GiveGift")
	proto.RegisterType((*OGMatchList_GiveItem)(nil), "bbproto.OGMatchList_GiveItem")
	proto.RegisterType((*OGMatchList_UserCoinRnkListAck)(nil), "bbproto.OGMatchList_UserCoinRnkListAck")
	proto.RegisterType((*OGMatchList_UserCoinRnkListAck_UserCoinInfo)(nil), "bbproto.OGMatchList_UserCoinRnkListAck.UserCoinInfo")
	proto.RegisterType((*OGMatchList_BroadCast_News)(nil), "bbproto.OGMatchList_BroadCast_News")
	proto.RegisterType((*OGMatchList_BroadCast_News_NewsInfo)(nil), "bbproto.OGMatchList_BroadCast_News.NewsInfo")
	proto.RegisterType((*OGMatchList_Property)(nil), "bbproto.OGMatchList_Property")
	proto.RegisterType((*OGMatchList_Property_Property)(nil), "bbproto.OGMatchList_Property.Property")
	proto.RegisterType((*OGMatchList_AllInMatchListReq)(nil), "bbproto.OGMatchList_AllInMatchListReq")
	proto.RegisterType((*OGMatchList_AllInMatchListAck)(nil), "bbproto.OGMatchList_AllInMatchListAck")
	proto.RegisterType((*OGMatchList_UserLongCertToShortReq)(nil), "bbproto.OGMatchList_UserLongCertToShortReq")
	proto.RegisterType((*OGMatchList_UserLongCertToShortAck)(nil), "bbproto.OGMatchList_UserLongCertToShortAck")
	proto.RegisterType((*OGReqUserGetShortCert)(nil), "bbproto.OGReqUserGetShortCert")
	proto.RegisterType((*OGAckUserGetShortCert)(nil), "bbproto.OGAckUserGetShortCert")
	proto.RegisterType((*OGReqMatchStateInfo)(nil), "bbproto.OGReqMatchStateInfo")
	proto.RegisterType((*MatchList_ReqMobileBlindList)(nil), "bbproto.MatchList_ReqMobileBlindList")
	proto.RegisterType((*MatchList_AckMobileBlindList)(nil), "bbproto.MatchList_AckMobileBlindList")
	proto.RegisterType((*MatchList_AckMobileBlindList_MobileBlind)(nil), "bbproto.MatchList_AckMobileBlindList.MobileBlind")
	proto.RegisterType((*MatchList_ReqMobileMatchList)(nil), "bbproto.MatchList_ReqMobileMatchList")
	proto.RegisterType((*MatchList_AckMobileMatchList)(nil), "bbproto.MatchList_AckMobileMatchList")
	proto.RegisterType((*MatchList_AckMobileMatchList_MobileMatch)(nil), "bbproto.MatchList_AckMobileMatchList.MobileMatch")
	proto.RegisterType((*MatchList_LoginSpe)(nil), "bbproto.MatchList_LoginSpe")
	proto.RegisterType((*MatchList_FriendMatchListReq)(nil), "bbproto.MatchList_FriendMatchListReq")
	proto.RegisterType((*MatchList_FriendMatchListAck)(nil), "bbproto.MatchList_FriendMatchListAck")
	proto.RegisterType((*MatchList_FriendMatchListAck_FriendMatchInfo)(nil), "bbproto.MatchList_FriendMatchListAck.FriendMatchInfo")
	proto.RegisterType((*MatchList_ReqFriendMatchInfoInTime)(nil), "bbproto.MatchList_ReqFriendMatchInfoInTime")
	proto.RegisterType((*MatchList_AckFriendMatchInfoInTime)(nil), "bbproto.MatchList_AckFriendMatchInfoInTime")
	proto.RegisterType((*MatchList_AckFriendMatchInfoInTime_FriendMatchInfoInTime)(nil), "bbproto.MatchList_AckFriendMatchInfoInTime.FriendMatchInfoInTime")
}

var fileDescriptor0 = []byte{
	// 2820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x59, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0x07, 0x45, 0xd1, 0x92, 0xc6, 0x92, 0x65, 0x53, 0x96, 0x4d, 0xcb, 0x96, 0x63, 0x6c, 0xd1,
	0xd4, 0x46, 0x1c, 0xda, 0x6e, 0x12, 0xa4, 0x68, 0x91, 0x14, 0x12, 0x69, 0xcb, 0x8c, 0x25, 0x8a,
	0x26, 0x69, 0x3b, 0x49, 0xd1, 0x1a, 0x2b, 0xee, 0x88, 0xda, 0x72, 0xb9, 0xc3, 0xec, 0x2e, 0x65,
	0xa9, 0xe8, 0xb1, 0xc7, 0x7e, 0x20, 0x97, 0x16, 0x3d, 0xb4, 0xb9, 0xb6, 0xa7, 0x5e, 0x8a, 0xde,
	0x7a, 0xeb, 0x1f, 0xd6, 0x37, 0x6f, 0x3e, 0xf7, 0x83, 0xb2, 0x82, 0xb6, 0x40, 0x2f, 0x12, 0xe7,
	0xed, 0xcc, 0x9b, 0xf7, 0xf1, 0x7b, 0x1f, 0x33, 0x43, 0xbe, 0xb3, 0xbf, 0xd3, 0xa7, 0x27, 0x6e,
	0xdc, 0x61, 0x23, 0x1a, 0xed, 0xb9, 0xc9, 0xe0, 0x68, 0xd7, 0x8f, 0x93, 0x4e, 0xc4, 0x12, 0x36,
	0x60, 0x41, 0x7d, 0xc2, 0x7f, 0x54, 0x17, 0x0e, 0x0e, 0xf0, 0x87, 0xf3, 0xdb, 0x12, 0x59, 0xd5,
	0x93, 0x5e, 0xef, 0xb2, 0xa1, 0x1f, 0x56, 0x2f, 0x91, 0x0b, 0x89, 0x3f, 0x18, 0xd1, 0xa4, 0x56,
	0xba, 0x53, 0xba, 0xbb, 0x5c, 0xbd, 0x4c, 0x16, 0xa7, 0x31, 0x8d, 0x42, 0x77, 0x4c, 0x6b, 0x73,
	0x8a, 0x32, 0x71, 0xe3, 0xf8, 0x0d, 0x8b, 0xbc, 0x5a, 0x19, 0x29, 0xb0, 0x86, 0xcf, 0xf1, 0x27,
	0xb5, 0x79, 0x1c, 0x5f, 0x21, 0x4b, 0xc8, 0x6c, 0x8f, 0x79, 0xb4, 0x56, 0x01, 0x52, 0x85, 0x2f,
	0x1a, 0x8c, 0x7b, 0x89, 0x9b, 0x4c, 0xe3, 0xda, 0x05, 0xa4, 0x54, 0x09, 0x19, 0xb0, 0x31, 0x3d,
	0x8c, 0xd8, 0xd8, 0xf7, 0x6a, 0x0b, 0x9c, 0xe6, 0x34, 0x49, 0xd5, 0xc8, 0xb3, 0x35, 0x18, 0x69,
	0x91, 0x22, 0x1a, 0x4f, 0x03, 0x21, 0x52, 0xa5, 0xba, 0x4c, 0xe6, 0x07, 0x34, 0x4a, 0x8c, 0x38,
	0x11, 0x0b, 0x28, 0x0a, 0x88, 0xe2, 0x38, 0x5f, 0x97, 0xc8, 0xca, 0xfe, 0x4e, 0xf7, 0xf1, 0xf3,
	0x17, 0x20, 0xd4, 0xd6, 0x34, 0x39, 0xfa, 0xaf, 0x28, 0x75, 0x99, 0x54, 0x0e, 0x03, 0x77, 0x18,
	0x0b, 0x85, 0x7e, 0x58, 0x7a, 0x58, 0x5d, 0x27, 0x44, 0x70, 0xed, 0x9f, 0x4e, 0xa8, 0xd0, 0x8a,
	0x93, 0xd7, 0x2c, 0x55, 0x17, 0x24, 0xd1, 0xd9, 0xe7, 0x22, 0x6d, 0x35, 0x9e, 0xd9, 0x22, 0x9d,
	0xa1, 0x14, 0x7c, 0x1d, 0x0d, 0x3c, 0x37, 0x71, 0xa5, 0x30, 0xb6, 0xc0, 0x28, 0x8e, 0xf3, 0x90,
	0xdc, 0x30, 0xa6, 0xea, 0xd1, 0xd0, 0xeb, 0x04, 0xee, 0x29, 0x8d, 0x1a, 0x6c, 0x1a, 0x26, 0x20,
	0xc2, 0xc5, 0x09, 0x0e, 0x07, 0x7c, 0x28, 0x76, 0x70, 0x3e, 0x21, 0x57, 0xcd, 0x8a, 0xc6, 0x13,
	0x2e, 0x49, 0x1b, 0xf8, 0xa5, 0x78, 0x0b, 0xf3, 0xc0, 0xf2, 0xd8, 0x4c, 0x10, 0x22, 0x39, 0xbf,
	0x2a, 0x91, 0x75, 0x7b, 0x47, 0x37, 0x1a, 0x1c, 0xe1, 0x98, 0xbb, 0x1b, 0x7f, 0xa0, 0xbb, 0x85,
	0x36, 0x40, 0xea, 0xbb, 0x07, 0x01, 0x45, 0xd2, 0x9c, 0xf2, 0x37, 0x88, 0x18, 0xd2, 0x04, 0x69,
	0x65, 0x85, 0x8a, 0x9e, 0x3f, 0x14, 0x38, 0x99, 0x57, 0x0b, 0x1b, 0x01, 0x38, 0xc2, 0x82, 0x0e,
	0x58, 0x66, 0xcf, 0x8d, 0x47, 0xc2, 0xc0, 0xce, 0x84, 0x5c, 0xb7, 0xb4, 0xd8, 0xf9, 0xf2, 0x71,
	0x98, 0xd0, 0x68, 0xd7, 0x1f, 0xfb, 0x49, 0x75, 0x95, 0x2c, 0xe0, 0x8f, 0x56, 0x53, 0x4a, 0x01,
	0xec, 0xf7, 0xfc, 0x70, 0x3b, 0xf0, 0x43, 0x0f, 0x85, 0x28, 0x23, 0xc5, 0x3d, 0x11, 0x94, 0x32,
	0x52, 0x60, 0x11, 0xcc, 0x69, 0x30, 0x3f, 0x44, 0x09, 0x04, 0xc1, 0x3d, 0x41, 0x02, 0xdf, 0xbf,
	0xec, 0xbc, 0x24, 0x37, 0x67, 0xec, 0xd8, 0x0a, 0x0f, 0x59, 0xf5, 0x63, 0xb2, 0x82, 0x83, 0x26,
	0x78, 0x8b, 0x4f, 0x81, 0xbd, 0xcb, 0x77, 0x2f, 0x7e, 0xff, 0x4e, 0x5d, 0x46, 0x59, 0x7d, 0xc6,
	0x62, 0xa7, 0x47, 0x36, 0xcd, 0xa7, 0x2e, 0xfd, 0x0a, 0x3f, 0xb5, 0xd9, 0xb1, 0x3f, 0xa0, 0xc2,
	0xae, 0x60, 0xb1, 0x10, 0x89, 0x88, 0x2f, 0xad, 0x52, 0xda, 0x2f, 0xdc, 0x3c, 0x28, 0x2c, 0xaa,
	0xe3, 0xfc, 0xa6, 0x64, 0x73, 0x85, 0x10, 0xca, 0x71, 0x05, 0x68, 0x75, 0x69, 0x1c, 0x4c, 0x15,
	0xf0, 0x50, 0x5f, 0xf8, 0x00, 0x56, 0x13, 0x0c, 0x81, 0x80, 0xbe, 0xf3, 0x3d, 0xe9, 0x25, 0xd8,
	0x01, 0xdc, 0x9d, 0x48, 0x0f, 0x5d, 0x25, 0xcb, 0x3b, 0xb0, 0x7b, 0x8f, 0x46, 0xc7, 0x34, 0x6a,
	0x75, 0xa4, 0x93, 0xae, 0x91, 0x4b, 0x86, 0xda, 0x61, 0x00, 0x64, 0xe1, 0xae, 0x4d, 0x69, 0x3c,
	0xae, 0xa0, 0x90, 0x62, 0x3f, 0xdc, 0xf5, 0x43, 0xda, 0x09, 0x4e, 0x1b, 0x61, 0xe2, 0x7c, 0xa0,
	0x3e, 0x83, 0xa4, 0xf9, 0xcf, 0x7c, 0x2f, 0x7b, 0x2c, 0x81, 0x7c, 0x40, 0xd6, 0x8c, 0x8a, 0xe8,
	0x4b, 0x74, 0x04, 0x98, 0x0b, 0x07, 0x88, 0x1f, 0xa9, 0x1c, 0xd0, 0x7a, 0x63, 0x37, 0x08, 0x32,
	0x18, 0xd8, 0xf6, 0x87, 0x36, 0x06, 0x00, 0x74, 0x38, 0xec, 0xfb, 0x32, 0xbc, 0x2a, 0x4e, 0xc3,
	0x06, 0x7b, 0x27, 0xa2, 0x8d, 0x23, 0x7f, 0x82, 0xbb, 0x80, 0x48, 0x30, 0x1c, 0xc0, 0xd0, 0xde,
	0xc7, 0x50, 0x5f, 0xba, 0xc1, 0x54, 0xb8, 0xa6, 0xec, 0xfc, 0xab, 0x62, 0x4b, 0x8a, 0xbf, 0x38,
	0x4a, 0x74, 0xc0, 0xb4, 0x4d, 0xc8, 0xe5, 0xbc, 0x80, 0x73, 0x4e, 0x44, 0x50, 0x4b, 0x3f, 0x40,
	0x58, 0xe2, 0x1c, 0x99, 0x5b, 0xe6, 0x15, 0x20, 0xb8, 0xe1, 0x11, 0x22, 0x15, 0xe5, 0x50, 0x1e,
	0x54, 0x4f, 0xa8, 0xc8, 0x49, 0x65, 0xee, 0xf1, 0xc6, 0x91, 0x1b, 0x0d, 0x29, 0xa6, 0xa3, 0x72,
	0x75, 0x85, 0x54, 0xba, 0xf4, 0x60, 0x7a, 0x5a, 0x5b, 0x54, 0x6c, 0x9b, 0x6c, 0x0a, 0x0e, 0x07,
	0xbe, 0x83, 0x51, 0x6d, 0x49, 0x1b, 0x6e, 0x3a, 0xa1, 0x91, 0xa0, 0x11, 0xa4, 0xc1, 0xba, 0xfe,
	0x34, 0x3a, 0x60, 0xb5, 0x8b, 0x6a, 0x5d, 0x6f, 0x1a, 0xc1, 0x1c, 0x41, 0x5c, 0x56, 0xe2, 0x3c,
	0x0b, 0xd9, 0x60, 0xc4, 0x00, 0x5f, 0x2b, 0x9a, 0x13, 0x88, 0x23, 0x35, 0xb9, 0xa4, 0xa2, 0xdc,
	0x64, 0x8c, 0xd5, 0x7c, 0xc6, 0xb8, 0x5c, 0x90, 0x31, 0xae, 0xe4, 0x32, 0x46, 0x35, 0x9f, 0x31,
	0xd6, 0x14, 0x09, 0xe4, 0x8e, 0x12, 0xf4, 0xe7, 0x55, 0x95, 0x40, 0x9b, 0x53, 0x37, 0x40, 0xca,
	0x3a, 0x4e, 0xba, 0x4e, 0x56, 0x71, 0x92, 0x85, 0x99, 0x6b, 0xf8, 0x61, 0x9d, 0xac, 0xa8, 0x1c,
	0x21, 0xc8, 0xd7, 0x15, 0x53, 0x03, 0x92, 0x1a, 0x92, 0x6e, 0x92, 0x35, 0x33, 0xad, 0xcf, 0x24,
	0x4c, 0x6a, 0x37, 0x14, 0x7f, 0xee, 0x40, 0x1b, 0x2b, 0x1b, 0xf8, 0xe1, 0x81, 0x64, 0xc4, 0xe1,
	0x54, 0xbb, 0x89, 0xc9, 0xe2, 0x56, 0x41, 0xb2, 0x30, 0xc0, 0xfe, 0x80, 0x5c, 0xb4, 0x10, 0x58,
	0xbb, 0x85, 0x4b, 0x6e, 0x17, 0x2c, 0xb1, 0x71, 0x0a, 0xc6, 0x6b, 0x44, 0x10, 0xb5, 0x14, 0xe5,
	0xdd, 0x54, 0xc8, 0x6f, 0x85, 0x7e, 0x82, 0x42, 0xde, 0x56, 0xc8, 0x87, 0xec, 0x27, 0x7d, 0xf3,
	0x8e, 0xb2, 0x70, 0xe3, 0x88, 0x0e, 0x46, 0xbd, 0xe9, 0xb8, 0x76, 0x07, 0x63, 0xa1, 0x45, 0xae,
	0x65, 0x13, 0x7f, 0x17, 0x4b, 0x17, 0x57, 0x45, 0xa3, 0x5a, 0xe6, 0xbd, 0x22, 0x55, 0xf4, 0x1c,
	0xe7, 0x39, 0xb9, 0x6c, 0xe7, 0xbc, 0x37, 0x6e, 0xe4, 0xf1, 0xf4, 0x62, 0x25, 0x38, 0x18, 0x75,
	0xdd, 0x70, 0x24, 0x8b, 0x06, 0x40, 0x4e, 0x04, 0x94, 0x08, 0x54, 0x50, 0x4a, 0x2c, 0x6a, 0x9b,
	0x42, 0x38, 0xb4, 0xcb, 0x1a, 0x2f, 0x84, 0x92, 0xed, 0x3d, 0x9e, 0xe7, 0xf8, 0x2f, 0x29, 0xd8,
	0x8d, 0x02, 0xc1, 0xe4, 0x54, 0x40, 0x72, 0x9f, 0x25, 0x6e, 0x20, 0xe7, 0xcf, 0x99, 0x3a, 0x20,
	0x22, 0x52, 0xb4, 0x15, 0x47, 0xf6, 0x46, 0xc2, 0x64, 0x68, 0x69, 0x3b, 0x25, 0x97, 0x52, 0x29,
	0x59, 0x30, 0x52, 0x1a, 0x95, 0x75, 0x10, 0x71, 0x9c, 0xcb, 0xf0, 0xcd, 0x94, 0xda, 0x0a, 0xee,
	0xf4, 0x33, 0x52, 0x2b, 0xaa, 0xed, 0xb8, 0xdb, 0x23, 0x0c, 0x0a, 0x39, 0x92, 0xaa, 0x6d, 0x16,
	0x61, 0xc1, 0x2c, 0xc9, 0xe6, 0x16, 0xe7, 0xaf, 0xa9, 0x22, 0xc1, 0x37, 0xc0, 0x11, 0x24, 0x89,
	0x70, 0x48, 0x95, 0x4e, 0xe0, 0x62, 0x11, 0x40, 0xdf, 0x26, 0x93, 0x42, 0x19, 0x68, 0xd3, 0x93,
	0xc4, 0x9a, 0x29, 0x8a, 0x2a, 0xe4, 0x47, 0x4e, 0xd7, 0xb3, 0x2b, 0xf9, 0xbc, 0x7b, 0x21, 0x5b,
	0x8d, 0x16, 0x50, 0x56, 0xd7, 0xae, 0xbe, 0x46, 0x54, 0x30, 0xaf, 0xd1, 0x4d, 0x54, 0xeb, 0x52,
	0xb6, 0x9e, 0x6b, 0x3f, 0x6e, 0x1d, 0x0f, 0x4d, 0x89, 0xb4, 0xb7, 0x10, 0x08, 0x82, 0x36, 0xd8,
	0x4a, 0xd3, 0xe8, 0x1d, 0xe4, 0x8d, 0xae, 0x0a, 0x0e, 0x94, 0x05, 0xc0, 0x55, 0x56, 0x8f, 0x25,
	0x01, 0x9a, 0x76, 0x47, 0xf9, 0xdc, 0xee, 0x38, 0xc9, 0x74, 0x1c, 0x52, 0x64, 0xd1, 0x71, 0xfc,
	0xc4, 0xee, 0x71, 0xb8, 0xce, 0x46, 0xa6, 0x07, 0x32, 0x4d, 0x5a, 0xde, 0x2f, 0x8a, 0x38, 0xb3,
	0x20, 0xe7, 0xfc, 0xef, 0xd9, 0x30, 0xc6, 0xee, 0x40, 0xf4, 0x05, 0xd6, 0x44, 0x44, 0xb1, 0xf3,
	0x99, 0x2d, 0x85, 0xea, 0x24, 0xc4, 0xdc, 0x4c, 0xdc, 0x97, 0xde, 0x1a, 0xf7, 0xa9, 0x4d, 0x77,
	0xa9, 0x7b, 0x4c, 0x67, 0x6c, 0xfa, 0xb9, 0xed, 0x0a, 0xcc, 0xf4, 0x85, 0xf3, 0x8a, 0xfb, 0x20,
	0x4c, 0x23, 0xa9, 0xce, 0x12, 0x29, 0xa2, 0xa2, 0xff, 0xb9, 0x64, 0xa7, 0x31, 0xd0, 0xe7, 0x3f,
	0xe0, 0xae, 0x02, 0x7c, 0x5e, 0xd5, 0xd3, 0xde, 0x80, 0x45, 0x54, 0xa2, 0xda, 0x74, 0xf6, 0x17,
	0x52, 0xc5, 0x0e, 0x57, 0x88, 0x0a, 0x0c, 0x50, 0x12, 0x27, 0x07, 0x01, 0xa5, 0x45, 0xd9, 0x67,
	0x5e, 0xb3, 0x33, 0xd3, 0x04, 0x9a, 0x28, 0x81, 0x1a, 0x08, 0xbd, 0x39, 0x68, 0xb4, 0x74, 0x7e,
	0xc4, 0xf6, 0x4a, 0x37, 0xd5, 0xa2, 0xe5, 0xb2, 0x84, 0x83, 0xfd, 0x65, 0x42, 0x17, 0x8a, 0x07,
	0x64, 0xc3, 0xf0, 0x6d, 0xb3, 0xc4, 0x3f, 0x3c, 0xc5, 0xc2, 0xa7, 0x75, 0x1f, 0xf3, 0x1f, 0xbe,
	0x67, 0x3a, 0x91, 0x44, 0xb6, 0x7f, 0x73, 0x85, 0x0d, 0x5f, 0x79, 0x46, 0xc3, 0x27, 0x76, 0xfb,
	0x5d, 0xc9, 0x3e, 0x98, 0x64, 0xf3, 0x4a, 0x6e, 0x37, 0xde, 0xe3, 0x9a, 0x3e, 0x67, 0x4e, 0x05,
	0x5a, 0x68, 0xb5, 0x0c, 0xe5, 0x7c, 0x4d, 0x9f, 0xcf, 0xd5, 0xf4, 0x4a, 0x51, 0x87, 0x24, 0x5a,
	0xd0, 0xbe, 0x9d, 0x41, 0x84, 0xfe, 0x38, 0x96, 0xc6, 0xfd, 0x48, 0xba, 0xc7, 0x8a, 0x28, 0x67,
	0x16, 0x96, 0x8d, 0x26, 0xce, 0x3d, 0xbb, 0x41, 0xdc, 0xa1, 0x09, 0xc7, 0x8b, 0x4a, 0x9d, 0xe9,
	0xe3, 0x94, 0xf3, 0x73, 0x3b, 0x9d, 0x03, 0xf0, 0xce, 0x9c, 0xcd, 0x1d, 0x3c, 0x64, 0x81, 0x67,
	0x8a, 0x87, 0x95, 0xba, 0x34, 0xd2, 0xe6, 0x75, 0xf5, 0xd6, 0xc8, 0x12, 0xa9, 0xe3, 0x5e, 0xba,
	0x56, 0x87, 0x1e, 0x37, 0x64, 0xde, 0xf4, 0x65, 0x10, 0xeb, 0x11, 0xb9, 0x9d, 0x9e, 0x8a, 0x01,
	0xce, 0xe7, 0x53, 0xaf, 0x18, 0x1b, 0xce, 0x0f, 0xec, 0x30, 0x7e, 0x85, 0x1d, 0xdc, 0xf9, 0x40,
	0x04, 0xfd, 0x74, 0xb1, 0x13, 0x84, 0xa7, 0xf2, 0x0c, 0xc0, 0x93, 0x48, 0x88, 0x85, 0x27, 0x05,
	0x93, 0xc7, 0xf6, 0xf5, 0x40, 0x9b, 0xbe, 0x29, 0x4c, 0x46, 0x6f, 0x6f, 0x42, 0xea, 0xd9, 0xf2,
	0x2a, 0x43, 0x08, 0x70, 0xc4, 0xf1, 0x18, 0xe3, 0x28, 0xf1, 0xb5, 0xff, 0x9a, 0xd9, 0xa3, 0xb6,
	0x38, 0x93, 0xe8, 0xa3, 0xb6, 0x35, 0x34, 0xc5, 0x12, 0x33, 0xb0, 0x55, 0x29, 0x9c, 0x6d, 0x9b,
	0x8b, 0x84, 0x80, 0x2e, 0x63, 0xe7, 0x3c, 0x83, 0xff, 0xa3, 0x44, 0x6e, 0x15, 0x41, 0x49, 0xf3,
	0xc9, 0xde, 0x2a, 0xe4, 0x2f, 0x3a, 0x00, 0x50, 0x3b, 0x1c, 0x5e, 0xe5, 0x14, 0xbc, 0xe6, 0x55,
	0x3d, 0xe7, 0x31, 0x6d, 0xe0, 0x84, 0x67, 0xaa, 0xe9, 0x29, 0x27, 0xbc, 0x88, 0x02, 0x8c, 0xa7,
	0x65, 0x49, 0xe3, 0x4c, 0x38, 0x6d, 0x41, 0xf9, 0xbb, 0x77, 0xc4, 0x26, 0x9c, 0xb0, 0x88, 0x04,
	0x40, 0x6a, 0x8c, 0x48, 0x5d, 0x42, 0x58, 0xbe, 0xb2, 0x4d, 0x0e, 0x9e, 0xb3, 0xaf, 0x0f, 0x80,
	0x9f, 0x44, 0xb1, 0x31, 0x20, 0xe4, 0x1c, 0xe9, 0x2f, 0xcf, 0xdd, 0xa5, 0xa1, 0x4c, 0x0c, 0x57,
	0x6c, 0x4f, 0x8b, 0xa6, 0x6c, 0xdb, 0x06, 0x31, 0x30, 0xce, 0xc7, 0x37, 0x48, 0x62, 0x73, 0x4e,
	0xf1, 0x10, 0x56, 0x7d, 0x3f, 0x23, 0xdc, 0x96, 0xe7, 0x69, 0x70, 0x5d, 0xc9, 0x56, 0xba, 0x65,
	0xe7, 0xc7, 0x76, 0x88, 0x6d, 0x47, 0xcc, 0xf5, 0x1a, 0x6e, 0x9c, 0xec, 0xc5, 0x43, 0x6e, 0xcd,
	0xc4, 0x74, 0xb2, 0xd7, 0xe5, 0xe5, 0x5a, 0xcb, 0xd3, 0xfd, 0xb4, 0x8a, 0x85, 0x8d, 0x14, 0x12,
	0xb6, 0x59, 0xe4, 0x7a, 0x03, 0xe0, 0x81, 0x87, 0xc3, 0x19, 0x4c, 0x9a, 0x19, 0x26, 0x9f, 0x90,
	0x2b, 0x16, 0x28, 0x8f, 0x45, 0x36, 0x99, 0x5d, 0x28, 0x4c, 0x51, 0xc0, 0x74, 0xea, 0xfc, 0x34,
	0x1b, 0xfc, 0x38, 0x0a, 0x60, 0xa4, 0x78, 0x65, 0xa1, 0xf4, 0x1e, 0x59, 0x88, 0xc5, 0x27, 0x60,
	0xc9, 0x83, 0x6c, 0xa3, 0x20, 0xc8, 0xe4, 0x62, 0x48, 0x43, 0xd7, 0x53, 0x2a, 0x76, 0x59, 0x40,
	0xe5, 0x99, 0x21, 0xc3, 0xd7, 0x79, 0x2f, 0x75, 0xa1, 0xc3, 0x95, 0xe4, 0x93, 0xd5, 0xcd, 0x94,
	0xbe, 0xda, 0x13, 0xb6, 0x7f, 0x60, 0x37, 0xae, 0xa9, 0xc9, 0x33, 0xb8, 0xdf, 0x4d, 0x5d, 0x7a,
	0xe1, 0x81, 0x88, 0xaf, 0xc8, 0xb1, 0x5e, 0x72, 0xee, 0xdb, 0x5e, 0x31, 0x33, 0x67, 0xf0, 0xfd,
	0xae, 0x9d, 0x8a, 0x9a, 0x34, 0x98, 0xd1, 0xce, 0xdc, 0xcf, 0x04, 0x3d, 0x0f, 0x2f, 0x9d, 0xfb,
	0x73, 0xb3, 0xdb, 0x36, 0xb2, 0x52, 0x53, 0xf3, 0x67, 0x0c, 0x80, 0xb5, 0xdd, 0xe5, 0x66, 0xd2,
	0x85, 0x08, 0x8e, 0x6f, 0x0a, 0xd2, 0xc5, 0x99, 0x12, 0x40, 0x3b, 0xbb, 0xa8, 0x3e, 0x4a, 0x2f,
	0xbf, 0x53, 0xe0, 0xe5, 0xac, 0x68, 0x4f, 0x02, 0x36, 0xe9, 0x82, 0xbd, 0x64, 0xa9, 0xae, 0x91,
	0xcb, 0x22, 0x8d, 0x40, 0xd4, 0x75, 0x68, 0xf4, 0x94, 0x4d, 0x65, 0x2b, 0x22, 0x7b, 0xf1, 0x0e,
	0x63, 0x81, 0x2c, 0x57, 0xfb, 0xb6, 0xc6, 0xf8, 0xab, 0xcf, 0x26, 0xc5, 0xa2, 0x41, 0x24, 0x86,
	0xf8, 0xd1, 0xa3, 0x27, 0x26, 0x1f, 0x70, 0x52, 0x83, 0x05, 0x4c, 0xe1, 0xfa, 0x0f, 0xa9, 0x2e,
	0x6f, 0x8f, 0x79, 0x90, 0x0d, 0x1a, 0x2c, 0x3c, 0xf4, 0x87, 0x79, 0x8e, 0xdc, 0x84, 0xd8, 0x37,
	0x19, 0x6e, 0x99, 0xe3, 0x0c, 0x76, 0x22, 0xd9, 0xb3, 0x8c, 0xba, 0xa9, 0x30, 0x07, 0x36, 0x4e,
	0x3a, 0xe8, 0xc0, 0x09, 0xff, 0x15, 0xbf, 0x3e, 0xd6, 0x07, 0x99, 0x89, 0x38, 0xfb, 0x8b, 0x9e,
	0xcf, 0xf9, 0x23, 0x48, 0xb6, 0xbf, 0x93, 0xd1, 0x96, 0xab, 0x1a, 0x17, 0xf6, 0x9f, 0xa1, 0x68,
	0xe1, 0x9b, 0xd2, 0xbf, 0xbc, 0x4f, 0xda, 0xa6, 0x43, 0x3f, 0xc4, 0x6e, 0xa7, 0xac, 0xd2, 0x75,
	0xf8, 0xd8, 0xba, 0xb5, 0x42, 0x4a, 0x2c, 0xa0, 0x1b, 0xcd, 0x96, 0x8c, 0xeb, 0xf9, 0xf4, 0x8b,
	0xa6, 0x38, 0x57, 0x0b, 0xd9, 0xfe, 0x92, 0x91, 0x4d, 0x58, 0x4c, 0xdd, 0x23, 0x84, 0x4f, 0x59,
	0x14, 0x8a, 0xe9, 0xe2, 0x8c, 0x75, 0x9b, 0x5c, 0x0b, 0x3b, 0x10, 0x0e, 0x34, 0xe4, 0x6a, 0xe0,
	0x51, 0xe6, 0x35, 0x97, 0x22, 0x96, 0xc2, 0x6e, 0x92, 0x75, 0xfb, 0x3b, 0x7e, 0x7a, 0xdd, 0x74,
	0x4f, 0xa5, 0xdc, 0x99, 0xe5, 0xe2, 0x33, 0xc7, 0x93, 0xd4, 0xe2, 0x26, 0x59, 0xd3, 0xdf, 0xf9,
	0x5d, 0x45, 0x9f, 0x59, 0x0d, 0xce, 0x3e, 0xb9, 0x6a, 0x4b, 0xba, 0xe3, 0x1f, 0xd3, 0x1d, 0xff,
	0x10, 0xaf, 0x0a, 0x07, 0xd3, 0x38, 0x61, 0xe3, 0x54, 0x94, 0x40, 0xd8, 0x0e, 0xe1, 0x6b, 0xcb,
	0x33, 0xb7, 0x6a, 0xe0, 0x14, 0x0a, 0x8b, 0xa2, 0x58, 0x06, 0xc9, 0xf3, 0x3c, 0xc3, 0x56, 0x42,
	0xc7, 0xbc, 0xc1, 0x15, 0x0c, 0x55, 0x86, 0x31, 0x2c, 0x7d, 0xf8, 0x6e, 0x5f, 0xd4, 0x65, 0x59,
	0xfe, 0xa9, 0x44, 0x6e, 0xdb, 0x3c, 0x55, 0x89, 0xee, 0x86, 0x23, 0x3e, 0x86, 0x40, 0xac, 0xb6,
	0xc8, 0x45, 0x5e, 0x98, 0x25, 0x45, 0xb6, 0x2d, 0x1f, 0xea, 0x58, 0x3b, 0x7b, 0x75, 0xdd, 0xae,
	0xf9, 0x1b, 0x0f, 0xc9, 0x72, 0xaa, 0x07, 0x00, 0x81, 0xe2, 0x8c, 0xcc, 0xe9, 0x64, 0xe1, 0xfc,
	0xbd, 0x44, 0x36, 0xec, 0x1d, 0x74, 0x11, 0xe3, 0xd5, 0x2f, 0xae, 0x7e, 0x0a, 0xb8, 0x82, 0xff,
	0x81, 0x11, 0xec, 0x7e, 0xa1, 0x60, 0xe9, 0x65, 0x75, 0xfe, 0x07, 0x05, 0x7a, 0x49, 0x16, 0xd5,
	0x6f, 0x84, 0x0f, 0xfc, 0x7e, 0x9d, 0xf8, 0x49, 0x40, 0x2d, 0x74, 0x73, 0xda, 0x14, 0xba, 0x05,
	0x6d, 0x43, 0x31, 0xcb, 0x9c, 0x62, 0x34, 0x89, 0x4d, 0x3c, 0x79, 0xb4, 0xf8, 0x65, 0xda, 0x53,
	0x9d, 0x88, 0x4d, 0xa0, 0x4f, 0x3b, 0x85, 0x0e, 0xbe, 0x32, 0xb1, 0x84, 0x7d, 0xb7, 0x50, 0x58,
	0x35, 0xbb, 0xae, 0x7e, 0x6c, 0xbc, 0x4f, 0x16, 0x35, 0x8b, 0xa2, 0x08, 0x04, 0xf8, 0x45, 0xa7,
	0x2f, 0x94, 0x8c, 0xce, 0x43, 0xb2, 0x69, 0xf3, 0xdb, 0x0a, 0x82, 0x56, 0xa8, 0x87, 0x5d, 0xfa,
	0x55, 0x3e, 0x9d, 0x9f, 0xb9, 0x82, 0x83, 0x20, 0xb5, 0x82, 0xb7, 0xe4, 0x1f, 0x12, 0x27, 0xeb,
	0xf9, 0x5d, 0x16, 0x0e, 0x1b, 0x20, 0x63, 0x9f, 0x41, 0x83, 0x15, 0xe1, 0x46, 0xe6, 0x65, 0x4a,
	0xec, 0xf3, 0xc5, 0x5b, 0x57, 0xf1, 0xcd, 0xb2, 0xf5, 0x9c, 0xc3, 0x84, 0x7f, 0x3b, 0xf3, 0x29,
	0xed, 0x73, 0xb2, 0xbe, 0xbf, 0x03, 0x7b, 0x72, 0x9e, 0x50, 0x3c, 0x90, 0x19, 0xe7, 0x7b, 0x8e,
	0x17, 0x35, 0x29, 0x65, 0x4b, 0xbd, 0x9f, 0xad, 0xa4, 0xde, 0xcf, 0x9c, 0x98, 0x73, 0x06, 0xb9,
	0x8a, 0x38, 0x17, 0xb5, 0xb0, 0xba, 0x0b, 0x5e, 0xd2, 0x92, 0xf3, 0xe9, 0xfa, 0x7d, 0x4c, 0x32,
	0x9f, 0x2f, 0x7a, 0x85, 0x53, 0x2f, 0x76, 0xce, 0xbb, 0x64, 0x0d, 0xd5, 0xd1, 0x47, 0x0f, 0x5a,
	0x5c, 0x88, 0x3f, 0xb5, 0xeb, 0x26, 0x9f, 0xcf, 0x0e, 0xfc, 0x80, 0x62, 0x11, 0xe0, 0xa4, 0x7c,
	0x63, 0x82, 0xcf, 0x77, 0x26, 0xc0, 0xfe, 0x96, 0x2d, 0xbc, 0x59, 0x06, 0x9f, 0x91, 0xd5, 0x31,
	0x92, 0x0e, 0x38, 0xc9, 0x02, 0xef, 0xa3, 0x82, 0x72, 0x9b, 0x5f, 0x5f, 0xb7, 0xc6, 0x1b, 0x0d,
	0x38, 0xf4, 0x9a, 0x61, 0xe6, 0xa2, 0xae, 0x94, 0xbb, 0xa8, 0x9b, 0x53, 0x97, 0x14, 0x8f, 0x43,
	0xbc, 0x87, 0x14, 0x75, 0xd3, 0x2b, 0xd4, 0x58, 0x93, 0xde, 0xa6, 0x71, 0x66, 0xd7, 0x72, 0x6e,
	0x57, 0xcc, 0xec, 0xce, 0xaf, 0xcb, 0x85, 0x76, 0x31, 0xdb, 0x68, 0xbb, 0x8c, 0x55, 0x3b, 0x7a,
	0x1e, 0xbb, 0x68, 0x52, 0xdd, 0x1a, 0x6f, 0x7c, 0x33, 0xa7, 0x0c, 0x33, 0xe3, 0x96, 0x27, 0xf5,
	0x0c, 0x33, 0x97, 0x22, 0x59, 0x6f, 0x94, 0xa9, 0x87, 0x18, 0xf3, 0x48, 0x39, 0x8d, 0x24, 0x49,
	0x3f, 0xba, 0xa8, 0x82, 0x7d, 0x21, 0x7f, 0xcb, 0xbf, 0xf0, 0xed, 0x6f, 0xf9, 0x17, 0xcf, 0x75,
	0xcb, 0x9f, 0xbd, 0x9b, 0x59, 0x9a, 0x71, 0x37, 0x43, 0xd4, 0x21, 0x20, 0x7c, 0xe2, 0x53, 0x38,
	0xfd, 0xe1, 0x0b, 0x8e, 0xf3, 0xb1, 0xdd, 0xc4, 0xe2, 0x5b, 0x7b, 0x6f, 0x42, 0xf9, 0xac, 0x5d,
	0x9a, 0xf0, 0x16, 0xa2, 0x94, 0x7f, 0xcd, 0x17, 0x87, 0x8f, 0xc4, 0x76, 0xe3, 0x93, 0xc8, 0x57,
	0xe7, 0x07, 0x95, 0x0a, 0x01, 0x1b, 0xe1, 0x33, 0x7a, 0x6a, 0x22, 0x38, 0xe4, 0xf6, 0x72, 0x87,
	0x76, 0xab, 0xd5, 0xa6, 0xd4, 0x43, 0x52, 0x59, 0x19, 0x30, 0xec, 0xd2, 0x01, 0x6f, 0x53, 0xf4,
	0xc3, 0x96, 0x46, 0x9c, 0xb8, 0x16, 0xff, 0x7d, 0xf9, 0x8c, 0x6d, 0x79, 0x8a, 0x6b, 0x93, 0xd5,
	0x0c, 0x55, 0xa2, 0xe7, 0xa3, 0x02, 0x33, 0xe6, 0xd7, 0xd7, 0x2d, 0x92, 0x2e, 0x5e, 0x42, 0xa6,
	0xb6, 0x3a, 0x77, 0x6d, 0x7c, 0x3d, 0x97, 0xda, 0x64, 0x66, 0xaf, 0x5a, 0x88, 0xac, 0x93, 0xec,
	0x95, 0x96, 0x81, 0xd1, 0x7c, 0x16, 0x46, 0x1a, 0x57, 0xd0, 0xf7, 0xed, 0xb2, 0xc1, 0xe8, 0xff,
	0x17, 0x57, 0xce, 0x2f, 0x88, 0x93, 0x4a, 0x1e, 0x19, 0xfb, 0xb4, 0xb0, 0x69, 0xfd, 0x1f, 0x81,
	0xe2, 0x9f, 0x25, 0x7b, 0x73, 0xf0, 0x62, 0xf1, 0xe6, 0x5f, 0xce, 0x82, 0xc6, 0x56, 0x71, 0x62,
	0x29, 0xe4, 0x52, 0x2f, 0xa4, 0x6e, 0xfc, 0x88, 0xac, 0x17, 0x6f, 0x5a, 0x84, 0x0b, 0xe3, 0x71,
	0xd4, 0x7a, 0x7b, 0xee, 0x69, 0xf9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x92, 0xfe, 0xc4, 0x13,
	0xb6, 0x23, 0x00, 0x00,
}
