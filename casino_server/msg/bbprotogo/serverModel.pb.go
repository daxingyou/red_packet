// Code generated by protoc-gen-go.
// source: serverModel.proto
// DO NOT EDIT!

package bbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from base.proto

// Ignoring public import of TerminalInfo from base.proto

// Ignoring public import of User from base.proto

// Ignoring public import of EProtoId from base.proto

// Ignoring public import of DDErrorCode from base.proto

// Ignoring public import of ZjhRoom from zhajinhua.proto

// Ignoring public import of ZjhBet from zhajinhua.proto

// Ignoring public import of ZjhLottery from zhajinhua.proto

// Ignoring public import of BroadcastBet from zhajinhua.proto

// Ignoring public import of ZjhPai from zhajinhua.proto

// Ignoring public import of Pai from zhajinhua.proto

// Ignoring public import of ZjhQueryNoSeatUser from zhajinhua.proto

// Ignoring public import of ZjhReqSeat from zhajinhua.proto

// Ignoring public import of ZjhMsg from zhajinhua.proto

// Ignoring public import of ZjhBroadcastBeginBet from zhajinhua.proto

// Ignoring public import of EPaiType from zhajinhua.proto

// Ignoring public import of ThRoom from thPoker.proto

// Ignoring public import of THRoomAddUserBroadcast from thPoker.proto

// Ignoring public import of THPoker from thPoker.proto

// Ignoring public import of THBet from thPoker.proto

// Ignoring public import of THBetBegin from thPoker.proto

// Ignoring public import of THBetBroadcast from thPoker.proto

// Ignoring public import of THUser from thPoker.proto

// Ignoring public import of THLottery from thPoker.proto

// Ignoring public import of ETHType from thPoker.proto

// Ignoring public import of ETHAction from thPoker.proto

// 押注的记录,针对每轮扎金花,只有一次押注记录
type TBetRecord struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Betzone          []int32 `protobuf:"varint,2,rep,name=betzone" json:"betzone,omitempty"`
	ZjhRoundNumber   *string `protobuf:"bytes,3,opt,name=ZjhRoundNumber" json:"ZjhRoundNumber,omitempty"`
	WinAmount        *int32  `protobuf:"varint,4,opt,name=winAmount" json:"winAmount,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TBetRecord) Reset()                    { *m = TBetRecord{} }
func (m *TBetRecord) String() string            { return proto.CompactTextString(m) }
func (*TBetRecord) ProtoMessage()               {}
func (*TBetRecord) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *TBetRecord) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *TBetRecord) GetBetzone() []int32 {
	if m != nil {
		return m.Betzone
	}
	return nil
}

func (m *TBetRecord) GetZjhRoundNumber() string {
	if m != nil && m.ZjhRoundNumber != nil {
		return *m.ZjhRoundNumber
	}
	return ""
}

func (m *TBetRecord) GetWinAmount() int32 {
	if m != nil && m.WinAmount != nil {
		return *m.WinAmount
	}
	return 0
}

// 每一轮扎金花的数据
type TZjhRound struct {
	Id               *uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BeginTime        *int64    `protobuf:"varint,2,opt,name=beginTime" json:"beginTime,omitempty"`
	BetEndTime       *int64    `protobuf:"varint,3,opt,name=betEndTime" json:"betEndTime,omitempty"`
	LotteryTime      *int64    `protobuf:"varint,4,opt,name=lotteryTime" json:"lotteryTime,omitempty"`
	EndTime          *int64    `protobuf:"varint,5,opt,name=endTime" json:"endTime,omitempty"`
	ZoneAmount       []int32   `protobuf:"varint,6,rep,name=zoneAmount" json:"zoneAmount,omitempty"`
	ZoneWinAmount    []int32   `protobuf:"varint,7,rep,name=zoneWinAmount" json:"zoneWinAmount,omitempty"`
	BankerUserId     *uint32   `protobuf:"varint,8,opt,name=BankerUserId" json:"BankerUserId,omitempty"`
	ZjhPaiList       []*ZjhPai `protobuf:"bytes,9,rep,name=ZjhPaiList" json:"ZjhPaiList,omitempty"`
	Number           *string   `protobuf:"bytes,10,opt,name=Number" json:"Number,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *TZjhRound) Reset()                    { *m = TZjhRound{} }
func (m *TZjhRound) String() string            { return proto.CompactTextString(m) }
func (*TZjhRound) ProtoMessage()               {}
func (*TZjhRound) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *TZjhRound) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TZjhRound) GetBeginTime() int64 {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return 0
}

func (m *TZjhRound) GetBetEndTime() int64 {
	if m != nil && m.BetEndTime != nil {
		return *m.BetEndTime
	}
	return 0
}

func (m *TZjhRound) GetLotteryTime() int64 {
	if m != nil && m.LotteryTime != nil {
		return *m.LotteryTime
	}
	return 0
}

func (m *TZjhRound) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *TZjhRound) GetZoneAmount() []int32 {
	if m != nil {
		return m.ZoneAmount
	}
	return nil
}

func (m *TZjhRound) GetZoneWinAmount() []int32 {
	if m != nil {
		return m.ZoneWinAmount
	}
	return nil
}

func (m *TZjhRound) GetBankerUserId() uint32 {
	if m != nil && m.BankerUserId != nil {
		return *m.BankerUserId
	}
	return 0
}

func (m *TZjhRound) GetZjhPaiList() []*ZjhPai {
	if m != nil {
		return m.ZjhPaiList
	}
	return nil
}

func (m *TZjhRound) GetNumber() string {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return ""
}

type TNotice struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NoticeType       *int32  `protobuf:"varint,2,opt,name=noticeType" json:"noticeType,omitempty"`
	NoticeTitle      *string `protobuf:"bytes,3,opt,name=noticeTitle" json:"noticeTitle,omitempty"`
	NoticeContent    *string `protobuf:"bytes,4,opt,name=noticeContent" json:"noticeContent,omitempty"`
	NoticeMemo       *string `protobuf:"bytes,5,opt,name=noticeMemo" json:"noticeMemo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TNotice) Reset()                    { *m = TNotice{} }
func (m *TNotice) String() string            { return proto.CompactTextString(m) }
func (*TNotice) ProtoMessage()               {}
func (*TNotice) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *TNotice) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TNotice) GetNoticeType() int32 {
	if m != nil && m.NoticeType != nil {
		return *m.NoticeType
	}
	return 0
}

func (m *TNotice) GetNoticeTitle() string {
	if m != nil && m.NoticeTitle != nil {
		return *m.NoticeTitle
	}
	return ""
}

func (m *TNotice) GetNoticeContent() string {
	if m != nil && m.NoticeContent != nil {
		return *m.NoticeContent
	}
	return ""
}

func (m *TNotice) GetNoticeMemo() string {
	if m != nil && m.NoticeMemo != nil {
		return *m.NoticeMemo
	}
	return ""
}

// 后台保存数据使用的mode,一般不传递给客户端,这个实体一般是保存在redis当中
// 当用程序崩溃的时候,可以用来恢复用户数据
type ThServerUser struct {
	Seat               *int32  `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	Status             *int32  `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty"`
	BreakStatus        *int32  `protobuf:"varint,3,opt,name=BreakStatus" json:"BreakStatus,omitempty"`
	HandCards          []*Pai  `protobuf:"bytes,4,rep,name=HandCards" json:"HandCards,omitempty"`
	WaiTime            *string `protobuf:"bytes,5,opt,name=waiTime" json:"waiTime,omitempty"`
	WaitUUID           *string `protobuf:"bytes,6,opt,name=waitUUID" json:"waitUUID,omitempty"`
	DeskId             *int32  `protobuf:"varint,7,opt,name=deskId" json:"deskId,omitempty"`
	TotalBet           *int64  `protobuf:"varint,8,opt,name=TotalBet" json:"TotalBet,omitempty"`
	TotalBet4CalcAllin *int64  `protobuf:"varint,9,opt,name=TotalBet4calcAllin" json:"TotalBet4calcAllin,omitempty"`
	WinAmount          *int64  `protobuf:"varint,10,opt,name=winAmount" json:"winAmount,omitempty"`
	TurnCoin           *int64  `protobuf:"varint,11,opt,name=TurnCoin" json:"TurnCoin,omitempty"`
	HandCoin           *int64  `protobuf:"varint,12,opt,name=HandCoin" json:"HandCoin,omitempty"`
	RoomCoin           *int64  `protobuf:"varint,13,opt,name=RoomCoin" json:"RoomCoin,omitempty"`
	WinAmountDetail    []int64 `protobuf:"varint,14,rep,name=winAmountDetail" json:"winAmountDetail,omitempty"`
	UserId             *uint32 `protobuf:"varint,15,opt,name=UserId" json:"UserId,omitempty"`
	GameNumber         *int32  `protobuf:"varint,16,opt,name=GameNumber" json:"GameNumber,omitempty"`
	IsBreak            *bool   `protobuf:"varint,17,opt,name=IsBreak" json:"IsBreak,omitempty"`
	IsLeave            *bool   `protobuf:"varint,18,opt,name=IsLeave" json:"IsLeave,omitempty"`
	CSGamingStatus     *bool   `protobuf:"varint,19,opt,name=CSGamingStatus" json:"CSGamingStatus,omitempty"`
	GameStatus         *int32  `protobuf:"varint,20,opt,name=GameStatus" json:"GameStatus,omitempty"`
	PreCoin            *int64  `protobuf:"varint,21,opt,name=PreCoin" json:"PreCoin,omitempty"`
	RebuyCount         *int32  `protobuf:"varint,22,opt,name=RebuyCount" json:"RebuyCount,omitempty"`
	LotteryCheck       *bool   `protobuf:"varint,23,opt,name=LotteryCheck" json:"LotteryCheck,omitempty"`
	TotalRoomCoin      *int64  `protobuf:"varint,24,opt,name=TotalRoomCoin" json:"TotalRoomCoin,omitempty"`
	IsShowCard         *bool   `protobuf:"varint,25,opt,name=IsShowCard" json:"IsShowCard,omitempty"`
	MatchId            *int32  `protobuf:"varint,26,opt,name=MatchId" json:"MatchId,omitempty"`
	CloseCheck         *int32  `protobuf:"varint,27,opt,name=CloseCheck" json:"CloseCheck,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *ThServerUser) Reset()                    { *m = ThServerUser{} }
func (m *ThServerUser) String() string            { return proto.CompactTextString(m) }
func (*ThServerUser) ProtoMessage()               {}
func (*ThServerUser) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *ThServerUser) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *ThServerUser) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *ThServerUser) GetBreakStatus() int32 {
	if m != nil && m.BreakStatus != nil {
		return *m.BreakStatus
	}
	return 0
}

func (m *ThServerUser) GetHandCards() []*Pai {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *ThServerUser) GetWaiTime() string {
	if m != nil && m.WaiTime != nil {
		return *m.WaiTime
	}
	return ""
}

func (m *ThServerUser) GetWaitUUID() string {
	if m != nil && m.WaitUUID != nil {
		return *m.WaitUUID
	}
	return ""
}

func (m *ThServerUser) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *ThServerUser) GetTotalBet() int64 {
	if m != nil && m.TotalBet != nil {
		return *m.TotalBet
	}
	return 0
}

func (m *ThServerUser) GetTotalBet4CalcAllin() int64 {
	if m != nil && m.TotalBet4CalcAllin != nil {
		return *m.TotalBet4CalcAllin
	}
	return 0
}

func (m *ThServerUser) GetWinAmount() int64 {
	if m != nil && m.WinAmount != nil {
		return *m.WinAmount
	}
	return 0
}

func (m *ThServerUser) GetTurnCoin() int64 {
	if m != nil && m.TurnCoin != nil {
		return *m.TurnCoin
	}
	return 0
}

func (m *ThServerUser) GetHandCoin() int64 {
	if m != nil && m.HandCoin != nil {
		return *m.HandCoin
	}
	return 0
}

func (m *ThServerUser) GetRoomCoin() int64 {
	if m != nil && m.RoomCoin != nil {
		return *m.RoomCoin
	}
	return 0
}

func (m *ThServerUser) GetWinAmountDetail() []int64 {
	if m != nil {
		return m.WinAmountDetail
	}
	return nil
}

func (m *ThServerUser) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ThServerUser) GetGameNumber() int32 {
	if m != nil && m.GameNumber != nil {
		return *m.GameNumber
	}
	return 0
}

func (m *ThServerUser) GetIsBreak() bool {
	if m != nil && m.IsBreak != nil {
		return *m.IsBreak
	}
	return false
}

func (m *ThServerUser) GetIsLeave() bool {
	if m != nil && m.IsLeave != nil {
		return *m.IsLeave
	}
	return false
}

func (m *ThServerUser) GetCSGamingStatus() bool {
	if m != nil && m.CSGamingStatus != nil {
		return *m.CSGamingStatus
	}
	return false
}

func (m *ThServerUser) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *ThServerUser) GetPreCoin() int64 {
	if m != nil && m.PreCoin != nil {
		return *m.PreCoin
	}
	return 0
}

func (m *ThServerUser) GetRebuyCount() int32 {
	if m != nil && m.RebuyCount != nil {
		return *m.RebuyCount
	}
	return 0
}

func (m *ThServerUser) GetLotteryCheck() bool {
	if m != nil && m.LotteryCheck != nil {
		return *m.LotteryCheck
	}
	return false
}

func (m *ThServerUser) GetTotalRoomCoin() int64 {
	if m != nil && m.TotalRoomCoin != nil {
		return *m.TotalRoomCoin
	}
	return 0
}

func (m *ThServerUser) GetIsShowCard() bool {
	if m != nil && m.IsShowCard != nil {
		return *m.IsShowCard
	}
	return false
}

func (m *ThServerUser) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *ThServerUser) GetCloseCheck() int32 {
	if m != nil && m.CloseCheck != nil {
		return *m.CloseCheck
	}
	return 0
}

// 保存用户的会话信息
type ThServerUserSession struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	GameStatus       *int32  `protobuf:"varint,2,opt,name=gameStatus" json:"gameStatus,omitempty"`
	GameType         *int32  `protobuf:"varint,3,opt,name=gameType" json:"gameType,omitempty"`
	DeskId           *int32  `protobuf:"varint,4,opt,name=deskId" json:"deskId,omitempty"`
	MatchId          *int32  `protobuf:"varint,5,opt,name=matchId" json:"matchId,omitempty"`
	RoomKey          *string `protobuf:"bytes,6,opt,name=roomKey" json:"roomKey,omitempty"`
	IsBreak          *bool   `protobuf:"varint,7,opt,name=isBreak" json:"isBreak,omitempty"`
	IsLeave          *bool   `protobuf:"varint,8,opt,name=isLeave" json:"isLeave,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ThServerUserSession) Reset()                    { *m = ThServerUserSession{} }
func (m *ThServerUserSession) String() string            { return proto.CompactTextString(m) }
func (*ThServerUserSession) ProtoMessage()               {}
func (*ThServerUserSession) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *ThServerUserSession) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ThServerUserSession) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *ThServerUserSession) GetGameType() int32 {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return 0
}

func (m *ThServerUserSession) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *ThServerUserSession) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *ThServerUserSession) GetRoomKey() string {
	if m != nil && m.RoomKey != nil {
		return *m.RoomKey
	}
	return ""
}

func (m *ThServerUserSession) GetIsBreak() bool {
	if m != nil && m.IsBreak != nil {
		return *m.IsBreak
	}
	return false
}

func (m *ThServerUserSession) GetIsLeave() bool {
	if m != nil && m.IsLeave != nil {
		return *m.IsLeave
	}
	return false
}

type ThServerAllInJackpot struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	Jackpopt         *int64  `protobuf:"varint,2,opt,name=Jackpopt" json:"Jackpopt,omitempty"`
	ThroundCount     *int32  `protobuf:"varint,3,opt,name=ThroundCount" json:"ThroundCount,omitempty"`
	AllInAmount      *int64  `protobuf:"varint,4,opt,name=AllInAmount" json:"AllInAmount,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ThServerAllInJackpot) Reset()                    { *m = ThServerAllInJackpot{} }
func (m *ThServerAllInJackpot) String() string            { return proto.CompactTextString(m) }
func (*ThServerAllInJackpot) ProtoMessage()               {}
func (*ThServerAllInJackpot) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *ThServerAllInJackpot) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ThServerAllInJackpot) GetJackpopt() int64 {
	if m != nil && m.Jackpopt != nil {
		return *m.Jackpopt
	}
	return 0
}

func (m *ThServerAllInJackpot) GetThroundCount() int32 {
	if m != nil && m.ThroundCount != nil {
		return *m.ThroundCount
	}
	return 0
}

func (m *ThServerAllInJackpot) GetAllInAmount() int64 {
	if m != nil && m.AllInAmount != nil {
		return *m.AllInAmount
	}
	return 0
}

// 服务端保存桌子的状态
type ThServerDesk struct {
	Id                   *int32  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	DeskOwner            *uint32 `protobuf:"varint,2,opt,name=deskOwner" json:"deskOwner,omitempty"`
	RoomKey              *string `protobuf:"bytes,3,opt,name=RoomKey" json:"RoomKey,omitempty"`
	DeskType             *int32  `protobuf:"varint,4,opt,name=DeskType" json:"DeskType,omitempty"`
	InitRoomCoin         *int64  `protobuf:"varint,5,opt,name=InitRoomCoin" json:"InitRoomCoin,omitempty"`
	JuCount              *int32  `protobuf:"varint,6,opt,name=JuCount" json:"JuCount,omitempty"`
	SmallBlindCoin       *int64  `protobuf:"varint,7,opt,name=SmallBlindCoin" json:"SmallBlindCoin,omitempty"`
	BigBlindCoin         *int64  `protobuf:"varint,8,opt,name=BigBlindCoin" json:"BigBlindCoin,omitempty"`
	Dealer               *uint32 `protobuf:"varint,9,opt,name=Dealer" json:"Dealer,omitempty"`
	BigBlind             *uint32 `protobuf:"varint,10,opt,name=BigBlind" json:"BigBlind,omitempty"`
	SmallBlind           *uint32 `protobuf:"varint,11,opt,name=SmallBlind" json:"SmallBlind,omitempty"`
	RaiseUserId          *uint32 `protobuf:"varint,12,opt,name=RaiseUserId" json:"RaiseUserId,omitempty"`
	NewRoundFirstBetUser *uint32 `protobuf:"varint,13,opt,name=NewRoundFirstBetUser" json:"NewRoundFirstBetUser,omitempty"`
	BetUserNow           *uint32 `protobuf:"varint,14,opt,name=BetUserNow" json:"BetUserNow,omitempty"`
	GameNumber           *int32  `protobuf:"varint,15,opt,name=GameNumber" json:"GameNumber,omitempty"`
	//    repeated int32	Users			    =16;	//座位号  //这里通过什么来存取比较好?,user放在thdesk中比较大
	PublicPai            []*Pai                  `protobuf:"bytes,17,rep,name=PublicPai" json:"PublicPai,omitempty"`
	UserCount            *int32                  `protobuf:"varint,18,opt,name=UserCount" json:"UserCount,omitempty"`
	UserCountOnline      *int32                  `protobuf:"varint,19,opt,name=UserCountOnline" json:"UserCountOnline,omitempty"`
	Status               *int32                  `protobuf:"varint,20,opt,name=Status" json:"Status,omitempty"`
	BetAmountNow         *int64                  `protobuf:"varint,21,opt,name=BetAmountNow" json:"BetAmountNow,omitempty"`
	RoundCount           *int32                  `protobuf:"varint,22,opt,name=RoundCount" json:"RoundCount,omitempty"`
	Jackpot              *int64                  `protobuf:"varint,23,opt,name=Jackpot" json:"Jackpot,omitempty"`
	EdgeJackpot          *int64                  `protobuf:"varint,24,opt,name=edgeJackpot" json:"edgeJackpot,omitempty"`
	MinRaise             *int64                  `protobuf:"varint,25,opt,name=MinRaise" json:"MinRaise,omitempty"`
	AllInJackpot         []*ThServerAllInJackpot `protobuf:"bytes,26,rep,name=AllInJackpot" json:"AllInJackpot,omitempty"`
	UserIds              []uint32                `protobuf:"varint,27,rep,name=userIds" json:"userIds,omitempty"`
	MatchId              *int32                  `protobuf:"varint,28,opt,name=MatchId" json:"MatchId,omitempty"`
	CreateFee            *int64                  `protobuf:"varint,29,opt,name=CreateFee" json:"CreateFee,omitempty"`
	GameType             *int32                  `protobuf:"varint,30,opt,name=GameType" json:"GameType,omitempty"`
	JuCountNow           *int32                  `protobuf:"varint,31,opt,name=JuCountNow" json:"JuCountNow,omitempty"`
	PreCoin              *int64                  `protobuf:"varint,32,opt,name=PreCoin" json:"PreCoin,omitempty"`
	BlindLevel           *int32                  `protobuf:"varint,33,opt,name=blindLevel" json:"blindLevel,omitempty"`
	BeginTime            *string                 `protobuf:"bytes,34,opt,name=beginTime" json:"beginTime,omitempty"`
	EndTime              *string                 `protobuf:"bytes,35,opt,name=endTime" json:"endTime,omitempty"`
	RebuyCountLimit      *int32                  `protobuf:"varint,36,opt,name=RebuyCountLimit" json:"RebuyCountLimit,omitempty"`
	RebuyBlindLevelLimit *int32                  `protobuf:"varint,37,opt,name=RebuyBlindLevelLimit" json:"RebuyBlindLevelLimit,omitempty"`
	SendFlop             *bool                   `protobuf:"varint,38,opt,name=SendFlop" json:"SendFlop,omitempty"`
	SendTurn             *bool                   `protobuf:"varint,39,opt,name=SendTurn" json:"SendTurn,omitempty"`
	SendRive             *bool                   `protobuf:"varint,40,opt,name=SendRive" json:"SendRive,omitempty"`
	LeaveUserIds         []uint32                `protobuf:"varint,41,rep,name=LeaveUserIds" json:"LeaveUserIds,omitempty"`
	XXX_unrecognized     []byte                  `json:"-"`
}

func (m *ThServerDesk) Reset()                    { *m = ThServerDesk{} }
func (m *ThServerDesk) String() string            { return proto.CompactTextString(m) }
func (*ThServerDesk) ProtoMessage()               {}
func (*ThServerDesk) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *ThServerDesk) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ThServerDesk) GetDeskOwner() uint32 {
	if m != nil && m.DeskOwner != nil {
		return *m.DeskOwner
	}
	return 0
}

func (m *ThServerDesk) GetRoomKey() string {
	if m != nil && m.RoomKey != nil {
		return *m.RoomKey
	}
	return ""
}

func (m *ThServerDesk) GetDeskType() int32 {
	if m != nil && m.DeskType != nil {
		return *m.DeskType
	}
	return 0
}

func (m *ThServerDesk) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *ThServerDesk) GetJuCount() int32 {
	if m != nil && m.JuCount != nil {
		return *m.JuCount
	}
	return 0
}

func (m *ThServerDesk) GetSmallBlindCoin() int64 {
	if m != nil && m.SmallBlindCoin != nil {
		return *m.SmallBlindCoin
	}
	return 0
}

func (m *ThServerDesk) GetBigBlindCoin() int64 {
	if m != nil && m.BigBlindCoin != nil {
		return *m.BigBlindCoin
	}
	return 0
}

func (m *ThServerDesk) GetDealer() uint32 {
	if m != nil && m.Dealer != nil {
		return *m.Dealer
	}
	return 0
}

func (m *ThServerDesk) GetBigBlind() uint32 {
	if m != nil && m.BigBlind != nil {
		return *m.BigBlind
	}
	return 0
}

func (m *ThServerDesk) GetSmallBlind() uint32 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *ThServerDesk) GetRaiseUserId() uint32 {
	if m != nil && m.RaiseUserId != nil {
		return *m.RaiseUserId
	}
	return 0
}

func (m *ThServerDesk) GetNewRoundFirstBetUser() uint32 {
	if m != nil && m.NewRoundFirstBetUser != nil {
		return *m.NewRoundFirstBetUser
	}
	return 0
}

func (m *ThServerDesk) GetBetUserNow() uint32 {
	if m != nil && m.BetUserNow != nil {
		return *m.BetUserNow
	}
	return 0
}

func (m *ThServerDesk) GetGameNumber() int32 {
	if m != nil && m.GameNumber != nil {
		return *m.GameNumber
	}
	return 0
}

func (m *ThServerDesk) GetPublicPai() []*Pai {
	if m != nil {
		return m.PublicPai
	}
	return nil
}

func (m *ThServerDesk) GetUserCount() int32 {
	if m != nil && m.UserCount != nil {
		return *m.UserCount
	}
	return 0
}

func (m *ThServerDesk) GetUserCountOnline() int32 {
	if m != nil && m.UserCountOnline != nil {
		return *m.UserCountOnline
	}
	return 0
}

func (m *ThServerDesk) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *ThServerDesk) GetBetAmountNow() int64 {
	if m != nil && m.BetAmountNow != nil {
		return *m.BetAmountNow
	}
	return 0
}

func (m *ThServerDesk) GetRoundCount() int32 {
	if m != nil && m.RoundCount != nil {
		return *m.RoundCount
	}
	return 0
}

func (m *ThServerDesk) GetJackpot() int64 {
	if m != nil && m.Jackpot != nil {
		return *m.Jackpot
	}
	return 0
}

func (m *ThServerDesk) GetEdgeJackpot() int64 {
	if m != nil && m.EdgeJackpot != nil {
		return *m.EdgeJackpot
	}
	return 0
}

func (m *ThServerDesk) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *ThServerDesk) GetAllInJackpot() []*ThServerAllInJackpot {
	if m != nil {
		return m.AllInJackpot
	}
	return nil
}

func (m *ThServerDesk) GetUserIds() []uint32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *ThServerDesk) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *ThServerDesk) GetCreateFee() int64 {
	if m != nil && m.CreateFee != nil {
		return *m.CreateFee
	}
	return 0
}

func (m *ThServerDesk) GetGameType() int32 {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return 0
}

func (m *ThServerDesk) GetJuCountNow() int32 {
	if m != nil && m.JuCountNow != nil {
		return *m.JuCountNow
	}
	return 0
}

func (m *ThServerDesk) GetPreCoin() int64 {
	if m != nil && m.PreCoin != nil {
		return *m.PreCoin
	}
	return 0
}

func (m *ThServerDesk) GetBlindLevel() int32 {
	if m != nil && m.BlindLevel != nil {
		return *m.BlindLevel
	}
	return 0
}

func (m *ThServerDesk) GetBeginTime() string {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return ""
}

func (m *ThServerDesk) GetEndTime() string {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return ""
}

func (m *ThServerDesk) GetRebuyCountLimit() int32 {
	if m != nil && m.RebuyCountLimit != nil {
		return *m.RebuyCountLimit
	}
	return 0
}

func (m *ThServerDesk) GetRebuyBlindLevelLimit() int32 {
	if m != nil && m.RebuyBlindLevelLimit != nil {
		return *m.RebuyBlindLevelLimit
	}
	return 0
}

func (m *ThServerDesk) GetSendFlop() bool {
	if m != nil && m.SendFlop != nil {
		return *m.SendFlop
	}
	return false
}

func (m *ThServerDesk) GetSendTurn() bool {
	if m != nil && m.SendTurn != nil {
		return *m.SendTurn
	}
	return false
}

func (m *ThServerDesk) GetSendRive() bool {
	if m != nil && m.SendRive != nil {
		return *m.SendRive
	}
	return false
}

func (m *ThServerDesk) GetLeaveUserIds() []uint32 {
	if m != nil {
		return m.LeaveUserIds
	}
	return nil
}

//
type CsThRankInfo struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	MatchId          *int32  `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	Balance          *int64  `protobuf:"varint,3,opt,name=balance" json:"balance,omitempty"`
	EndTime          *int64  `protobuf:"varint,4,opt,name=endTime" json:"endTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CsThRankInfo) Reset()                    { *m = CsThRankInfo{} }
func (m *CsThRankInfo) String() string            { return proto.CompactTextString(m) }
func (*CsThRankInfo) ProtoMessage()               {}
func (*CsThRankInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *CsThRankInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CsThRankInfo) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CsThRankInfo) GetBalance() int64 {
	if m != nil && m.Balance != nil {
		return *m.Balance
	}
	return 0
}

func (m *CsThRankInfo) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

type RUNNING_DESKKEYS struct {
	Desks            []string `protobuf:"bytes,1,rep,name=desks" json:"desks,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RUNNING_DESKKEYS) Reset()                    { *m = RUNNING_DESKKEYS{} }
func (m *RUNNING_DESKKEYS) String() string            { return proto.CompactTextString(m) }
func (*RUNNING_DESKKEYS) ProtoMessage()               {}
func (*RUNNING_DESKKEYS) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *RUNNING_DESKKEYS) GetDesks() []string {
	if m != nil {
		return m.Desks
	}
	return nil
}

func init() {
	proto.RegisterType((*TBetRecord)(nil), "bbproto.TBetRecord")
	proto.RegisterType((*TZjhRound)(nil), "bbproto.TZjhRound")
	proto.RegisterType((*TNotice)(nil), "bbproto.TNotice")
	proto.RegisterType((*ThServerUser)(nil), "bbproto.ThServerUser")
	proto.RegisterType((*ThServerUserSession)(nil), "bbproto.ThServerUserSession")
	proto.RegisterType((*ThServerAllInJackpot)(nil), "bbproto.ThServerAllInJackpot")
	proto.RegisterType((*ThServerDesk)(nil), "bbproto.ThServerDesk")
	proto.RegisterType((*CsThRankInfo)(nil), "bbproto.CsThRankInfo")
	proto.RegisterType((*RUNNING_DESKKEYS)(nil), "bbproto.RUNNING_DESKKEYS")
}

var fileDescriptor4 = []byte{
	// 1108 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x56, 0xdd, 0x72, 0x1a, 0x47,
	0x13, 0xfd, 0x60, 0xc1, 0x88, 0x31, 0x08, 0x69, 0x85, 0xe5, 0xfd, 0x14, 0x3b, 0x96, 0x71, 0x7e,
	0x94, 0x1b, 0x5d, 0x24, 0x79, 0x01, 0x83, 0x7e, 0x82, 0x25, 0x61, 0x02, 0xa8, 0xf2, 0x73, 0x93,
	0x1a, 0xa0, 0x23, 0xc6, 0x5a, 0x66, 0x54, 0xbb, 0x83, 0x28, 0xf9, 0x65, 0x52, 0x95, 0x37, 0xca,
	0x6d, 0x9e, 0x26, 0x3d, 0x3d, 0xd3, 0x40, 0x22, 0xdf, 0x49, 0x67, 0x67, 0x7b, 0xce, 0xe9, 0x3e,
	0xa7, 0x17, 0xb1, 0x9b, 0x43, 0x76, 0x0f, 0xd9, 0x95, 0x99, 0x42, 0x7a, 0x7c, 0x97, 0x19, 0x6b,
	0xe2, 0xca, 0x78, 0x4c, 0x7f, 0x1c, 0x88, 0xb1, 0xcc, 0xc1, 0x83, 0x07, 0x8d, 0x8f, 0x33, 0xf9,
	0x41, 0xe9, 0xd9, 0x42, 0x06, 0xa0, 0x6e, 0x67, 0x7d, 0x73, 0x0b, 0x99, 0xff, 0xb7, 0xf5, 0xb3,
	0x10, 0xa3, 0x36, 0xd8, 0x01, 0x4c, 0x4c, 0x36, 0x8d, 0xb7, 0xc5, 0x93, 0x05, 0x16, 0xee, 0x4e,
	0x93, 0xc2, 0x61, 0xe1, 0xa8, 0x1e, 0x37, 0x44, 0x65, 0x0c, 0xf6, 0xa3, 0xd1, 0x90, 0x14, 0x0f,
	0xa3, 0xa3, 0x72, 0xbc, 0x2f, 0xb6, 0x7f, 0xfd, 0x30, 0x1b, 0x98, 0x85, 0x9e, 0xf6, 0x16, 0xf3,
	0x31, 0x64, 0x49, 0x84, 0x07, 0xab, 0xf1, 0xae, 0xa8, 0x2e, 0x95, 0x7e, 0x3b, 0xc7, 0x07, 0x36,
	0x29, 0x21, 0x54, 0x6e, 0xfd, 0x5d, 0x10, 0xd5, 0x11, 0x1f, 0x8e, 0x85, 0x28, 0x2a, 0xae, 0x8a,
	0x87, 0xc7, 0x70, 0xa3, 0xf4, 0x48, 0xcd, 0x5d, 0xdd, 0xc2, 0x51, 0x14, 0xe3, 0x73, 0xbc, 0xe8,
	0x54, 0x4f, 0x09, 0x8b, 0x08, 0xdb, 0x13, 0x4f, 0x53, 0x63, 0x2d, 0x64, 0x0f, 0x04, 0x96, 0x08,
	0x44, 0x46, 0x10, 0x4e, 0x95, 0xf9, 0x4d, 0xc7, 0x2f, 0x5c, 0xfd, 0x84, 0x58, 0x3e, 0x13, 0x75,
	0x87, 0xfd, 0xb4, 0x62, 0x54, 0x21, 0xb8, 0x29, 0x6a, 0x6d, 0xa9, 0x51, 0xfb, 0xb5, 0xd7, 0xb8,
	0x45, 0x6c, 0xde, 0x08, 0x81, 0x2c, 0xfb, 0x52, 0x5d, 0xaa, 0xdc, 0x26, 0x55, 0x3c, 0xf9, 0xf4,
	0xdb, 0xc6, 0x71, 0xe8, 0xe5, 0xb1, 0x7f, 0xe4, 0x1a, 0x13, 0xf4, 0x0a, 0xa7, 0xb7, 0xa5, 0x44,
	0x65, 0xd4, 0x33, 0x56, 0x4d, 0x60, 0x43, 0x59, 0xd9, 0x91, 0xd1, 0x84, 0x8e, 0x1e, 0xee, 0xbc,
	0xb4, 0xb2, 0x93, 0x11, 0x30, 0x65, 0x53, 0x08, 0xfd, 0x42, 0x86, 0x1e, 0xec, 0x18, 0x6d, 0x21,
	0xf4, 0xac, 0xba, 0x7e, 0xff, 0x0a, 0xe6, 0x86, 0x04, 0x56, 0x5b, 0x7f, 0x96, 0x44, 0x6d, 0x34,
	0x1b, 0xd2, 0xb8, 0x1d, 0xf1, 0xb8, 0x26, 0x4a, 0x43, 0x90, 0x36, 0x5c, 0x89, 0xcc, 0x86, 0x56,
	0xda, 0x45, 0xbe, 0xbe, 0xae, 0x9d, 0x81, 0xbc, 0x0d, 0x60, 0x44, 0xe0, 0x2b, 0x51, 0xfd, 0x41,
	0xea, 0x69, 0x47, 0x66, 0xd3, 0x1c, 0xaf, 0x72, 0x12, 0x6b, 0x2b, 0x89, 0x4e, 0x1f, 0xb6, 0x75,
	0x29, 0xd5, 0xaa, 0xad, 0xd5, 0x78, 0x47, 0x6c, 0x21, 0x60, 0xaf, 0xaf, 0xbb, 0x27, 0xd8, 0x54,
	0x87, 0xe0, 0x45, 0x53, 0xc8, 0x6f, 0xb1, 0x6f, 0x15, 0xaa, 0x89, 0x27, 0x46, 0xc6, 0xca, 0x14,
	0xdd, 0x43, 0x9d, 0x8c, 0xe2, 0x03, 0x11, 0x33, 0xf2, 0xfd, 0x44, 0xa6, 0x93, 0xb7, 0x69, 0xaa,
	0x34, 0x76, 0xd4, 0x3d, 0xfb, 0x97, 0x41, 0x04, 0x41, 0xae, 0xc0, 0x22, 0xd3, 0x1d, 0x83, 0x87,
	0x9e, 0x32, 0x42, 0x34, 0x1d, 0x52, 0x63, 0x64, 0x60, 0xcc, 0x9c, 0x90, 0x3a, 0x21, 0xcf, 0x45,
	0x63, 0x55, 0xe8, 0x04, 0xac, 0x54, 0x69, 0xb2, 0x8d, 0x82, 0x22, 0xc7, 0x2f, 0xcc, 0xb5, 0x41,
	0x73, 0xc5, 0x5e, 0x9e, 0xcb, 0x39, 0x84, 0xb1, 0xed, 0x10, 0x67, 0x94, 0xd9, 0xcd, 0xa9, 0x3d,
	0xc9, 0x2e, 0x02, 0x5b, 0x1e, 0xb8, 0x04, 0x79, 0x0f, 0x49, 0x4c, 0x00, 0x1a, 0xbc, 0x33, 0xc4,
	0xf7, 0x94, 0xbe, 0x09, 0x1d, 0xdc, 0x23, 0x3c, 0x54, 0x0b, 0x58, 0x93, 0xab, 0xf5, 0x33, 0x20,
	0x6e, 0xcf, 0xd8, 0x8b, 0x03, 0x18, 0x2f, 0x1e, 0x3a, 0xa4, 0x72, 0x9f, 0x0e, 0xa1, 0xe9, 0x2e,
	0xbd, 0x8b, 0x3b, 0x33, 0x98, 0xdc, 0x26, 0xcf, 0xa9, 0x1c, 0xce, 0x9f, 0x5a, 0xb5, 0x12, 0x97,
	0x70, 0x81, 0x6e, 0x3e, 0x9c, 0x99, 0xa5, 0x9b, 0x54, 0xf2, 0x7f, 0xa6, 0x78, 0x25, 0xed, 0x64,
	0x86, 0xc2, 0x0e, 0xd8, 0x64, 0x9d, 0xd4, 0xe4, 0xe0, 0xeb, 0x7d, 0x46, 0x61, 0xfb, 0xa3, 0x20,
	0xf6, 0x36, 0x4d, 0x32, 0x84, 0x3c, 0x57, 0x46, 0x3f, 0x0a, 0x34, 0xbe, 0x7b, 0xb3, 0x96, 0x51,
	0xe4, 0x41, 0x3a, 0x8c, 0x2c, 0x1b, 0xb1, 0xa7, 0xc2, 0xa8, 0x4b, 0x2c, 0x74, 0x1e, 0x28, 0x94,
	0x19, 0xc8, 0x90, 0xf9, 0x05, 0x3c, 0x04, 0x73, 0x20, 0xa0, 0x42, 0x63, 0x2b, 0xcc, 0x5a, 0x85,
	0xc6, 0x3a, 0x73, 0x6c, 0xb5, 0x26, 0xa2, 0xc9, 0x04, 0xd1, 0x17, 0x5d, 0xfd, 0x4e, 0x4e, 0x6e,
	0xef, 0x8c, 0xdd, 0x18, 0x9b, 0x67, 0x88, 0x6c, 0xfc, 0xa3, 0x3b, 0x1b, 0x76, 0x43, 0xd3, 0xf9,
	0x3f, 0x73, 0x5b, 0xc4, 0xf7, 0x35, 0x62, 0x9f, 0x53, 0x9d, 0x8d, 0x9d, 0x13, 0xb5, 0xfe, 0x7a,
	0xb2, 0xce, 0xca, 0x09, 0x2a, 0x70, 0xe1, 0xec, 0x72, 0x38, 0xd1, 0x82, 0x4e, 0xd5, 0xfb, 0xa5,
	0x46, 0x3f, 0x14, 0x79, 0xbf, 0x0d, 0x82, 0x8e, 0x88, 0x6d, 0xef, 0xde, 0xa3, 0x5e, 0x94, 0x78,
	0x7e, 0x5d, 0xad, 0xec, 0x6a, 0x50, 0x65, 0x5e, 0x43, 0xef, 0x16, 0x9d, 0xb0, 0x72, 0x0a, 0x7e,
	0x31, 0x0e, 0xe7, 0x32, 0x4d, 0xdb, 0x68, 0x79, 0x6f, 0xe0, 0x0a, 0x93, 0x6f, 0xab, 0x9b, 0x35,
	0xea, 0x93, 0x82, 0xa2, 0x4f, 0x40, 0xa6, 0xc8, 0xa3, 0xca, 0xa2, 0xf9, 0x14, 0x85, 0x83, 0x06,
	0xb5, 0xae, 0x47, 0xf1, 0xa8, 0x3b, 0xc9, 0x03, 0xa9, 0x72, 0x08, 0xfd, 0xaa, 0x11, 0xf8, 0x42,
	0x34, 0x7b, 0xb0, 0xa4, 0x25, 0x7b, 0xa6, 0xb2, 0xdc, 0x62, 0xf8, 0xdc, 0x73, 0x4a, 0x0b, 0x95,
	0x09, 0x40, 0xcf, 0x2c, 0x31, 0x28, 0x8f, 0x83, 0xd1, 0xe0, 0x05, 0xd1, 0x5f, 0x8c, 0x53, 0x35,
	0xc1, 0x65, 0x80, 0xd1, 0x78, 0xbc, 0x20, 0xb0, 0x79, 0xae, 0x8a, 0x97, 0x1c, 0xd3, 0x3b, 0x98,
	0xc4, 0x15, 0xf4, 0x5e, 0x23, 0x4f, 0xa0, 0xac, 0x6c, 0xae, 0xa4, 0x26, 0xb7, 0x10, 0x49, 0xf8,
	0x41, 0x39, 0x1a, 0xeb, 0xb0, 0xac, 0x87, 0xba, 0xcf, 0xbe, 0x0a, 0xbe, 0xa0, 0x9c, 0xd0, 0x37,
	0x00, 0xa6, 0x37, 0xc0, 0x60, 0xc2, 0x4b, 0xe1, 0x4a, 0x69, 0x6a, 0x05, 0x65, 0x24, 0x8a, 0xbf,
	0x13, 0xb5, 0x4d, 0x53, 0x61, 0x50, 0x9c, 0x82, 0x97, 0x2b, 0x05, 0x9f, 0x74, 0x1e, 0x5e, 0xe6,
	0xb3, 0x91, 0x63, 0x88, 0x22, 0xef, 0x06, 0x4e, 0xda, 0x0b, 0x76, 0x4c, 0x07, 0x3d, 0x6d, 0xe1,
	0x0c, 0x20, 0x79, 0xc9, 0x77, 0x9f, 0x73, 0x58, 0x3e, 0xe7, 0x38, 0x06, 0x2b, 0x38, 0x6d, 0xaf,
	0xfe, 0xbb, 0x19, 0x0e, 0x57, 0xdf, 0x37, 0x37, 0xc9, 0x4b, 0xb8, 0x87, 0x34, 0x79, 0xcd, 0xd5,
	0xd7, 0x9f, 0xc1, 0x16, 0xc7, 0x88, 0xbf, 0x6e, 0x6f, 0x08, 0xc0, 0x1e, 0xaf, 0x37, 0xca, 0xa5,
	0x9a, 0x2b, 0x9b, 0x7c, 0x41, 0x2f, 0xe3, 0xd8, 0xe9, 0x41, 0x7b, 0x55, 0xd5, 0x3f, 0xfd, 0x92,
	0x23, 0x3d, 0xc4, 0x42, 0x67, 0xa9, 0xb9, 0x4b, 0xbe, 0xa2, 0x3c, 0x06, 0xc4, 0x2d, 0xdc, 0xe4,
	0xeb, 0x4d, 0x64, 0xa0, 0x30, 0xa2, 0x47, 0x84, 0xb8, 0x55, 0xe5, 0x12, 0x7b, 0x1d, 0xba, 0xf2,
	0x8d, 0xeb, 0x4a, 0xeb, 0x47, 0x51, 0xeb, 0xe4, 0xa3, 0xd9, 0x00, 0xbf, 0x9c, 0x5d, 0xfd, 0xbb,
	0xf9, 0xd4, 0x6f, 0x04, 0x5e, 0x0e, 0x45, 0x16, 0x3f, 0x96, 0xa9, 0xd4, 0x13, 0xfe, 0x90, 0x6f,
	0xa8, 0xf2, 0x31, 0x7d, 0x2d, 0x76, 0x06, 0xd7, 0xbd, 0x5e, 0xb7, 0x77, 0xfe, 0xdb, 0xc9, 0xe9,
	0xf0, 0xe2, 0xe2, 0xf4, 0x97, 0x61, 0x5c, 0x17, 0x65, 0x97, 0xce, 0x1c, 0xab, 0x46, 0x47, 0xd5,
	0xfe, 0xff, 0xfa, 0x85, 0x7e, 0xf1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x10, 0xcc, 0x6c,
	0xe6, 0x08, 0x00, 0x00,
}
