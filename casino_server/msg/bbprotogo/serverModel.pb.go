// Code generated by protoc-gen-go.
// source: serverModel.proto
// DO NOT EDIT!

package bbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from base.proto

// Ignoring public import of TerminalInfo from base.proto

// Ignoring public import of EProtoId from base.proto

// Ignoring public import of ZjhRoom from zhajinhua.proto

// Ignoring public import of ZjhBet from zhajinhua.proto

// Ignoring public import of ZjhLottery from zhajinhua.proto

// Ignoring public import of BroadcastBet from zhajinhua.proto

// Ignoring public import of ZjhPai from zhajinhua.proto

// Ignoring public import of Pai from zhajinhua.proto

// Ignoring public import of ZjhQueryNoSeatUser from zhajinhua.proto

// Ignoring public import of ZjhReqSeat from zhajinhua.proto

// Ignoring public import of ZjhMsg from zhajinhua.proto

// Ignoring public import of ZjhBroadcastBeginBet from zhajinhua.proto

// Ignoring public import of EPaiType from zhajinhua.proto

// 押注的记录,针对每轮扎金花,只有一次押注记录
type TBetRecord struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Betzone          []int32 `protobuf:"varint,2,rep,name=betzone" json:"betzone,omitempty"`
	ZjhRoundNumber   *string `protobuf:"bytes,3,opt,name=ZjhRoundNumber" json:"ZjhRoundNumber,omitempty"`
	WinAmount        *int32  `protobuf:"varint,4,opt,name=winAmount" json:"winAmount,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TBetRecord) Reset()                    { *m = TBetRecord{} }
func (m *TBetRecord) String() string            { return proto.CompactTextString(m) }
func (*TBetRecord) ProtoMessage()               {}
func (*TBetRecord) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *TBetRecord) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *TBetRecord) GetBetzone() []int32 {
	if m != nil {
		return m.Betzone
	}
	return nil
}

func (m *TBetRecord) GetZjhRoundNumber() string {
	if m != nil && m.ZjhRoundNumber != nil {
		return *m.ZjhRoundNumber
	}
	return ""
}

func (m *TBetRecord) GetWinAmount() int32 {
	if m != nil && m.WinAmount != nil {
		return *m.WinAmount
	}
	return 0
}

// 每一轮扎金花的数据
type TZjhRound struct {
	Id               *uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BeginTime        *int64    `protobuf:"varint,2,opt,name=beginTime" json:"beginTime,omitempty"`
	BetEndTime       *int64    `protobuf:"varint,3,opt,name=betEndTime" json:"betEndTime,omitempty"`
	LotteryTime      *int64    `protobuf:"varint,4,opt,name=lotteryTime" json:"lotteryTime,omitempty"`
	EndTime          *int64    `protobuf:"varint,5,opt,name=endTime" json:"endTime,omitempty"`
	ZoneAmount       []int32   `protobuf:"varint,6,rep,name=zoneAmount" json:"zoneAmount,omitempty"`
	ZoneWinAmount    []int32   `protobuf:"varint,7,rep,name=zoneWinAmount" json:"zoneWinAmount,omitempty"`
	BankerUserId     *uint32   `protobuf:"varint,8,opt,name=BankerUserId" json:"BankerUserId,omitempty"`
	ZjhPaiList       []*ZjhPai `protobuf:"bytes,9,rep,name=ZjhPaiList" json:"ZjhPaiList,omitempty"`
	Number           *string   `protobuf:"bytes,10,opt,name=Number" json:"Number,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *TZjhRound) Reset()                    { *m = TZjhRound{} }
func (m *TZjhRound) String() string            { return proto.CompactTextString(m) }
func (*TZjhRound) ProtoMessage()               {}
func (*TZjhRound) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *TZjhRound) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TZjhRound) GetBeginTime() int64 {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return 0
}

func (m *TZjhRound) GetBetEndTime() int64 {
	if m != nil && m.BetEndTime != nil {
		return *m.BetEndTime
	}
	return 0
}

func (m *TZjhRound) GetLotteryTime() int64 {
	if m != nil && m.LotteryTime != nil {
		return *m.LotteryTime
	}
	return 0
}

func (m *TZjhRound) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *TZjhRound) GetZoneAmount() []int32 {
	if m != nil {
		return m.ZoneAmount
	}
	return nil
}

func (m *TZjhRound) GetZoneWinAmount() []int32 {
	if m != nil {
		return m.ZoneWinAmount
	}
	return nil
}

func (m *TZjhRound) GetBankerUserId() uint32 {
	if m != nil && m.BankerUserId != nil {
		return *m.BankerUserId
	}
	return 0
}

func (m *TZjhRound) GetZjhPaiList() []*ZjhPai {
	if m != nil {
		return m.ZjhPaiList
	}
	return nil
}

func (m *TZjhRound) GetNumber() string {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return ""
}

type TNotice struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NoticeType       *int32  `protobuf:"varint,2,opt,name=noticeType" json:"noticeType,omitempty"`
	NoticeTitle      *string `protobuf:"bytes,3,opt,name=noticeTitle" json:"noticeTitle,omitempty"`
	NoticeContent    *string `protobuf:"bytes,4,opt,name=noticeContent" json:"noticeContent,omitempty"`
	NoticeMemo       *string `protobuf:"bytes,5,opt,name=noticeMemo" json:"noticeMemo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TNotice) Reset()                    { *m = TNotice{} }
func (m *TNotice) String() string            { return proto.CompactTextString(m) }
func (*TNotice) ProtoMessage()               {}
func (*TNotice) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *TNotice) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TNotice) GetNoticeType() int32 {
	if m != nil && m.NoticeType != nil {
		return *m.NoticeType
	}
	return 0
}

func (m *TNotice) GetNoticeTitle() string {
	if m != nil && m.NoticeTitle != nil {
		return *m.NoticeTitle
	}
	return ""
}

func (m *TNotice) GetNoticeContent() string {
	if m != nil && m.NoticeContent != nil {
		return *m.NoticeContent
	}
	return ""
}

func (m *TNotice) GetNoticeMemo() string {
	if m != nil && m.NoticeMemo != nil {
		return *m.NoticeMemo
	}
	return ""
}

func init() {
	proto.RegisterType((*TBetRecord)(nil), "bbproto.TBetRecord")
	proto.RegisterType((*TZjhRound)(nil), "bbproto.TZjhRound")
	proto.RegisterType((*TNotice)(nil), "bbproto.TNotice")
}

var fileDescriptor10 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0xcd, 0x4e, 0x3a, 0x31,
	0x14, 0xc5, 0xff, 0xc3, 0x30, 0xcc, 0xbf, 0x17, 0x81, 0x50, 0x3f, 0x32, 0x61, 0x45, 0x70, 0xc3,
	0x8a, 0x85, 0x6f, 0x20, 0xc6, 0x85, 0x89, 0x10, 0x42, 0xc6, 0x68, 0xdc, 0x4d, 0x99, 0x1b, 0x29,
	0x32, 0x2d, 0x29, 0x1d, 0x0d, 0x3c, 0xaa, 0x4f, 0x63, 0xbf, 0x50, 0x77, 0xcd, 0xef, 0x9e, 0xde,
	0x7b, 0xce, 0x81, 0xfe, 0x1e, 0xd5, 0x07, 0xaa, 0x99, 0x2c, 0x71, 0x3b, 0xd9, 0x29, 0xa9, 0x25,
	0x4d, 0x19, 0x73, 0x8f, 0x01, 0xb0, 0x62, 0x8f, 0x1e, 0x0e, 0x7a, 0xc7, 0x75, 0xb1, 0xe1, 0x62,
	0x5d, 0x17, 0x1e, 0x8c, 0x5e, 0x00, 0xf2, 0x29, 0xea, 0x25, 0xae, 0xa4, 0x2a, 0x69, 0x17, 0x5a,
	0xb5, 0xd9, 0xf4, 0x50, 0x66, 0xd1, 0x30, 0x1a, 0x77, 0x68, 0x0f, 0x52, 0x86, 0xfa, 0x28, 0x05,
	0x66, 0x8d, 0x61, 0x3c, 0x4e, 0xe8, 0x15, 0x74, 0x5f, 0x37, 0xeb, 0xa5, 0xac, 0x45, 0x39, 0xaf,
	0x2b, 0x86, 0x2a, 0x8b, 0x8d, 0x90, 0xd0, 0x3e, 0x90, 0x4f, 0x2e, 0x6e, 0x2b, 0x33, 0xd0, 0x59,
	0xd3, 0xa0, 0x64, 0xf4, 0x15, 0x01, 0xc9, 0x4f, 0x62, 0x0a, 0xd0, 0xe0, 0xa7, 0xad, 0x46, 0xcc,
	0xf0, 0x8d, 0x8b, 0x9c, 0x57, 0x76, 0x6f, 0x34, 0x8e, 0xa9, 0x99, 0x9b, 0x43, 0xf7, 0xa2, 0x74,
	0x2c, 0x76, 0xec, 0x1c, 0xda, 0x5b, 0xa9, 0x35, 0xaa, 0x83, 0x83, 0x4d, 0x07, 0x8d, 0x23, 0x0c,
	0xaa, 0xe4, 0xf4, 0xd3, 0xfa, 0x0b, 0xa7, 0x5b, 0xce, 0xe5, 0x25, 0x74, 0x2c, 0x7b, 0xfe, 0x71,
	0x94, 0x3a, 0x7c, 0x01, 0x67, 0xd3, 0x42, 0xbc, 0xa3, 0x7a, 0xf2, 0x19, 0xff, 0x3b, 0x37, 0xd7,
	0x00, 0xc6, 0xe5, 0xa2, 0xe0, 0x8f, 0x7c, 0xaf, 0x33, 0x62, 0x94, 0xed, 0x9b, 0xde, 0x24, 0x94,
	0x37, 0xf1, 0x23, 0x5b, 0x4c, 0xc8, 0x0b, 0x36, 0xef, 0x88, 0x43, 0x9a, 0xcf, 0xa5, 0xe6, 0x2b,
	0xfc, 0x93, 0x2c, 0xb1, 0x66, 0x84, 0xa3, 0xf9, 0x61, 0xe7, 0xa3, 0x25, 0x36, 0x46, 0x60, 0x5c,
	0x6f, 0x31, 0xf4, 0x65, 0x1c, 0x7a, 0x78, 0x27, 0x85, 0xc6, 0xd0, 0x19, 0xf9, 0xfd, 0x3f, 0xc3,
	0x4a, 0xba, 0x80, 0x64, 0xf1, 0x6f, 0x11, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0x43, 0x92, 0xc6,
	0xfa, 0xdf, 0x01, 0x00, 0x00,
}
