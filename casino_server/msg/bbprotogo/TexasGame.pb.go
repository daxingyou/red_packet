// Code generated by protoc-gen-go.
// source: TexasGame.proto
// DO NOT EDIT!

package bbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Game_LeaveTable_Reason int32

const (
	Game_LeaveTable_quit_mormal            Game_LeaveTable_Reason = 0
	Game_LeaveTable_quit_friendKick        Game_LeaveTable_Reason = 1
	Game_LeaveTable_quit_adjustTable       Game_LeaveTable_Reason = 2
	Game_LeaveTable_quit_friendTableDelete Game_LeaveTable_Reason = 3
)

var Game_LeaveTable_Reason_name = map[int32]string{
	0: "quit_mormal",
	1: "quit_friendKick",
	2: "quit_adjustTable",
	3: "quit_friendTableDelete",
}
var Game_LeaveTable_Reason_value = map[string]int32{
	"quit_mormal":            0,
	"quit_friendKick":        1,
	"quit_adjustTable":       2,
	"quit_friendTableDelete": 3,
}

func (x Game_LeaveTable_Reason) Enum() *Game_LeaveTable_Reason {
	p := new(Game_LeaveTable_Reason)
	*p = x
	return p
}
func (x Game_LeaveTable_Reason) String() string {
	return proto.EnumName(Game_LeaveTable_Reason_name, int32(x))
}
func (x *Game_LeaveTable_Reason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Game_LeaveTable_Reason_value, data, "Game_LeaveTable_Reason")
	if err != nil {
		return err
	}
	*x = Game_LeaveTable_Reason(value)
	return nil
}
func (Game_LeaveTable_Reason) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{42, 0} }

type DDAckPayMsg_Reason int32

const (
	DDAckPayMsg_HORN_NOTHING    DDAckPayMsg_Reason = 0
	DDAckPayMsg_HORN_NOCOIN     DDAckPayMsg_Reason = 1
	DDAckPayMsg_HORN_GETCOIN    DDAckPayMsg_Reason = 2
	DDAckPayMsg_HORN_UPDATECOIN DDAckPayMsg_Reason = 3
	DDAckPayMsg_HORN_ENABLETXT  DDAckPayMsg_Reason = 4
)

var DDAckPayMsg_Reason_name = map[int32]string{
	0: "HORN_NOTHING",
	1: "HORN_NOCOIN",
	2: "HORN_GETCOIN",
	3: "HORN_UPDATECOIN",
	4: "HORN_ENABLETXT",
}
var DDAckPayMsg_Reason_value = map[string]int32{
	"HORN_NOTHING":    0,
	"HORN_NOCOIN":     1,
	"HORN_GETCOIN":    2,
	"HORN_UPDATECOIN": 3,
	"HORN_ENABLETXT":  4,
}

func (x DDAckPayMsg_Reason) Enum() *DDAckPayMsg_Reason {
	p := new(DDAckPayMsg_Reason)
	*p = x
	return p
}
func (x DDAckPayMsg_Reason) String() string {
	return proto.EnumName(DDAckPayMsg_Reason_name, int32(x))
}
func (x *DDAckPayMsg_Reason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DDAckPayMsg_Reason_value, data, "DDAckPayMsg_Reason")
	if err != nil {
		return err
	}
	*x = DDAckPayMsg_Reason(value)
	return nil
}
func (DDAckPayMsg_Reason) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{59, 0} }

type DDAckPresentCoins_Reason int32

const (
	DDAckPresentCoins_PC_NOTHING    DDAckPresentCoins_Reason = 0
	DDAckPresentCoins_PC_UNKNOWN    DDAckPresentCoins_Reason = 1
	DDAckPresentCoins_PC_CONNECTDB  DDAckPresentCoins_Reason = 2
	DDAckPresentCoins_PC_DB         DDAckPresentCoins_Reason = 3
	DDAckPresentCoins_PC_SENDERINFO DDAckPresentCoins_Reason = 4
	DDAckPresentCoins_PC_SENDERCOIN DDAckPresentCoins_Reason = 5
	DDAckPresentCoins_PC_CONFIG     DDAckPresentCoins_Reason = 6
	DDAckPresentCoins_PC_CLOSE      DDAckPresentCoins_Reason = 7
	DDAckPresentCoins_PC_AMOUNT     DDAckPresentCoins_Reason = 8
	DDAckPresentCoins_PC_TIMESUSER  DDAckPresentCoins_Reason = 9
	DDAckPresentCoins_PC_TIMESDAY   DDAckPresentCoins_Reason = 10
	DDAckPresentCoins_PC_SUBTRACT   DDAckPresentCoins_Reason = 11
	DDAckPresentCoins_PC_ADD        DDAckPresentCoins_Reason = 12
)

var DDAckPresentCoins_Reason_name = map[int32]string{
	0:  "PC_NOTHING",
	1:  "PC_UNKNOWN",
	2:  "PC_CONNECTDB",
	3:  "PC_DB",
	4:  "PC_SENDERINFO",
	5:  "PC_SENDERCOIN",
	6:  "PC_CONFIG",
	7:  "PC_CLOSE",
	8:  "PC_AMOUNT",
	9:  "PC_TIMESUSER",
	10: "PC_TIMESDAY",
	11: "PC_SUBTRACT",
	12: "PC_ADD",
}
var DDAckPresentCoins_Reason_value = map[string]int32{
	"PC_NOTHING":    0,
	"PC_UNKNOWN":    1,
	"PC_CONNECTDB":  2,
	"PC_DB":         3,
	"PC_SENDERINFO": 4,
	"PC_SENDERCOIN": 5,
	"PC_CONFIG":     6,
	"PC_CLOSE":      7,
	"PC_AMOUNT":     8,
	"PC_TIMESUSER":  9,
	"PC_TIMESDAY":   10,
	"PC_SUBTRACT":   11,
	"PC_ADD":        12,
}

func (x DDAckPresentCoins_Reason) Enum() *DDAckPresentCoins_Reason {
	p := new(DDAckPresentCoins_Reason)
	*p = x
	return p
}
func (x DDAckPresentCoins_Reason) String() string {
	return proto.EnumName(DDAckPresentCoins_Reason_name, int32(x))
}
func (x *DDAckPresentCoins_Reason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DDAckPresentCoins_Reason_value, data, "DDAckPresentCoins_Reason")
	if err != nil {
		return err
	}
	*x = DDAckPresentCoins_Reason(value)
	return nil
}
func (DDAckPresentCoins_Reason) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{64, 0} }

type Game_ACKConfirmConnect struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_ACKConfirmConnect) Reset()                    { *m = Game_ACKConfirmConnect{} }
func (m *Game_ACKConfirmConnect) String() string            { return proto.CompactTextString(m) }
func (*Game_ACKConfirmConnect) ProtoMessage()               {}
func (*Game_ACKConfirmConnect) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Game_ACKConfirmConnect) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type Game_LoginGame struct {
	Letter           []byte `protobuf:"bytes,1,opt,name=Letter" json:"Letter,omitempty"`
	Result           *int32 `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_LoginGame) Reset()                    { *m = Game_LoginGame{} }
func (m *Game_LoginGame) String() string            { return proto.CompactTextString(m) }
func (*Game_LoginGame) ProtoMessage()               {}
func (*Game_LoginGame) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Game_LoginGame) GetLetter() []byte {
	if m != nil {
		return m.Letter
	}
	return nil
}

func (m *Game_LoginGame) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 客户端请求进入match
type Game_EnterMatch struct {
	MatchID          []byte  `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	Tableid          *int32  `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	PassWord         []byte  `protobuf:"bytes,3,opt,name=PassWord" json:"PassWord,omitempty"`
	SCFUserName      []byte  `protobuf:"bytes,4,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	UserId           *uint32 `protobuf:"varint,5,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_EnterMatch) Reset()                    { *m = Game_EnterMatch{} }
func (m *Game_EnterMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_EnterMatch) ProtoMessage()               {}
func (*Game_EnterMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Game_EnterMatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *Game_EnterMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_EnterMatch) GetPassWord() []byte {
	if m != nil {
		return m.PassWord
	}
	return nil
}

func (m *Game_EnterMatch) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

func (m *Game_EnterMatch) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type Game_AckEnterMatch struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Matchid          []byte `protobuf:"bytes,2,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,3,opt,name=Tableid" json:"Tableid,omitempty"`
	NReason          *int32 `protobuf:"varint,4,opt,name=nReason" json:"nReason,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckEnterMatch) Reset()                    { *m = Game_AckEnterMatch{} }
func (m *Game_AckEnterMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_AckEnterMatch) ProtoMessage()               {}
func (*Game_AckEnterMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Game_AckEnterMatch) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_AckEnterMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckEnterMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckEnterMatch) GetNReason() int32 {
	if m != nil && m.NReason != nil {
		return *m.NReason
	}
	return 0
}

type Game_AddHandCoin struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=seat" json:"seat,omitempty"`
	Coin             *int64 `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AddHandCoin) Reset()                    { *m = Game_AddHandCoin{} }
func (m *Game_AddHandCoin) String() string            { return proto.CompactTextString(m) }
func (*Game_AddHandCoin) ProtoMessage()               {}
func (*Game_AddHandCoin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Game_AddHandCoin) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AddHandCoin) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AddHandCoin) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AddHandCoin) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

type Game_CardInfo struct {
	Color            *int32 `protobuf:"varint,1,opt,name=color" json:"color,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_CardInfo) Reset()                    { *m = Game_CardInfo{} }
func (m *Game_CardInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_CardInfo) ProtoMessage()               {}
func (*Game_CardInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Game_CardInfo) GetColor() int32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *Game_CardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type Game_InitCard struct {
	Matchid          []byte           `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32           `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32           `protobuf:"varint,3,opt,name=seat" json:"seat,omitempty"`
	NextUser         *int32           `protobuf:"varint,4,opt,name=NextUser" json:"NextUser,omitempty"`
	HandCard         []*Game_CardInfo `protobuf:"bytes,5,rep,name=HandCard" json:"HandCard,omitempty"`
	PublicCard       []*Game_CardInfo `protobuf:"bytes,6,rep,name=PublicCard" json:"PublicCard,omitempty"`
	MinRaise         *int64           `protobuf:"varint,7,opt,name=MinRaise" json:"MinRaise,omitempty"`
	ActionTime       *int32           `protobuf:"varint,8,opt,name=ActionTime" json:"ActionTime,omitempty"`
	DelayTime        *int32           `protobuf:"varint,9,opt,name=DelayTime" json:"DelayTime,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Game_InitCard) Reset()                    { *m = Game_InitCard{} }
func (m *Game_InitCard) String() string            { return proto.CompactTextString(m) }
func (*Game_InitCard) ProtoMessage()               {}
func (*Game_InitCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Game_InitCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_InitCard) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_InitCard) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_InitCard) GetNextUser() int32 {
	if m != nil && m.NextUser != nil {
		return *m.NextUser
	}
	return 0
}

func (m *Game_InitCard) GetHandCard() []*Game_CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *Game_InitCard) GetPublicCard() []*Game_CardInfo {
	if m != nil {
		return m.PublicCard
	}
	return nil
}

func (m *Game_InitCard) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_InitCard) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *Game_InitCard) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

type Game_RaiseBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	Coin             *int64 `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_RaiseBet) Reset()                    { *m = Game_RaiseBet{} }
func (m *Game_RaiseBet) String() string            { return proto.CompactTextString(m) }
func (*Game_RaiseBet) ProtoMessage()               {}
func (*Game_RaiseBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *Game_RaiseBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_RaiseBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_RaiseBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_RaiseBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

type Game_AckRaiseBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	Coin             *int64 `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	HandCoin         *int64 `protobuf:"varint,5,opt,name=HandCoin" json:"HandCoin,omitempty"`
	NextSeat         *int32 `protobuf:"varint,6,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Pool             *int64 `protobuf:"varint,7,opt,name=pool" json:"pool,omitempty"`
	MinRaise         *int64 `protobuf:"varint,8,opt,name=MinRaise" json:"MinRaise,omitempty"`
	CanRaise         *int32 `protobuf:"varint,9,opt,name=CanRaise" json:"CanRaise,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckRaiseBet) Reset()                    { *m = Game_AckRaiseBet{} }
func (m *Game_AckRaiseBet) String() string            { return proto.CompactTextString(m) }
func (*Game_AckRaiseBet) ProtoMessage()               {}
func (*Game_AckRaiseBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *Game_AckRaiseBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckRaiseBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckRaiseBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckRaiseBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_AckRaiseBet) GetHandCoin() int64 {
	if m != nil && m.HandCoin != nil {
		return *m.HandCoin
	}
	return 0
}

func (m *Game_AckRaiseBet) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_AckRaiseBet) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_AckRaiseBet) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_AckRaiseBet) GetCanRaise() int32 {
	if m != nil && m.CanRaise != nil {
		return *m.CanRaise
	}
	return 0
}

type Game_FollowBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_FollowBet) Reset()                    { *m = Game_FollowBet{} }
func (m *Game_FollowBet) String() string            { return proto.CompactTextString(m) }
func (*Game_FollowBet) ProtoMessage()               {}
func (*Game_FollowBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *Game_FollowBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_FollowBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_FollowBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_AckFollowBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	NextSeat         *int32 `protobuf:"varint,4,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Coin             *int64 `protobuf:"varint,5,opt,name=Coin" json:"Coin,omitempty"`
	HandCoin         *int64 `protobuf:"varint,6,opt,name=HandCoin" json:"HandCoin,omitempty"`
	Pool             *int64 `protobuf:"varint,7,opt,name=pool" json:"pool,omitempty"`
	MinRaise         *int64 `protobuf:"varint,8,opt,name=MinRaise" json:"MinRaise,omitempty"`
	CanRaise         *int32 `protobuf:"varint,9,opt,name=CanRaise" json:"CanRaise,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckFollowBet) Reset()                    { *m = Game_AckFollowBet{} }
func (m *Game_AckFollowBet) String() string            { return proto.CompactTextString(m) }
func (*Game_AckFollowBet) ProtoMessage()               {}
func (*Game_AckFollowBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *Game_AckFollowBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckFollowBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckFollowBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckFollowBet) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_AckFollowBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_AckFollowBet) GetHandCoin() int64 {
	if m != nil && m.HandCoin != nil {
		return *m.HandCoin
	}
	return 0
}

func (m *Game_AckFollowBet) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_AckFollowBet) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_AckFollowBet) GetCanRaise() int32 {
	if m != nil && m.CanRaise != nil {
		return *m.CanRaise
	}
	return 0
}

type Game_FoldBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_FoldBet) Reset()                    { *m = Game_FoldBet{} }
func (m *Game_FoldBet) String() string            { return proto.CompactTextString(m) }
func (*Game_FoldBet) ProtoMessage()               {}
func (*Game_FoldBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *Game_FoldBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_FoldBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_FoldBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_AckFoldBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	NextSeat         *int32 `protobuf:"varint,4,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Coin             *int64 `protobuf:"varint,5,opt,name=Coin" json:"Coin,omitempty"`
	HandCoin         *int64 `protobuf:"varint,6,opt,name=HandCoin" json:"HandCoin,omitempty"`
	Pool             *int64 `protobuf:"varint,7,opt,name=pool" json:"pool,omitempty"`
	MinRaise         *int64 `protobuf:"varint,8,opt,name=MinRaise" json:"MinRaise,omitempty"`
	CanRaise         *int32 `protobuf:"varint,9,opt,name=CanRaise" json:"CanRaise,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckFoldBet) Reset()                    { *m = Game_AckFoldBet{} }
func (m *Game_AckFoldBet) String() string            { return proto.CompactTextString(m) }
func (*Game_AckFoldBet) ProtoMessage()               {}
func (*Game_AckFoldBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *Game_AckFoldBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckFoldBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckFoldBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckFoldBet) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_AckFoldBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_AckFoldBet) GetHandCoin() int64 {
	if m != nil && m.HandCoin != nil {
		return *m.HandCoin
	}
	return 0
}

func (m *Game_AckFoldBet) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_AckFoldBet) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_AckFoldBet) GetCanRaise() int32 {
	if m != nil && m.CanRaise != nil {
		return *m.CanRaise
	}
	return 0
}

type Game_CheckBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_CheckBet) Reset()                    { *m = Game_CheckBet{} }
func (m *Game_CheckBet) String() string            { return proto.CompactTextString(m) }
func (*Game_CheckBet) ProtoMessage()               {}
func (*Game_CheckBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *Game_CheckBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_CheckBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_CheckBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_AckCheckBet struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	NextSeat         *int32 `protobuf:"varint,4,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Coin             *int64 `protobuf:"varint,5,opt,name=Coin" json:"Coin,omitempty"`
	HandCoin         *int64 `protobuf:"varint,6,opt,name=HandCoin" json:"HandCoin,omitempty"`
	Pool             *int64 `protobuf:"varint,8,opt,name=pool" json:"pool,omitempty"`
	MinRaise         *int64 `protobuf:"varint,9,opt,name=MinRaise" json:"MinRaise,omitempty"`
	CanRaise         *int32 `protobuf:"varint,10,opt,name=CanRaise" json:"CanRaise,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckCheckBet) Reset()                    { *m = Game_AckCheckBet{} }
func (m *Game_AckCheckBet) String() string            { return proto.CompactTextString(m) }
func (*Game_AckCheckBet) ProtoMessage()               {}
func (*Game_AckCheckBet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *Game_AckCheckBet) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckCheckBet) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_AckCheckBet) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_AckCheckBet) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_AckCheckBet) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_AckCheckBet) GetHandCoin() int64 {
	if m != nil && m.HandCoin != nil {
		return *m.HandCoin
	}
	return 0
}

func (m *Game_AckCheckBet) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_AckCheckBet) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_AckCheckBet) GetCanRaise() int32 {
	if m != nil && m.CanRaise != nil {
		return *m.CanRaise
	}
	return 0
}

type Game_SendFlopCard struct {
	Matchid          []byte         `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32         `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Card0            *Game_CardInfo `protobuf:"bytes,3,opt,name=card0" json:"card0,omitempty"`
	Card1            *Game_CardInfo `protobuf:"bytes,4,opt,name=card1" json:"card1,omitempty"`
	Card2            *Game_CardInfo `protobuf:"bytes,5,opt,name=card2" json:"card2,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Game_SendFlopCard) Reset()                    { *m = Game_SendFlopCard{} }
func (m *Game_SendFlopCard) String() string            { return proto.CompactTextString(m) }
func (*Game_SendFlopCard) ProtoMessage()               {}
func (*Game_SendFlopCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *Game_SendFlopCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendFlopCard) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendFlopCard) GetCard0() *Game_CardInfo {
	if m != nil {
		return m.Card0
	}
	return nil
}

func (m *Game_SendFlopCard) GetCard1() *Game_CardInfo {
	if m != nil {
		return m.Card1
	}
	return nil
}

func (m *Game_SendFlopCard) GetCard2() *Game_CardInfo {
	if m != nil {
		return m.Card2
	}
	return nil
}

type Game_SendTurnCard struct {
	Matchid          []byte         `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32         `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Card             *Game_CardInfo `protobuf:"bytes,3,opt,name=card" json:"card,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Game_SendTurnCard) Reset()                    { *m = Game_SendTurnCard{} }
func (m *Game_SendTurnCard) String() string            { return proto.CompactTextString(m) }
func (*Game_SendTurnCard) ProtoMessage()               {}
func (*Game_SendTurnCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *Game_SendTurnCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendTurnCard) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendTurnCard) GetCard() *Game_CardInfo {
	if m != nil {
		return m.Card
	}
	return nil
}

type Game_SendRiverCard struct {
	Matchid          []byte         `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32         `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Card             *Game_CardInfo `protobuf:"bytes,3,opt,name=card" json:"card,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Game_SendRiverCard) Reset()                    { *m = Game_SendRiverCard{} }
func (m *Game_SendRiverCard) String() string            { return proto.CompactTextString(m) }
func (*Game_SendRiverCard) ProtoMessage()               {}
func (*Game_SendRiverCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *Game_SendRiverCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendRiverCard) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendRiverCard) GetCard() *Game_CardInfo {
	if m != nil {
		return m.Card
	}
	return nil
}

type Game_SendOverTurn struct {
	Matchid          []byte  `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32  `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Pool             *int64  `protobuf:"varint,3,opt,name=Pool" json:"Pool,omitempty"`
	SecondPool       []int64 `protobuf:"varint,4,rep,name=SecondPool" json:"SecondPool,omitempty"`
	NextSeat         *int32  `protobuf:"varint,5,opt,name=NextSeat" json:"NextSeat,omitempty"`
	Handcoin         []int64 `protobuf:"varint,6,rep,name=handcoin" json:"handcoin,omitempty"`
	Coin             []int64 `protobuf:"varint,7,rep,name=coin" json:"coin,omitempty"`
	MinRaise         *int64  `protobuf:"varint,8,opt,name=MinRaise" json:"MinRaise,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_SendOverTurn) Reset()                    { *m = Game_SendOverTurn{} }
func (m *Game_SendOverTurn) String() string            { return proto.CompactTextString(m) }
func (*Game_SendOverTurn) ProtoMessage()               {}
func (*Game_SendOverTurn) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *Game_SendOverTurn) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendOverTurn) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendOverTurn) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_SendOverTurn) GetSecondPool() []int64 {
	if m != nil {
		return m.SecondPool
	}
	return nil
}

func (m *Game_SendOverTurn) GetNextSeat() int32 {
	if m != nil && m.NextSeat != nil {
		return *m.NextSeat
	}
	return 0
}

func (m *Game_SendOverTurn) GetHandcoin() []int64 {
	if m != nil {
		return m.Handcoin
	}
	return nil
}

func (m *Game_SendOverTurn) GetCoin() []int64 {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *Game_SendOverTurn) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

type Game_CardType struct {
	Card1            *int32 `protobuf:"varint,1,opt,name=card1" json:"card1,omitempty"`
	Card2            *int32 `protobuf:"varint,2,opt,name=card2" json:"card2,omitempty"`
	Card3            *int32 `protobuf:"varint,3,opt,name=card3" json:"card3,omitempty"`
	Card4            *int32 `protobuf:"varint,4,opt,name=card4" json:"card4,omitempty"`
	Card5            *int32 `protobuf:"varint,5,opt,name=card5" json:"card5,omitempty"`
	Cardtype         *int32 `protobuf:"varint,6,opt,name=cardtype" json:"cardtype,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_CardType) Reset()                    { *m = Game_CardType{} }
func (m *Game_CardType) String() string            { return proto.CompactTextString(m) }
func (*Game_CardType) ProtoMessage()               {}
func (*Game_CardType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *Game_CardType) GetCard1() int32 {
	if m != nil && m.Card1 != nil {
		return *m.Card1
	}
	return 0
}

func (m *Game_CardType) GetCard2() int32 {
	if m != nil && m.Card2 != nil {
		return *m.Card2
	}
	return 0
}

func (m *Game_CardType) GetCard3() int32 {
	if m != nil && m.Card3 != nil {
		return *m.Card3
	}
	return 0
}

func (m *Game_CardType) GetCard4() int32 {
	if m != nil && m.Card4 != nil {
		return *m.Card4
	}
	return 0
}

func (m *Game_CardType) GetCard5() int32 {
	if m != nil && m.Card5 != nil {
		return *m.Card5
	}
	return 0
}

func (m *Game_CardType) GetCardtype() int32 {
	if m != nil && m.Cardtype != nil {
		return *m.Cardtype
	}
	return 0
}

type Game_WinCoin struct {
	Seat             *int32 `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	PoolIndex        *int32 `protobuf:"varint,2,opt,name=poolIndex" json:"poolIndex,omitempty"`
	Coin             *int64 `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	Card1            *int32 `protobuf:"varint,4,opt,name=card1" json:"card1,omitempty"`
	Card2            *int32 `protobuf:"varint,5,opt,name=card2" json:"card2,omitempty"`
	Card3            *int32 `protobuf:"varint,6,opt,name=card3" json:"card3,omitempty"`
	Card4            *int32 `protobuf:"varint,7,opt,name=card4" json:"card4,omitempty"`
	Card5            *int32 `protobuf:"varint,8,opt,name=card5" json:"card5,omitempty"`
	Cardtype         *int32 `protobuf:"varint,9,opt,name=cardtype" json:"cardtype,omitempty"`
	Rolename         []byte `protobuf:"bytes,10,opt,name=rolename" json:"rolename,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_WinCoin) Reset()                    { *m = Game_WinCoin{} }
func (m *Game_WinCoin) String() string            { return proto.CompactTextString(m) }
func (*Game_WinCoin) ProtoMessage()               {}
func (*Game_WinCoin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *Game_WinCoin) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_WinCoin) GetPoolIndex() int32 {
	if m != nil && m.PoolIndex != nil {
		return *m.PoolIndex
	}
	return 0
}

func (m *Game_WinCoin) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_WinCoin) GetCard1() int32 {
	if m != nil && m.Card1 != nil {
		return *m.Card1
	}
	return 0
}

func (m *Game_WinCoin) GetCard2() int32 {
	if m != nil && m.Card2 != nil {
		return *m.Card2
	}
	return 0
}

func (m *Game_WinCoin) GetCard3() int32 {
	if m != nil && m.Card3 != nil {
		return *m.Card3
	}
	return 0
}

func (m *Game_WinCoin) GetCard4() int32 {
	if m != nil && m.Card4 != nil {
		return *m.Card4
	}
	return 0
}

func (m *Game_WinCoin) GetCard5() int32 {
	if m != nil && m.Card5 != nil {
		return *m.Card5
	}
	return 0
}

func (m *Game_WinCoin) GetCardtype() int32 {
	if m != nil && m.Cardtype != nil {
		return *m.Cardtype
	}
	return 0
}

func (m *Game_WinCoin) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

// 牌局的结果
type Game_TestResult struct {
	Matchid          []byte           `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32           `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Handcard         []*Game_CardInfo `protobuf:"bytes,3,rep,name=handcard" json:"handcard,omitempty"`
	BShowCard        []int32          `protobuf:"varint,4,rep,name=bShowCard" json:"bShowCard,omitempty"`
	BCanShowCard     []int32          `protobuf:"varint,5,rep,name=bCanShowCard" json:"bCanShowCard,omitempty"`
	WinCoinInfo      []*Game_WinCoin  `protobuf:"bytes,6,rep,name=WinCoinInfo" json:"WinCoinInfo,omitempty"`
	HandCoin         []int64          `protobuf:"varint,7,rep,name=HandCoin" json:"HandCoin,omitempty"`
	CoinInfo         []*Game_WinCoin  `protobuf:"bytes,8,rep,name=CoinInfo" json:"CoinInfo,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Game_TestResult) Reset()                    { *m = Game_TestResult{} }
func (m *Game_TestResult) String() string            { return proto.CompactTextString(m) }
func (*Game_TestResult) ProtoMessage()               {}
func (*Game_TestResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *Game_TestResult) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_TestResult) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_TestResult) GetHandcard() []*Game_CardInfo {
	if m != nil {
		return m.Handcard
	}
	return nil
}

func (m *Game_TestResult) GetBShowCard() []int32 {
	if m != nil {
		return m.BShowCard
	}
	return nil
}

func (m *Game_TestResult) GetBCanShowCard() []int32 {
	if m != nil {
		return m.BCanShowCard
	}
	return nil
}

func (m *Game_TestResult) GetWinCoinInfo() []*Game_WinCoin {
	if m != nil {
		return m.WinCoinInfo
	}
	return nil
}

func (m *Game_TestResult) GetHandCoin() []int64 {
	if m != nil {
		return m.HandCoin
	}
	return nil
}

func (m *Game_TestResult) GetCoinInfo() []*Game_WinCoin {
	if m != nil {
		return m.CoinInfo
	}
	return nil
}

type Game_LeaveMatch struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_LeaveMatch) Reset()                    { *m = Game_LeaveMatch{} }
func (m *Game_LeaveMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_LeaveMatch) ProtoMessage()               {}
func (*Game_LeaveMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *Game_LeaveMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_LeaveMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_LeaveMatch) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_UserInfo struct {
	UserName         []byte `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Seat             *int32 `protobuf:"varint,2,opt,name=Seat" json:"Seat,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,3,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_UserInfo) Reset()                    { *m = Game_UserInfo{} }
func (m *Game_UserInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_UserInfo) ProtoMessage()               {}
func (*Game_UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *Game_UserInfo) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *Game_UserInfo) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_UserInfo) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

type Game_SendUserInfo struct {
	UserInfo         []*Game_UserInfo `protobuf:"bytes,1,rep,name=UserInfo" json:"UserInfo,omitempty"`
	Matchid          []byte           `protobuf:"bytes,2,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32           `protobuf:"varint,3,opt,name=Tableid" json:"Tableid,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Game_SendUserInfo) Reset()                    { *m = Game_SendUserInfo{} }
func (m *Game_SendUserInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_SendUserInfo) ProtoMessage()               {}
func (*Game_SendUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *Game_SendUserInfo) GetUserInfo() []*Game_UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *Game_SendUserInfo) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendUserInfo) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

type Game_SendRank struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	UserName         []byte `protobuf:"bytes,3,opt,name=UserName" json:"UserName,omitempty"`
	Rank             *int32 `protobuf:"varint,4,opt,name=Rank" json:"Rank,omitempty"`
	ERewardType      *int32 `protobuf:"varint,5,opt,name=eRewardType" json:"eRewardType,omitempty"`
	NRewardCount     *int64 `protobuf:"varint,6,opt,name=nRewardCount" json:"nRewardCount,omitempty"`
	NTotalCoin       *int64 `protobuf:"varint,7,opt,name=nTotalCoin" json:"nTotalCoin,omitempty"`
	NNowelterCoin    *int64 `protobuf:"varint,8,opt,name=nNowelterCoin" json:"nNowelterCoin,omitempty"`
	NNowelterType    *int32 `protobuf:"varint,9,opt,name=nNowelterType" json:"nNowelterType,omitempty"`
	NScore           *int64 `protobuf:"varint,10,opt,name=nScore" json:"nScore,omitempty"`
	RewardName       []byte `protobuf:"bytes,11,opt,name=RewardName" json:"RewardName,omitempty"`
	NSeat            *int32 `protobuf:"varint,12,opt,name=nSeat" json:"nSeat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_SendRank) Reset()                    { *m = Game_SendRank{} }
func (m *Game_SendRank) String() string            { return proto.CompactTextString(m) }
func (*Game_SendRank) ProtoMessage()               {}
func (*Game_SendRank) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *Game_SendRank) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendRank) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendRank) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *Game_SendRank) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *Game_SendRank) GetERewardType() int32 {
	if m != nil && m.ERewardType != nil {
		return *m.ERewardType
	}
	return 0
}

func (m *Game_SendRank) GetNRewardCount() int64 {
	if m != nil && m.NRewardCount != nil {
		return *m.NRewardCount
	}
	return 0
}

func (m *Game_SendRank) GetNTotalCoin() int64 {
	if m != nil && m.NTotalCoin != nil {
		return *m.NTotalCoin
	}
	return 0
}

func (m *Game_SendRank) GetNNowelterCoin() int64 {
	if m != nil && m.NNowelterCoin != nil {
		return *m.NNowelterCoin
	}
	return 0
}

func (m *Game_SendRank) GetNNowelterType() int32 {
	if m != nil && m.NNowelterType != nil {
		return *m.NNowelterType
	}
	return 0
}

func (m *Game_SendRank) GetNScore() int64 {
	if m != nil && m.NScore != nil {
		return *m.NScore
	}
	return 0
}

func (m *Game_SendRank) GetRewardName() []byte {
	if m != nil {
		return m.RewardName
	}
	return nil
}

func (m *Game_SendRank) GetNSeat() int32 {
	if m != nil && m.NSeat != nil {
		return *m.NSeat
	}
	return 0
}

type Game_RestMatch struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_RestMatch) Reset()                    { *m = Game_RestMatch{} }
func (m *Game_RestMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_RestMatch) ProtoMessage()               {}
func (*Game_RestMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *Game_RestMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_RestMatch) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

type Game_ChangeTable struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	NewTableid       *int32 `protobuf:"varint,2,opt,name=NewTableid" json:"NewTableid,omitempty"`
	Tableid          *int32 `protobuf:"varint,3,opt,name=Tableid" json:"Tableid,omitempty"`
	UserName         []byte `protobuf:"bytes,4,opt,name=UserName" json:"UserName,omitempty"`
	Seat             *int32 `protobuf:"varint,5,opt,name=Seat" json:"Seat,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,6,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_ChangeTable) Reset()                    { *m = Game_ChangeTable{} }
func (m *Game_ChangeTable) String() string            { return proto.CompactTextString(m) }
func (*Game_ChangeTable) ProtoMessage()               {}
func (*Game_ChangeTable) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *Game_ChangeTable) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_ChangeTable) GetNewTableid() int32 {
	if m != nil && m.NewTableid != nil {
		return *m.NewTableid
	}
	return 0
}

func (m *Game_ChangeTable) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_ChangeTable) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *Game_ChangeTable) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_ChangeTable) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

// 发送游戏信息
type Game_SendGameInfo struct {
	Matchid         []byte           `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid         *int32           `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	GameStatus      *int32           `protobuf:"varint,3,opt,name=GameStatus" json:"GameStatus,omitempty"`
	ChipSeat        *int32           `protobuf:"varint,4,opt,name=ChipSeat" json:"ChipSeat,omitempty"`
	Pool            *int64           `protobuf:"varint,5,opt,name=pool" json:"pool,omitempty"`
	TablePlayer     *int32           `protobuf:"varint,6,opt,name=TablePlayer" json:"TablePlayer,omitempty"`
	BankSeat        *int32           `protobuf:"varint,7,opt,name=BankSeat" json:"BankSeat,omitempty"`
	Publiccard      []*Game_CardInfo `protobuf:"bytes,8,rep,name=publiccard" json:"publiccard,omitempty"`
	Handcard        []*Game_CardInfo `protobuf:"bytes,9,rep,name=handcard" json:"handcard,omitempty"`
	HandCoin        []int64          `protobuf:"varint,10,rep,name=HandCoin" json:"HandCoin,omitempty"`
	TurnCoin        []int64          `protobuf:"varint,11,rep,name=TurnCoin" json:"TurnCoin,omitempty"`
	ActionTime      *int32           `protobuf:"varint,12,opt,name=ActionTime" json:"ActionTime,omitempty"`
	BEnable         []int32          `protobuf:"varint,13,rep,name=bEnable" json:"bEnable,omitempty"`
	MinRaise        *int64           `protobuf:"varint,14,opt,name=MinRaise" json:"MinRaise,omitempty"`
	BFold           []int32          `protobuf:"varint,15,rep,name=bFold" json:"bFold,omitempty"`
	BAllIn          []int32          `protobuf:"varint,16,rep,name=bAllIn" json:"bAllIn,omitempty"`
	BBreak          []int32          `protobuf:"varint,17,rep,name=bBreak" json:"bBreak,omitempty"`
	BLeave          []int32          `protobuf:"varint,18,rep,name=bLeave" json:"bLeave,omitempty"`
	DelayTime       *int32           `protobuf:"varint,19,opt,name=DelayTime" json:"DelayTime,omitempty"`
	NRebuyCount     *int32           `protobuf:"varint,20,opt,name=nRebuyCount" json:"nRebuyCount,omitempty"`
	NAddonCount     *int32           `protobuf:"varint,21,opt,name=nAddonCount" json:"nAddonCount,omitempty"`
	BFinalAddon     *int32           `protobuf:"varint,22,opt,name=bFinalAddon" json:"bFinalAddon,omitempty"`
	NInitActionTime *int32           `protobuf:"varint,23,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime  *int32           `protobuf:"varint,24,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	NickName        []string         `protobuf:"bytes,25,rep,name=nickName" json:"nickName,omitempty"`
	SeatId          []int32          `protobuf:"varint,26,rep,name=seatId" json:"seatId,omitempty"`
	Seat            *int32           `protobuf:"varint,27,opt,name=seat" json:"seat,omitempty"`
	SecondPool      []int64          `protobuf:"varint,28,rep,name=secondPool" json:"secondPool,omitempty"`
	TurnMax         *int64           `protobuf:"varint,29,opt,name=turnMax" json:"turnMax,omitempty"`
	Result          *int32           `protobuf:"varint,30,opt,name=result" json:"result,omitempty"`
	// ① 新增字段： repeated WeixinInfo  = 31;  //微信用户信息
	// ② EnterMatch时、广播新进用户时，才需返回WeixinInfo；其它广播不需要。
	WeixinInfos      []*WeixinInfo `protobuf:"bytes,31,rep,name=weixinInfos" json:"weixinInfos,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Game_SendGameInfo) Reset()                    { *m = Game_SendGameInfo{} }
func (m *Game_SendGameInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_SendGameInfo) ProtoMessage()               {}
func (*Game_SendGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *Game_SendGameInfo) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendGameInfo) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *Game_SendGameInfo) GetChipSeat() int32 {
	if m != nil && m.ChipSeat != nil {
		return *m.ChipSeat
	}
	return 0
}

func (m *Game_SendGameInfo) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_SendGameInfo) GetTablePlayer() int32 {
	if m != nil && m.TablePlayer != nil {
		return *m.TablePlayer
	}
	return 0
}

func (m *Game_SendGameInfo) GetBankSeat() int32 {
	if m != nil && m.BankSeat != nil {
		return *m.BankSeat
	}
	return 0
}

func (m *Game_SendGameInfo) GetPubliccard() []*Game_CardInfo {
	if m != nil {
		return m.Publiccard
	}
	return nil
}

func (m *Game_SendGameInfo) GetHandcard() []*Game_CardInfo {
	if m != nil {
		return m.Handcard
	}
	return nil
}

func (m *Game_SendGameInfo) GetHandCoin() []int64 {
	if m != nil {
		return m.HandCoin
	}
	return nil
}

func (m *Game_SendGameInfo) GetTurnCoin() []int64 {
	if m != nil {
		return m.TurnCoin
	}
	return nil
}

func (m *Game_SendGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *Game_SendGameInfo) GetBEnable() []int32 {
	if m != nil {
		return m.BEnable
	}
	return nil
}

func (m *Game_SendGameInfo) GetMinRaise() int64 {
	if m != nil && m.MinRaise != nil {
		return *m.MinRaise
	}
	return 0
}

func (m *Game_SendGameInfo) GetBFold() []int32 {
	if m != nil {
		return m.BFold
	}
	return nil
}

func (m *Game_SendGameInfo) GetBAllIn() []int32 {
	if m != nil {
		return m.BAllIn
	}
	return nil
}

func (m *Game_SendGameInfo) GetBBreak() []int32 {
	if m != nil {
		return m.BBreak
	}
	return nil
}

func (m *Game_SendGameInfo) GetBLeave() []int32 {
	if m != nil {
		return m.BLeave
	}
	return nil
}

func (m *Game_SendGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *Game_SendGameInfo) GetNRebuyCount() int32 {
	if m != nil && m.NRebuyCount != nil {
		return *m.NRebuyCount
	}
	return 0
}

func (m *Game_SendGameInfo) GetNAddonCount() int32 {
	if m != nil && m.NAddonCount != nil {
		return *m.NAddonCount
	}
	return 0
}

func (m *Game_SendGameInfo) GetBFinalAddon() int32 {
	if m != nil && m.BFinalAddon != nil {
		return *m.BFinalAddon
	}
	return 0
}

func (m *Game_SendGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *Game_SendGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *Game_SendGameInfo) GetNickName() []string {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *Game_SendGameInfo) GetSeatId() []int32 {
	if m != nil {
		return m.SeatId
	}
	return nil
}

func (m *Game_SendGameInfo) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_SendGameInfo) GetSecondPool() []int64 {
	if m != nil {
		return m.SecondPool
	}
	return nil
}

func (m *Game_SendGameInfo) GetTurnMax() int64 {
	if m != nil && m.TurnMax != nil {
		return *m.TurnMax
	}
	return 0
}

func (m *Game_SendGameInfo) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_SendGameInfo) GetWeixinInfos() []*WeixinInfo {
	if m != nil {
		return m.WeixinInfos
	}
	return nil
}

type Game_ShowCard struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Table            *int32 `protobuf:"varint,2,opt,name=table" json:"table,omitempty"`
	BShow            *int32 `protobuf:"varint,3,opt,name=bShow" json:"bShow,omitempty"`
	Seat             *int32 `protobuf:"varint,4,opt,name=Seat" json:"Seat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_ShowCard) Reset()                    { *m = Game_ShowCard{} }
func (m *Game_ShowCard) String() string            { return proto.CompactTextString(m) }
func (*Game_ShowCard) ProtoMessage()               {}
func (*Game_ShowCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *Game_ShowCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_ShowCard) GetTable() int32 {
	if m != nil && m.Table != nil {
		return *m.Table
	}
	return 0
}

func (m *Game_ShowCard) GetBShow() int32 {
	if m != nil && m.BShow != nil {
		return *m.BShow
	}
	return 0
}

func (m *Game_ShowCard) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_AckShowCard struct {
	Matchid          []byte           `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Table            *int32           `protobuf:"varint,2,opt,name=table" json:"table,omitempty"`
	HandCard         []*Game_CardInfo `protobuf:"bytes,3,rep,name=HandCard" json:"HandCard,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Game_AckShowCard) Reset()                    { *m = Game_AckShowCard{} }
func (m *Game_AckShowCard) String() string            { return proto.CompactTextString(m) }
func (*Game_AckShowCard) ProtoMessage()               {}
func (*Game_AckShowCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *Game_AckShowCard) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckShowCard) GetTable() int32 {
	if m != nil && m.Table != nil {
		return *m.Table
	}
	return 0
}

func (m *Game_AckShowCard) GetHandCard() []*Game_CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

type Game_TestLogin struct {
	UserName         []byte `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_TestLogin) Reset()                    { *m = Game_TestLogin{} }
func (m *Game_TestLogin) String() string            { return proto.CompactTextString(m) }
func (*Game_TestLogin) ProtoMessage()               {}
func (*Game_TestLogin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *Game_TestLogin) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

type Game_AckTestLogin struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Matchid          []byte `protobuf:"bytes,2,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,3,opt,name=Tableid" json:"Tableid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckTestLogin) Reset()                    { *m = Game_AckTestLogin{} }
func (m *Game_AckTestLogin) String() string            { return proto.CompactTextString(m) }
func (*Game_AckTestLogin) ProtoMessage()               {}
func (*Game_AckTestLogin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *Game_AckTestLogin) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_AckTestLogin) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_AckTestLogin) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

type Game_TestStartMatch struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_TestStartMatch) Reset()                    { *m = Game_TestStartMatch{} }
func (m *Game_TestStartMatch) String() string            { return proto.CompactTextString(m) }
func (*Game_TestStartMatch) ProtoMessage()               {}
func (*Game_TestStartMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *Game_TestStartMatch) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

type Game_ReportPlayer struct {
	Ip               *int32 `protobuf:"varint,1,opt,name=ip" json:"ip,omitempty"`
	Port             *int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Type             *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Player           *int32 `protobuf:"varint,4,opt,name=player" json:"player,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_ReportPlayer) Reset()                    { *m = Game_ReportPlayer{} }
func (m *Game_ReportPlayer) String() string            { return proto.CompactTextString(m) }
func (*Game_ReportPlayer) ProtoMessage()               {}
func (*Game_ReportPlayer) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *Game_ReportPlayer) GetIp() int32 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *Game_ReportPlayer) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *Game_ReportPlayer) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Game_ReportPlayer) GetPlayer() int32 {
	if m != nil && m.Player != nil {
		return *m.Player
	}
	return 0
}

type Game_UseDelayTime struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	Delaytime        *int32 `protobuf:"varint,4,opt,name=delaytime" json:"delaytime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_UseDelayTime) Reset()                    { *m = Game_UseDelayTime{} }
func (m *Game_UseDelayTime) String() string            { return proto.CompactTextString(m) }
func (*Game_UseDelayTime) ProtoMessage()               {}
func (*Game_UseDelayTime) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *Game_UseDelayTime) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_UseDelayTime) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_UseDelayTime) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_UseDelayTime) GetDelaytime() int32 {
	if m != nil && m.Delaytime != nil {
		return *m.Delaytime
	}
	return 0
}

// 离座消息
type Game_LeaveSeat struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Seat             *int32 `protobuf:"varint,3,opt,name=Seat" json:"Seat,omitempty"`
	BLeave           *int32 `protobuf:"varint,4,opt,name=bLeave" json:"bLeave,omitempty"`
	BWaitBling       *int32 `protobuf:"varint,5,opt,name=bWaitBling" json:"bWaitBling,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_LeaveSeat) Reset()                    { *m = Game_LeaveSeat{} }
func (m *Game_LeaveSeat) String() string            { return proto.CompactTextString(m) }
func (*Game_LeaveSeat) ProtoMessage()               {}
func (*Game_LeaveSeat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *Game_LeaveSeat) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_LeaveSeat) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_LeaveSeat) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_LeaveSeat) GetBLeave() int32 {
	if m != nil && m.BLeave != nil {
		return *m.BLeave
	}
	return 0
}

func (m *Game_LeaveSeat) GetBWaitBling() int32 {
	if m != nil && m.BWaitBling != nil {
		return *m.BWaitBling
	}
	return 0
}

type Game_MatchChip struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	MaxChip          *int64 `protobuf:"varint,3,opt,name=MaxChip" json:"MaxChip,omitempty"`
	MinChip          *int64 `protobuf:"varint,4,opt,name=MinChip" json:"MinChip,omitempty"`
	AveChip          *int64 `protobuf:"varint,5,opt,name=AveChip" json:"AveChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_MatchChip) Reset()                    { *m = Game_MatchChip{} }
func (m *Game_MatchChip) String() string            { return proto.CompactTextString(m) }
func (*Game_MatchChip) ProtoMessage()               {}
func (*Game_MatchChip) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

func (m *Game_MatchChip) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_MatchChip) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_MatchChip) GetMaxChip() int64 {
	if m != nil && m.MaxChip != nil {
		return *m.MaxChip
	}
	return 0
}

func (m *Game_MatchChip) GetMinChip() int64 {
	if m != nil && m.MinChip != nil {
		return *m.MinChip
	}
	return 0
}

func (m *Game_MatchChip) GetAveChip() int64 {
	if m != nil && m.AveChip != nil {
		return *m.AveChip
	}
	return 0
}

type Game_SendUserRank struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Rank             *int32 `protobuf:"varint,3,opt,name=Rank" json:"Rank,omitempty"`
	ResPlayer        *int32 `protobuf:"varint,4,opt,name=ResPlayer" json:"ResPlayer,omitempty"`
	Username         []byte `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_SendUserRank) Reset()                    { *m = Game_SendUserRank{} }
func (m *Game_SendUserRank) String() string            { return proto.CompactTextString(m) }
func (*Game_SendUserRank) ProtoMessage()               {}
func (*Game_SendUserRank) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *Game_SendUserRank) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendUserRank) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendUserRank) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *Game_SendUserRank) GetResPlayer() int32 {
	if m != nil && m.ResPlayer != nil {
		return *m.ResPlayer
	}
	return 0
}

func (m *Game_SendUserRank) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

// 盲注变化消息
type Game_BlindChange struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	SmallBlind       *int64 `protobuf:"varint,3,opt,name=SmallBlind" json:"SmallBlind,omitempty"`
	BigBlind         *int64 `protobuf:"varint,4,opt,name=BigBlind" json:"BigBlind,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_BlindChange) Reset()                    { *m = Game_BlindChange{} }
func (m *Game_BlindChange) String() string            { return proto.CompactTextString(m) }
func (*Game_BlindChange) ProtoMessage()               {}
func (*Game_BlindChange) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *Game_BlindChange) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_BlindChange) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_BlindChange) GetSmallBlind() int64 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *Game_BlindChange) GetBigBlind() int64 {
	if m != nil && m.BigBlind != nil {
		return *m.BigBlind
	}
	return 0
}

// 下一级盲注信息
type Game_NextBlindInfo struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	NextSmallBlind   *int64 `protobuf:"varint,3,opt,name=NextSmallBlind" json:"NextSmallBlind,omitempty"`
	NextBigBlind     *int64 `protobuf:"varint,4,opt,name=NextBigBlind" json:"NextBigBlind,omitempty"`
	NextBlindTime    *int32 `protobuf:"varint,5,opt,name=NextBlindTime" json:"NextBlindTime,omitempty"`
	RestTime         *int32 `protobuf:"varint,6,opt,name=RestTime" json:"RestTime,omitempty"`
	BlindClass       *int32 `protobuf:"varint,7,opt,name=BlindClass" json:"BlindClass,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_NextBlindInfo) Reset()                    { *m = Game_NextBlindInfo{} }
func (m *Game_NextBlindInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_NextBlindInfo) ProtoMessage()               {}
func (*Game_NextBlindInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{40} }

func (m *Game_NextBlindInfo) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_NextBlindInfo) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_NextBlindInfo) GetNextSmallBlind() int64 {
	if m != nil && m.NextSmallBlind != nil {
		return *m.NextSmallBlind
	}
	return 0
}

func (m *Game_NextBlindInfo) GetNextBigBlind() int64 {
	if m != nil && m.NextBigBlind != nil {
		return *m.NextBigBlind
	}
	return 0
}

func (m *Game_NextBlindInfo) GetNextBlindTime() int32 {
	if m != nil && m.NextBlindTime != nil {
		return *m.NextBlindTime
	}
	return 0
}

func (m *Game_NextBlindInfo) GetRestTime() int32 {
	if m != nil && m.RestTime != nil {
		return *m.RestTime
	}
	return 0
}

func (m *Game_NextBlindInfo) GetBlindClass() int32 {
	if m != nil && m.BlindClass != nil {
		return *m.BlindClass
	}
	return 0
}

// 提示休息多长时间
type Game_SendRestTime struct {
	Matchid          []byte `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Resttime         *int32 `protobuf:"varint,3,opt,name=resttime" json:"resttime,omitempty"`
	Type             *int32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	RestIndex        *int32 `protobuf:"varint,5,opt,name=restIndex" json:"restIndex,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_SendRestTime) Reset()                    { *m = Game_SendRestTime{} }
func (m *Game_SendRestTime) String() string            { return proto.CompactTextString(m) }
func (*Game_SendRestTime) ProtoMessage()               {}
func (*Game_SendRestTime) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{41} }

func (m *Game_SendRestTime) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendRestTime) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendRestTime) GetResttime() int32 {
	if m != nil && m.Resttime != nil {
		return *m.Resttime
	}
	return 0
}

func (m *Game_SendRestTime) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Game_SendRestTime) GetRestIndex() int32 {
	if m != nil && m.RestIndex != nil {
		return *m.RestIndex
	}
	return 0
}

// 离桌消息，当用户离开桌子时，给该桌用户发送该消息
type Game_LeaveTable struct {
	Matchid          []byte                  `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32                  `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Seat             *int32                  `protobuf:"varint,3,opt,name=seat" json:"seat,omitempty"`
	Username         []byte                  `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	Reason           *Game_LeaveTable_Reason `protobuf:"varint,5,opt,name=reason,enum=bbproto.Game_LeaveTable_Reason" json:"reason,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *Game_LeaveTable) Reset()                    { *m = Game_LeaveTable{} }
func (m *Game_LeaveTable) String() string            { return proto.CompactTextString(m) }
func (*Game_LeaveTable) ProtoMessage()               {}
func (*Game_LeaveTable) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{42} }

func (m *Game_LeaveTable) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_LeaveTable) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_LeaveTable) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *Game_LeaveTable) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *Game_LeaveTable) GetReason() Game_LeaveTable_Reason {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return Game_LeaveTable_quit_mormal
}

// 前注消息
type Game_PreCoin struct {
	Matchid          []byte  `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32  `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Precoin          []int64 `protobuf:"varint,3,rep,name=precoin" json:"precoin,omitempty"`
	Coin             []int64 `protobuf:"varint,4,rep,name=coin" json:"coin,omitempty"`
	Pool             *int64  `protobuf:"varint,5,opt,name=pool" json:"pool,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_PreCoin) Reset()                    { *m = Game_PreCoin{} }
func (m *Game_PreCoin) String() string            { return proto.CompactTextString(m) }
func (*Game_PreCoin) ProtoMessage()               {}
func (*Game_PreCoin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{43} }

func (m *Game_PreCoin) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_PreCoin) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_PreCoin) GetPrecoin() []int64 {
	if m != nil {
		return m.Precoin
	}
	return nil
}

func (m *Game_PreCoin) GetCoin() []int64 {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *Game_PreCoin) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

// 盲注消息
type Game_BlindCoin struct {
	Matchid          []byte  `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32  `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Banker           *int32  `protobuf:"varint,3,opt,name=banker" json:"banker,omitempty"`
	Handcoin         []int64 `protobuf:"varint,4,rep,name=handcoin" json:"handcoin,omitempty"`
	Coin             []int64 `protobuf:"varint,5,rep,name=coin" json:"coin,omitempty"`
	Pool             *int64  `protobuf:"varint,6,opt,name=pool" json:"pool,omitempty"`
	Smallblindseat   *int32  `protobuf:"varint,7,opt,name=smallblindseat" json:"smallblindseat,omitempty"`
	Bigblindseat     *int32  `protobuf:"varint,8,opt,name=bigblindseat" json:"bigblindseat,omitempty"`
	Smallblind       *int64  `protobuf:"varint,9,opt,name=smallblind" json:"smallblind,omitempty"`
	Bigblind         *int64  `protobuf:"varint,10,opt,name=bigblind" json:"bigblind,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_BlindCoin) Reset()                    { *m = Game_BlindCoin{} }
func (m *Game_BlindCoin) String() string            { return proto.CompactTextString(m) }
func (*Game_BlindCoin) ProtoMessage()               {}
func (*Game_BlindCoin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{44} }

func (m *Game_BlindCoin) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_BlindCoin) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_BlindCoin) GetBanker() int32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

func (m *Game_BlindCoin) GetHandcoin() []int64 {
	if m != nil {
		return m.Handcoin
	}
	return nil
}

func (m *Game_BlindCoin) GetCoin() []int64 {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *Game_BlindCoin) GetPool() int64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *Game_BlindCoin) GetSmallblindseat() int32 {
	if m != nil && m.Smallblindseat != nil {
		return *m.Smallblindseat
	}
	return 0
}

func (m *Game_BlindCoin) GetBigblindseat() int32 {
	if m != nil && m.Bigblindseat != nil {
		return *m.Bigblindseat
	}
	return 0
}

func (m *Game_BlindCoin) GetSmallblind() int64 {
	if m != nil && m.Smallblind != nil {
		return *m.Smallblind
	}
	return 0
}

func (m *Game_BlindCoin) GetBigblind() int64 {
	if m != nil && m.Bigblind != nil {
		return *m.Bigblind
	}
	return 0
}

// 防沉迷消息
type Game_NowelterInfo struct {
	Reusername       []byte `protobuf:"bytes,1,opt,name=reusername" json:"reusername,omitempty"`
	NType            *int32 `protobuf:"varint,2,opt,name=nType" json:"nType,omitempty"`
	NReason          *int32 `protobuf:"varint,3,opt,name=nReason" json:"nReason,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_NowelterInfo) Reset()                    { *m = Game_NowelterInfo{} }
func (m *Game_NowelterInfo) String() string            { return proto.CompactTextString(m) }
func (*Game_NowelterInfo) ProtoMessage()               {}
func (*Game_NowelterInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{45} }

func (m *Game_NowelterInfo) GetReusername() []byte {
	if m != nil {
		return m.Reusername
	}
	return nil
}

func (m *Game_NowelterInfo) GetNType() int32 {
	if m != nil && m.NType != nil {
		return *m.NType
	}
	return 0
}

func (m *Game_NowelterInfo) GetNReason() int32 {
	if m != nil && m.NReason != nil {
		return *m.NReason
	}
	return 0
}

// 现金桌的消息定义
// 请求坐下
type DDReqSitdownSeat struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	NField           *int32 `protobuf:"varint,4,opt,name=nField" json:"nField,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,5,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDReqSitdownSeat) Reset()                    { *m = DDReqSitdownSeat{} }
func (m *DDReqSitdownSeat) String() string            { return proto.CompactTextString(m) }
func (*DDReqSitdownSeat) ProtoMessage()               {}
func (*DDReqSitdownSeat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

func (m *DDReqSitdownSeat) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDReqSitdownSeat) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDReqSitdownSeat) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *DDReqSitdownSeat) GetNField() int32 {
	if m != nil && m.NField != nil {
		return *m.NField
	}
	return 0
}

func (m *DDReqSitdownSeat) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

type DDAckSitdownSeat struct {
	Result           *int32 `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
	Reason           *int32 `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	MatchID          []byte `protobuf:"bytes,3,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,4,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,5,opt,name=nSeatID" json:"nSeatID,omitempty"`
	BForceBuy        *int32 `protobuf:"varint,6,opt,name=bForceBuy" json:"bForceBuy,omitempty"`
	NForceMinChip    *int64 `protobuf:"varint,7,opt,name=nForceMinChip" json:"nForceMinChip,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,8,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDAckSitdownSeat) Reset()                    { *m = DDAckSitdownSeat{} }
func (m *DDAckSitdownSeat) String() string            { return proto.CompactTextString(m) }
func (*DDAckSitdownSeat) ProtoMessage()               {}
func (*DDAckSitdownSeat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

func (m *DDAckSitdownSeat) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *DDAckSitdownSeat) GetReason() int32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *DDAckSitdownSeat) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAckSitdownSeat) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDAckSitdownSeat) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *DDAckSitdownSeat) GetBForceBuy() int32 {
	if m != nil && m.BForceBuy != nil {
		return *m.BForceBuy
	}
	return 0
}

func (m *DDAckSitdownSeat) GetNForceMinChip() int64 {
	if m != nil && m.NForceMinChip != nil {
		return *m.NForceMinChip
	}
	return 0
}

func (m *DDAckSitdownSeat) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

// 带入
type DDReqBuyChip struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	NBuyChip         *int64 `protobuf:"varint,4,opt,name=nBuyChip" json:"nBuyChip,omitempty"`
	NCurChip         *int64 `protobuf:"varint,5,opt,name=nCurChip" json:"nCurChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDReqBuyChip) Reset()                    { *m = DDReqBuyChip{} }
func (m *DDReqBuyChip) String() string            { return proto.CompactTextString(m) }
func (*DDReqBuyChip) ProtoMessage()               {}
func (*DDReqBuyChip) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{48} }

func (m *DDReqBuyChip) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDReqBuyChip) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDReqBuyChip) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *DDReqBuyChip) GetNBuyChip() int64 {
	if m != nil && m.NBuyChip != nil {
		return *m.NBuyChip
	}
	return 0
}

func (m *DDReqBuyChip) GetNCurChip() int64 {
	if m != nil && m.NCurChip != nil {
		return *m.NCurChip
	}
	return 0
}

type DDAckBuyChip struct {
	Result *int32 `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
	Reason *int32 `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	// 7没有该比赛,8数据库操作失败,9不符合强制带入条件,10不在最大最小带入范围内,11游戏中不能带人
	MatchID          []byte `protobuf:"bytes,3,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,4,opt,name=sUserName" json:"sUserName,omitempty"`
	NBuyChip         *int64 `protobuf:"varint,5,opt,name=nBuyChip" json:"nBuyChip,omitempty"`
	NTotalCoin       *int64 `protobuf:"varint,6,opt,name=nTotalCoin" json:"nTotalCoin,omitempty"`
	BWaitBling       *int32 `protobuf:"varint,7,opt,name=bWaitBling" json:"bWaitBling,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDAckBuyChip) Reset()                    { *m = DDAckBuyChip{} }
func (m *DDAckBuyChip) String() string            { return proto.CompactTextString(m) }
func (*DDAckBuyChip) ProtoMessage()               {}
func (*DDAckBuyChip) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{49} }

func (m *DDAckBuyChip) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *DDAckBuyChip) GetReason() int32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *DDAckBuyChip) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAckBuyChip) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDAckBuyChip) GetNBuyChip() int64 {
	if m != nil && m.NBuyChip != nil {
		return *m.NBuyChip
	}
	return 0
}

func (m *DDAckBuyChip) GetNTotalCoin() int64 {
	if m != nil && m.NTotalCoin != nil {
		return *m.NTotalCoin
	}
	return 0
}

func (m *DDAckBuyChip) GetBWaitBling() int32 {
	if m != nil && m.BWaitBling != nil {
		return *m.BWaitBling
	}
	return 0
}

// 由于筹码不够，需要向客户端发送带入的消息
type DDNeetBugChip struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDNeetBugChip) Reset()                    { *m = DDNeetBugChip{} }
func (m *DDNeetBugChip) String() string            { return proto.CompactTextString(m) }
func (*DDNeetBugChip) ProtoMessage()               {}
func (*DDNeetBugChip) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

func (m *DDNeetBugChip) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDNeetBugChip) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

// 请求离座
type DDReqLeave struct {
	MatchID          []byte  `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte  `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32  `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	NUserIP          *uint32 `protobuf:"varint,4,opt,name=nUserIP" json:"nUserIP,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DDReqLeave) Reset()                    { *m = DDReqLeave{} }
func (m *DDReqLeave) String() string            { return proto.CompactTextString(m) }
func (*DDReqLeave) ProtoMessage()               {}
func (*DDReqLeave) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{51} }

func (m *DDReqLeave) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDReqLeave) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDReqLeave) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *DDReqLeave) GetNUserIP() uint32 {
	if m != nil && m.NUserIP != nil {
		return *m.NUserIP
	}
	return 0
}

type DDAckLeave struct {
	Result           *int32 `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
	Reason           *int32 `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	MatchID          []byte `protobuf:"bytes,3,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,4,opt,name=sUserName" json:"sUserName,omitempty"`
	NlCoin           *int64 `protobuf:"varint,5,opt,name=nlCoin" json:"nlCoin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDAckLeave) Reset()                    { *m = DDAckLeave{} }
func (m *DDAckLeave) String() string            { return proto.CompactTextString(m) }
func (*DDAckLeave) ProtoMessage()               {}
func (*DDAckLeave) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{52} }

func (m *DDAckLeave) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *DDAckLeave) GetReason() int32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *DDAckLeave) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAckLeave) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDAckLeave) GetNlCoin() int64 {
	if m != nil && m.NlCoin != nil {
		return *m.NlCoin
	}
	return 0
}

// 带入规则
type DDGameRule struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	MaxChip          *int64 `protobuf:"varint,4,opt,name=MaxChip" json:"MaxChip,omitempty"`
	MinChip          *int64 `protobuf:"varint,5,opt,name=MinChip" json:"MinChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDGameRule) Reset()                    { *m = DDGameRule{} }
func (m *DDGameRule) String() string            { return proto.CompactTextString(m) }
func (*DDGameRule) ProtoMessage()               {}
func (*DDGameRule) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{53} }

func (m *DDGameRule) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDGameRule) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDGameRule) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *DDGameRule) GetMaxChip() int64 {
	if m != nil && m.MaxChip != nil {
		return *m.MaxChip
	}
	return 0
}

func (m *DDGameRule) GetMinChip() int64 {
	if m != nil && m.MinChip != nil {
		return *m.MinChip
	}
	return 0
}

// 等待大盲
type DDWaitBigBling struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	IsWait           *int32 `protobuf:"varint,4,opt,name=IsWait" json:"IsWait,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDWaitBigBling) Reset()                    { *m = DDWaitBigBling{} }
func (m *DDWaitBigBling) String() string            { return proto.CompactTextString(m) }
func (*DDWaitBigBling) ProtoMessage()               {}
func (*DDWaitBigBling) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{54} }

func (m *DDWaitBigBling) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDWaitBigBling) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDWaitBigBling) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *DDWaitBigBling) GetIsWait() int32 {
	if m != nil && m.IsWait != nil {
		return *m.IsWait
	}
	return 0
}

// 下一个大盲旁观
type DDNextBiglingWatch struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	IsWatcher        *int32 `protobuf:"varint,4,opt,name=IsWatcher" json:"IsWatcher,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDNextBiglingWatch) Reset()                    { *m = DDNextBiglingWatch{} }
func (m *DDNextBiglingWatch) String() string            { return proto.CompactTextString(m) }
func (*DDNextBiglingWatch) ProtoMessage()               {}
func (*DDNextBiglingWatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{55} }

func (m *DDNextBiglingWatch) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDNextBiglingWatch) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDNextBiglingWatch) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *DDNextBiglingWatch) GetIsWatcher() int32 {
	if m != nil && m.IsWatcher != nil {
		return *m.IsWatcher
	}
	return 0
}

// 聊天消息
type DDChatMsg struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NSeatID          *int32 `protobuf:"varint,3,opt,name=nSeatID" json:"nSeatID,omitempty"`
	SzChat           []byte `protobuf:"bytes,4,opt,name=szChat" json:"szChat,omitempty"`
	Result           *int32 `protobuf:"varint,5,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDChatMsg) Reset()                    { *m = DDChatMsg{} }
func (m *DDChatMsg) String() string            { return proto.CompactTextString(m) }
func (*DDChatMsg) ProtoMessage()               {}
func (*DDChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{56} }

func (m *DDChatMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDChatMsg) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDChatMsg) GetNSeatID() int32 {
	if m != nil && m.NSeatID != nil {
		return *m.NSeatID
	}
	return 0
}

func (m *DDChatMsg) GetSzChat() []byte {
	if m != nil {
		return m.SzChat
	}
	return nil
}

func (m *DDChatMsg) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 建议消息
type DDProposalMsg struct {
	SName            []byte `protobuf:"bytes,1,opt,name=sName" json:"sName,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	STelephone       []byte `protobuf:"bytes,3,opt,name=sTelephone" json:"sTelephone,omitempty"`
	SContent         []byte `protobuf:"bytes,4,opt,name=sContent" json:"sContent,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDProposalMsg) Reset()                    { *m = DDProposalMsg{} }
func (m *DDProposalMsg) String() string            { return proto.CompactTextString(m) }
func (*DDProposalMsg) ProtoMessage()               {}
func (*DDProposalMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{57} }

func (m *DDProposalMsg) GetSName() []byte {
	if m != nil {
		return m.SName
	}
	return nil
}

func (m *DDProposalMsg) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDProposalMsg) GetSTelephone() []byte {
	if m != nil {
		return m.STelephone
	}
	return nil
}

func (m *DDProposalMsg) GetSContent() []byte {
	if m != nil {
		return m.SContent
	}
	return nil
}

// 付费消息
type DDReqPayMsg struct {
	SUserName        []byte `protobuf:"bytes,1,opt,name=sUserName" json:"sUserName,omitempty"`
	SzTxt            []byte `protobuf:"bytes,2,opt,name=szTxt" json:"szTxt,omitempty"`
	MatchID          []byte `protobuf:"bytes,3,opt,name=MatchID" json:"MatchID,omitempty"`
	NTableNo         *int32 `protobuf:"varint,4,opt,name=nTableNo" json:"nTableNo,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDReqPayMsg) Reset()                    { *m = DDReqPayMsg{} }
func (m *DDReqPayMsg) String() string            { return proto.CompactTextString(m) }
func (*DDReqPayMsg) ProtoMessage()               {}
func (*DDReqPayMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{58} }

func (m *DDReqPayMsg) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDReqPayMsg) GetSzTxt() []byte {
	if m != nil {
		return m.SzTxt
	}
	return nil
}

func (m *DDReqPayMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDReqPayMsg) GetNTableNo() int32 {
	if m != nil && m.NTableNo != nil {
		return *m.NTableNo
	}
	return 0
}

type DDAckPayMsg struct {
	SUserName        []byte              `protobuf:"bytes,1,opt,name=sUserName" json:"sUserName,omitempty"`
	MatchID          []byte              `protobuf:"bytes,2,opt,name=MatchID" json:"MatchID,omitempty"`
	NTableNo         *int32              `protobuf:"varint,3,opt,name=nTableNo" json:"nTableNo,omitempty"`
	SzTxt            []byte              `protobuf:"bytes,4,opt,name=szTxt" json:"szTxt,omitempty"`
	Result           *int32              `protobuf:"varint,5,opt,name=result" json:"result,omitempty"`
	EReason          *DDAckPayMsg_Reason `protobuf:"varint,6,opt,name=eReason,enum=bbproto.DDAckPayMsg_Reason" json:"eReason,omitempty"`
	NType            *int32              `protobuf:"varint,7,opt,name=nType" json:"nType,omitempty"`
	Remaincount      *int32              `protobuf:"varint,8,opt,name=remaincount" json:"remaincount,omitempty"`
	ReduceCoin       *int64              `protobuf:"varint,9,opt,name=reduceCoin" json:"reduceCoin,omitempty"`
	SCFUserName      []byte              `protobuf:"bytes,10,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *DDAckPayMsg) Reset()                    { *m = DDAckPayMsg{} }
func (m *DDAckPayMsg) String() string            { return proto.CompactTextString(m) }
func (*DDAckPayMsg) ProtoMessage()               {}
func (*DDAckPayMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{59} }

func (m *DDAckPayMsg) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDAckPayMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAckPayMsg) GetNTableNo() int32 {
	if m != nil && m.NTableNo != nil {
		return *m.NTableNo
	}
	return 0
}

func (m *DDAckPayMsg) GetSzTxt() []byte {
	if m != nil {
		return m.SzTxt
	}
	return nil
}

func (m *DDAckPayMsg) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *DDAckPayMsg) GetEReason() DDAckPayMsg_Reason {
	if m != nil && m.EReason != nil {
		return *m.EReason
	}
	return DDAckPayMsg_HORN_NOTHING
}

func (m *DDAckPayMsg) GetNType() int32 {
	if m != nil && m.NType != nil {
		return *m.NType
	}
	return 0
}

func (m *DDAckPayMsg) GetRemaincount() int32 {
	if m != nil && m.Remaincount != nil {
		return *m.Remaincount
	}
	return 0
}

func (m *DDAckPayMsg) GetReduceCoin() int64 {
	if m != nil && m.ReduceCoin != nil {
		return *m.ReduceCoin
	}
	return 0
}

func (m *DDAckPayMsg) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

// ======================以下为朋友桌新增消息======================
// 请求兑换活跃度
// #define DDID_TEXASPOKER_EXCHANGEHYD (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000073)
type DDReqExChangeHYD struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NExHYDCount      *int64 `protobuf:"varint,3,opt,name=nExHYDCount" json:"nExHYDCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDReqExChangeHYD) Reset()                    { *m = DDReqExChangeHYD{} }
func (m *DDReqExChangeHYD) String() string            { return proto.CompactTextString(m) }
func (*DDReqExChangeHYD) ProtoMessage()               {}
func (*DDReqExChangeHYD) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{60} }

func (m *DDReqExChangeHYD) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDReqExChangeHYD) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDReqExChangeHYD) GetNExHYDCount() int64 {
	if m != nil && m.NExHYDCount != nil {
		return *m.NExHYDCount
	}
	return 0
}

type DDAckExChangeHYD struct {
	NResult          *int32 `protobuf:"varint,1,opt,name=nResult" json:"nResult,omitempty"`
	MatchID          []byte `protobuf:"bytes,2,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,3,opt,name=sUserName" json:"sUserName,omitempty"`
	NExHYDCount      *int64 `protobuf:"varint,4,opt,name=nExHYDCount" json:"nExHYDCount,omitempty"`
	NCurHYDCount     *int64 `protobuf:"varint,5,opt,name=nCurHYDCount" json:"nCurHYDCount,omitempty"`
	NExCoin          *int64 `protobuf:"varint,6,opt,name=nExCoin" json:"nExCoin,omitempty"`
	NTotalCoin       *int64 `protobuf:"varint,7,opt,name=nTotalCoin" json:"nTotalCoin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDAckExChangeHYD) Reset()                    { *m = DDAckExChangeHYD{} }
func (m *DDAckExChangeHYD) String() string            { return proto.CompactTextString(m) }
func (*DDAckExChangeHYD) ProtoMessage()               {}
func (*DDAckExChangeHYD) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{61} }

func (m *DDAckExChangeHYD) GetNResult() int32 {
	if m != nil && m.NResult != nil {
		return *m.NResult
	}
	return 0
}

func (m *DDAckExChangeHYD) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAckExChangeHYD) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDAckExChangeHYD) GetNExHYDCount() int64 {
	if m != nil && m.NExHYDCount != nil {
		return *m.NExHYDCount
	}
	return 0
}

func (m *DDAckExChangeHYD) GetNCurHYDCount() int64 {
	if m != nil && m.NCurHYDCount != nil {
		return *m.NCurHYDCount
	}
	return 0
}

func (m *DDAckExChangeHYD) GetNExCoin() int64 {
	if m != nil && m.NExCoin != nil {
		return *m.NExCoin
	}
	return 0
}

func (m *DDAckExChangeHYD) GetNTotalCoin() int64 {
	if m != nil && m.NTotalCoin != nil {
		return *m.NTotalCoin
	}
	return 0
}

// 通知活跃度变化
// #define DDID_TEXASPOKER_CHANGEHYD  (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000074)
type DDNtfChangeHYD struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NHYDTotal        *int64 `protobuf:"varint,3,opt,name=nHYDTotal" json:"nHYDTotal,omitempty"`
	NHYDCur          *int64 `protobuf:"varint,4,opt,name=nHYDCur" json:"nHYDCur,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDNtfChangeHYD) Reset()                    { *m = DDNtfChangeHYD{} }
func (m *DDNtfChangeHYD) String() string            { return proto.CompactTextString(m) }
func (*DDNtfChangeHYD) ProtoMessage()               {}
func (*DDNtfChangeHYD) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{62} }

func (m *DDNtfChangeHYD) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDNtfChangeHYD) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDNtfChangeHYD) GetNHYDTotal() int64 {
	if m != nil && m.NHYDTotal != nil {
		return *m.NHYDTotal
	}
	return 0
}

func (m *DDNtfChangeHYD) GetNHYDCur() int64 {
	if m != nil && m.NHYDCur != nil {
		return *m.NHYDCur
	}
	return 0
}

// 请求赠送金币
// #define DDID_TEXASPOKER_PRESENTCOINS (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000075)
type DDReqPresentCoins struct {
	MatchID          []byte  `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SSender          []byte  `protobuf:"bytes,2,opt,name=sSender" json:"sSender,omitempty"`
	SRecver          []byte  `protobuf:"bytes,3,opt,name=sRecver" json:"sRecver,omitempty"`
	NCoin            *int64  `protobuf:"varint,4,opt,name=nCoin" json:"nCoin,omitempty"`
	NIPSender        *uint32 `protobuf:"varint,5,opt,name=nIPSender" json:"nIPSender,omitempty"`
	NIPRecver        *uint32 `protobuf:"varint,6,opt,name=nIPRecver" json:"nIPRecver,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DDReqPresentCoins) Reset()                    { *m = DDReqPresentCoins{} }
func (m *DDReqPresentCoins) String() string            { return proto.CompactTextString(m) }
func (*DDReqPresentCoins) ProtoMessage()               {}
func (*DDReqPresentCoins) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{63} }

func (m *DDReqPresentCoins) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDReqPresentCoins) GetSSender() []byte {
	if m != nil {
		return m.SSender
	}
	return nil
}

func (m *DDReqPresentCoins) GetSRecver() []byte {
	if m != nil {
		return m.SRecver
	}
	return nil
}

func (m *DDReqPresentCoins) GetNCoin() int64 {
	if m != nil && m.NCoin != nil {
		return *m.NCoin
	}
	return 0
}

func (m *DDReqPresentCoins) GetNIPSender() uint32 {
	if m != nil && m.NIPSender != nil {
		return *m.NIPSender
	}
	return 0
}

func (m *DDReqPresentCoins) GetNIPRecver() uint32 {
	if m != nil && m.NIPRecver != nil {
		return *m.NIPRecver
	}
	return 0
}

type DDAckPresentCoins struct {
	MatchID          []byte                    `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	NResult          *int32                    `protobuf:"varint,2,opt,name=nResult" json:"nResult,omitempty"`
	SSender          []byte                    `protobuf:"bytes,3,opt,name=sSender" json:"sSender,omitempty"`
	SRecver          []byte                    `protobuf:"bytes,4,opt,name=sRecver" json:"sRecver,omitempty"`
	NPresentCoin     *int64                    `protobuf:"varint,5,opt,name=nPresentCoin" json:"nPresentCoin,omitempty"`
	EReason          *DDAckPresentCoins_Reason `protobuf:"varint,6,opt,name=eReason,enum=bbproto.DDAckPresentCoins_Reason" json:"eReason,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *DDAckPresentCoins) Reset()                    { *m = DDAckPresentCoins{} }
func (m *DDAckPresentCoins) String() string            { return proto.CompactTextString(m) }
func (*DDAckPresentCoins) ProtoMessage()               {}
func (*DDAckPresentCoins) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{64} }

func (m *DDAckPresentCoins) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAckPresentCoins) GetNResult() int32 {
	if m != nil && m.NResult != nil {
		return *m.NResult
	}
	return 0
}

func (m *DDAckPresentCoins) GetSSender() []byte {
	if m != nil {
		return m.SSender
	}
	return nil
}

func (m *DDAckPresentCoins) GetSRecver() []byte {
	if m != nil {
		return m.SRecver
	}
	return nil
}

func (m *DDAckPresentCoins) GetNPresentCoin() int64 {
	if m != nil && m.NPresentCoin != nil {
		return *m.NPresentCoin
	}
	return 0
}

func (m *DDAckPresentCoins) GetEReason() DDAckPresentCoins_Reason {
	if m != nil && m.EReason != nil {
		return *m.EReason
	}
	return DDAckPresentCoins_PC_NOTHING
}

// 私聊消息
// #define DDID_TEXASPOKER_PRIVATECHAT (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000076)
type DDReqPrivateChatMsg struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SSender          []byte `protobuf:"bytes,2,opt,name=sSender" json:"sSender,omitempty"`
	SRecver          []byte `protobuf:"bytes,3,opt,name=sRecver" json:"sRecver,omitempty"`
	SzChat           []byte `protobuf:"bytes,4,opt,name=szChat" json:"szChat,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDReqPrivateChatMsg) Reset()                    { *m = DDReqPrivateChatMsg{} }
func (m *DDReqPrivateChatMsg) String() string            { return proto.CompactTextString(m) }
func (*DDReqPrivateChatMsg) ProtoMessage()               {}
func (*DDReqPrivateChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{65} }

func (m *DDReqPrivateChatMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDReqPrivateChatMsg) GetSSender() []byte {
	if m != nil {
		return m.SSender
	}
	return nil
}

func (m *DDReqPrivateChatMsg) GetSRecver() []byte {
	if m != nil {
		return m.SRecver
	}
	return nil
}

func (m *DDReqPrivateChatMsg) GetSzChat() []byte {
	if m != nil {
		return m.SzChat
	}
	return nil
}

type DDAckPrivateChatMsg struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SSender          []byte `protobuf:"bytes,2,opt,name=sSender" json:"sSender,omitempty"`
	SRecver          []byte `protobuf:"bytes,3,opt,name=sRecver" json:"sRecver,omitempty"`
	SzChat           []byte `protobuf:"bytes,4,opt,name=szChat" json:"szChat,omitempty"`
	Result           *int32 `protobuf:"varint,5,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDAckPrivateChatMsg) Reset()                    { *m = DDAckPrivateChatMsg{} }
func (m *DDAckPrivateChatMsg) String() string            { return proto.CompactTextString(m) }
func (*DDAckPrivateChatMsg) ProtoMessage()               {}
func (*DDAckPrivateChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{66} }

func (m *DDAckPrivateChatMsg) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAckPrivateChatMsg) GetSSender() []byte {
	if m != nil {
		return m.SSender
	}
	return nil
}

func (m *DDAckPrivateChatMsg) GetSRecver() []byte {
	if m != nil {
		return m.SRecver
	}
	return nil
}

func (m *DDAckPrivateChatMsg) GetSzChat() []byte {
	if m != nil {
		return m.SzChat
	}
	return nil
}

func (m *DDAckPrivateChatMsg) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 禁言和解除禁言
// #define DDID_TEXASPOKER_ABLEORUNABLECHAT (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000077)
type DDReqAbleOrUnableChat struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SCreater         []byte `protobuf:"bytes,2,opt,name=sCreater" json:"sCreater,omitempty"`
	SChatUser        []byte `protobuf:"bytes,3,opt,name=sChatUser" json:"sChatUser,omitempty"`
	NAbleFlag        *int32 `protobuf:"varint,4,opt,name=nAbleFlag" json:"nAbleFlag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDReqAbleOrUnableChat) Reset()                    { *m = DDReqAbleOrUnableChat{} }
func (m *DDReqAbleOrUnableChat) String() string            { return proto.CompactTextString(m) }
func (*DDReqAbleOrUnableChat) ProtoMessage()               {}
func (*DDReqAbleOrUnableChat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{67} }

func (m *DDReqAbleOrUnableChat) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDReqAbleOrUnableChat) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

func (m *DDReqAbleOrUnableChat) GetSChatUser() []byte {
	if m != nil {
		return m.SChatUser
	}
	return nil
}

func (m *DDReqAbleOrUnableChat) GetNAbleFlag() int32 {
	if m != nil && m.NAbleFlag != nil {
		return *m.NAbleFlag
	}
	return 0
}

type DDAckAbleOrUnableChat struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SCreater         []byte `protobuf:"bytes,2,opt,name=sCreater" json:"sCreater,omitempty"`
	SChatUser        []byte `protobuf:"bytes,3,opt,name=sChatUser" json:"sChatUser,omitempty"`
	NAbleFlag        *int32 `protobuf:"varint,4,opt,name=nAbleFlag" json:"nAbleFlag,omitempty"`
	NResult          *int32 `protobuf:"varint,5,opt,name=nResult" json:"nResult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDAckAbleOrUnableChat) Reset()                    { *m = DDAckAbleOrUnableChat{} }
func (m *DDAckAbleOrUnableChat) String() string            { return proto.CompactTextString(m) }
func (*DDAckAbleOrUnableChat) ProtoMessage()               {}
func (*DDAckAbleOrUnableChat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{68} }

func (m *DDAckAbleOrUnableChat) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAckAbleOrUnableChat) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

func (m *DDAckAbleOrUnableChat) GetSChatUser() []byte {
	if m != nil {
		return m.SChatUser
	}
	return nil
}

func (m *DDAckAbleOrUnableChat) GetNAbleFlag() int32 {
	if m != nil && m.NAbleFlag != nil {
		return *m.NAbleFlag
	}
	return 0
}

func (m *DDAckAbleOrUnableChat) GetNResult() int32 {
	if m != nil && m.NResult != nil {
		return *m.NResult
	}
	return 0
}

// 踢人
// #define DDID_TEXASPOKER_KICK            (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000078)
type DDReqKick struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SCreater         []byte `protobuf:"bytes,2,opt,name=sCreater" json:"sCreater,omitempty"`
	SKickered        []byte `protobuf:"bytes,3,opt,name=sKickered" json:"sKickered,omitempty"`
	NClinetId        *int64 `protobuf:"varint,4,opt,name=nClinetId" json:"nClinetId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDReqKick) Reset()                    { *m = DDReqKick{} }
func (m *DDReqKick) String() string            { return proto.CompactTextString(m) }
func (*DDReqKick) ProtoMessage()               {}
func (*DDReqKick) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{69} }

func (m *DDReqKick) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDReqKick) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

func (m *DDReqKick) GetSKickered() []byte {
	if m != nil {
		return m.SKickered
	}
	return nil
}

func (m *DDReqKick) GetNClinetId() int64 {
	if m != nil && m.NClinetId != nil {
		return *m.NClinetId
	}
	return 0
}

type DDAckKick struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SCreater         []byte `protobuf:"bytes,2,opt,name=sCreater" json:"sCreater,omitempty"`
	SKickered        []byte `protobuf:"bytes,3,opt,name=sKickered" json:"sKickered,omitempty"`
	NResult          *int32 `protobuf:"varint,4,opt,name=nResult" json:"nResult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDAckKick) Reset()                    { *m = DDAckKick{} }
func (m *DDAckKick) String() string            { return proto.CompactTextString(m) }
func (*DDAckKick) ProtoMessage()               {}
func (*DDAckKick) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{70} }

func (m *DDAckKick) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAckKick) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

func (m *DDAckKick) GetSKickered() []byte {
	if m != nil {
		return m.SKickered
	}
	return nil
}

func (m *DDAckKick) GetNResult() int32 {
	if m != nil && m.NResult != nil {
		return *m.NResult
	}
	return 0
}

// 玩家列表,包含旁观者和游戏者 ,为了以后踢人用
// #define DDID_TEXASPOKER_USERLIST         (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000079)
type DDUserInfos struct {
	SUserName        []byte `protobuf:"bytes,1,opt,name=sUserName" json:"sUserName,omitempty"`
	NClinetId        *int64 `protobuf:"varint,2,opt,name=nClinetId" json:"nClinetId,omitempty"`
	NIp              *int32 `protobuf:"varint,3,opt,name=nIp" json:"nIp,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,4,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDUserInfos) Reset()                    { *m = DDUserInfos{} }
func (m *DDUserInfos) String() string            { return proto.CompactTextString(m) }
func (*DDUserInfos) ProtoMessage()               {}
func (*DDUserInfos) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{71} }

func (m *DDUserInfos) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDUserInfos) GetNClinetId() int64 {
	if m != nil && m.NClinetId != nil {
		return *m.NClinetId
	}
	return 0
}

func (m *DDUserInfos) GetNIp() int32 {
	if m != nil && m.NIp != nil {
		return *m.NIp
	}
	return 0
}

func (m *DDUserInfos) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

type DDUserList struct {
	MatchID          []byte         `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	Userlist         []*DDUserInfos `protobuf:"bytes,2,rep,name=userlist" json:"userlist,omitempty"`
	SCreater         []byte         `protobuf:"bytes,3,opt,name=sCreater" json:"sCreater,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *DDUserList) Reset()                    { *m = DDUserList{} }
func (m *DDUserList) String() string            { return proto.CompactTextString(m) }
func (*DDUserList) ProtoMessage()               {}
func (*DDUserList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{72} }

func (m *DDUserList) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDUserList) GetUserlist() []*DDUserInfos {
	if m != nil {
		return m.Userlist
	}
	return nil
}

func (m *DDUserList) GetSCreater() []byte {
	if m != nil {
		return m.SCreater
	}
	return nil
}

// 修改配置
// #define DDID_TEXASPOKER_MODIFYCONFIG      (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000080)
type DDModifyConfig struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	STableName       []byte `protobuf:"bytes,2,opt,name=sTableName" json:"sTableName,omitempty"`
	NCGZ_MaxChip     *int64 `protobuf:"varint,3,opt,name=nCGZ_MaxChip" json:"nCGZ_MaxChip,omitempty"`
	NCGZ_MinChip     *int64 `protobuf:"varint,4,opt,name=nCGZ_MinChip" json:"nCGZ_MinChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDModifyConfig) Reset()                    { *m = DDModifyConfig{} }
func (m *DDModifyConfig) String() string            { return proto.CompactTextString(m) }
func (*DDModifyConfig) ProtoMessage()               {}
func (*DDModifyConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{73} }

func (m *DDModifyConfig) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDModifyConfig) GetSTableName() []byte {
	if m != nil {
		return m.STableName
	}
	return nil
}

func (m *DDModifyConfig) GetNCGZ_MaxChip() int64 {
	if m != nil && m.NCGZ_MaxChip != nil {
		return *m.NCGZ_MaxChip
	}
	return 0
}

func (m *DDModifyConfig) GetNCGZ_MinChip() int64 {
	if m != nil && m.NCGZ_MinChip != nil {
		return *m.NCGZ_MinChip
	}
	return 0
}

// 向玩家发送禁言者的列表
// #define DDID_TEXASPOKER_UNABLECHATLIST    (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000081)
type DDUnAbleChatList struct {
	MatchID          []byte   `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SzUserName       [][]byte `protobuf:"bytes,2,rep,name=szUserName" json:"szUserName,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DDUnAbleChatList) Reset()                    { *m = DDUnAbleChatList{} }
func (m *DDUnAbleChatList) String() string            { return proto.CompactTextString(m) }
func (*DDUnAbleChatList) ProtoMessage()               {}
func (*DDUnAbleChatList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{74} }

func (m *DDUnAbleChatList) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDUnAbleChatList) GetSzUserName() [][]byte {
	if m != nil {
		return m.SzUserName
	}
	return nil
}

// 随机显示图片
// #define DDID_TEXASPOKER_SHOWPICTRUE       (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000082)
type DDShowPictrue struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	NTableId         *int32 `protobuf:"varint,2,opt,name=nTableId" json:"nTableId,omitempty"`
	SzUserName       []byte `protobuf:"bytes,3,opt,name=szUserName" json:"szUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDShowPictrue) Reset()                    { *m = DDShowPictrue{} }
func (m *DDShowPictrue) String() string            { return proto.CompactTextString(m) }
func (*DDShowPictrue) ProtoMessage()               {}
func (*DDShowPictrue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{75} }

func (m *DDShowPictrue) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDShowPictrue) GetNTableId() int32 {
	if m != nil && m.NTableId != nil {
		return *m.NTableId
	}
	return 0
}

func (m *DDShowPictrue) GetSzUserName() []byte {
	if m != nil {
		return m.SzUserName
	}
	return nil
}

// 新玩家加入玩家列表
// #define DDID_TEXASPOKER_ADDUSER           (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000083)
type DDAddUserToList struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	NClinetId        *int64 `protobuf:"varint,3,opt,name=nClinetId" json:"nClinetId,omitempty"`
	NIp              *int32 `protobuf:"varint,4,opt,name=nIp" json:"nIp,omitempty"`
	SCFUserName      []byte `protobuf:"bytes,5,opt,name=sCFUserName" json:"sCFUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDAddUserToList) Reset()                    { *m = DDAddUserToList{} }
func (m *DDAddUserToList) String() string            { return proto.CompactTextString(m) }
func (*DDAddUserToList) ProtoMessage()               {}
func (*DDAddUserToList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{76} }

func (m *DDAddUserToList) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDAddUserToList) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

func (m *DDAddUserToList) GetNClinetId() int64 {
	if m != nil && m.NClinetId != nil {
		return *m.NClinetId
	}
	return 0
}

func (m *DDAddUserToList) GetNIp() int32 {
	if m != nil && m.NIp != nil {
		return *m.NIp
	}
	return 0
}

func (m *DDAddUserToList) GetSCFUserName() []byte {
	if m != nil {
		return m.SCFUserName
	}
	return nil
}

// 玩家从列表中删除
// #define DDID_TEXASPOKER_DELETEUSER        (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000084)
type DDDeleteUserFromList struct {
	MatchID          []byte `protobuf:"bytes,1,opt,name=MatchID" json:"MatchID,omitempty"`
	SUserName        []byte `protobuf:"bytes,2,opt,name=sUserName" json:"sUserName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDDeleteUserFromList) Reset()                    { *m = DDDeleteUserFromList{} }
func (m *DDDeleteUserFromList) String() string            { return proto.CompactTextString(m) }
func (*DDDeleteUserFromList) ProtoMessage()               {}
func (*DDDeleteUserFromList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{77} }

func (m *DDDeleteUserFromList) GetMatchID() []byte {
	if m != nil {
		return m.MatchID
	}
	return nil
}

func (m *DDDeleteUserFromList) GetSUserName() []byte {
	if m != nil {
		return m.SUserName
	}
	return nil
}

// 当否玩家进入牌桌坐下后，向本桌内的其他玩家广播此玩家的礼品状态 和 标志
// #define DDID_BROADCAST_PLAYER_GIFT_STATUS       (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000085)
type DDBroadCastPlayerGiftStatus struct {
	RoleName         []byte `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	Gift             []byte `protobuf:"bytes,2,opt,name=gift" json:"gift,omitempty"`
	Nbcard           []byte `protobuf:"bytes,3,opt,name=nbcard" json:"nbcard,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDBroadCastPlayerGiftStatus) Reset()                    { *m = DDBroadCastPlayerGiftStatus{} }
func (m *DDBroadCastPlayerGiftStatus) String() string            { return proto.CompactTextString(m) }
func (*DDBroadCastPlayerGiftStatus) ProtoMessage()               {}
func (*DDBroadCastPlayerGiftStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{78} }

func (m *DDBroadCastPlayerGiftStatus) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *DDBroadCastPlayerGiftStatus) GetGift() []byte {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *DDBroadCastPlayerGiftStatus) GetNbcard() []byte {
	if m != nil {
		return m.Nbcard
	}
	return nil
}

// 赠送礼品(客户端接到此消息后应仅作播放动画操作)
// #define DDID_GIVEGIFT       (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000086)
type DDGiveGift struct {
	CustomerName     []byte   `protobuf:"bytes,1,opt,name=customerName" json:"customerName,omitempty"`
	GiftId           []byte   `protobuf:"bytes,2,opt,name=giftId" json:"giftId,omitempty"`
	Receivers        [][]byte `protobuf:"bytes,3,rep,name=receivers" json:"receivers,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DDGiveGift) Reset()                    { *m = DDGiveGift{} }
func (m *DDGiveGift) String() string            { return proto.CompactTextString(m) }
func (*DDGiveGift) ProtoMessage()               {}
func (*DDGiveGift) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{79} }

func (m *DDGiveGift) GetCustomerName() []byte {
	if m != nil {
		return m.CustomerName
	}
	return nil
}

func (m *DDGiveGift) GetGiftId() []byte {
	if m != nil {
		return m.GiftId
	}
	return nil
}

func (m *DDGiveGift) GetReceivers() [][]byte {
	if m != nil {
		return m.Receivers
	}
	return nil
}

// 赠送道具(客户端接收到此消息后重新发送查询玩家礼品状态消息,这样贵族卡才能及时更新)
// #define DDID_GIVEITEM       (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000089)
type DDGiveItem struct {
	CustomerName     []byte `protobuf:"bytes,1,opt,name=customerName" json:"customerName,omitempty"`
	Item             []byte `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
	Receivers        []byte `protobuf:"bytes,3,opt,name=receivers" json:"receivers,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDGiveItem) Reset()                    { *m = DDGiveItem{} }
func (m *DDGiveItem) String() string            { return proto.CompactTextString(m) }
func (*DDGiveItem) ProtoMessage()               {}
func (*DDGiveItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{80} }

func (m *DDGiveItem) GetCustomerName() []byte {
	if m != nil {
		return m.CustomerName
	}
	return nil
}

func (m *DDGiveItem) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *DDGiveItem) GetReceivers() []byte {
	if m != nil {
		return m.Receivers
	}
	return nil
}

// 广播表情
// #define DDID_BROADCAST_FACE (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x00000087)
type DDBroadCastFace struct {
	RoleName         []byte  `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	FaceType         *uint32 `protobuf:"varint,2,opt,name=faceType" json:"faceType,omitempty"`
	FaceContent      []byte  `protobuf:"bytes,3,opt,name=faceContent" json:"faceContent,omitempty"`
	Seat             *uint32 `protobuf:"varint,4,opt,name=seat" json:"seat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DDBroadCastFace) Reset()                    { *m = DDBroadCastFace{} }
func (m *DDBroadCastFace) String() string            { return proto.CompactTextString(m) }
func (*DDBroadCastFace) ProtoMessage()               {}
func (*DDBroadCastFace) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{81} }

func (m *DDBroadCastFace) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *DDBroadCastFace) GetFaceType() uint32 {
	if m != nil && m.FaceType != nil {
		return *m.FaceType
	}
	return 0
}

func (m *DDBroadCastFace) GetFaceContent() []byte {
	if m != nil {
		return m.FaceContent
	}
	return nil
}

func (m *DDBroadCastFace) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type DDReqRebuy struct {
	RoleName         []byte `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	Matchid          []byte `protobuf:"bytes,2,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,3,opt,name=tableid" json:"tableid,omitempty"`
	Type             *int32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	MoneyType        *int32 `protobuf:"varint,5,opt,name=moneyType" json:"moneyType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDReqRebuy) Reset()                    { *m = DDReqRebuy{} }
func (m *DDReqRebuy) String() string            { return proto.CompactTextString(m) }
func (*DDReqRebuy) ProtoMessage()               {}
func (*DDReqRebuy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{82} }

func (m *DDReqRebuy) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *DDReqRebuy) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *DDReqRebuy) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *DDReqRebuy) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *DDReqRebuy) GetMoneyType() int32 {
	if m != nil && m.MoneyType != nil {
		return *m.MoneyType
	}
	return 0
}

type DDAckRebuy struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Reson            *int32 `protobuf:"varint,2,opt,name=reson" json:"reson,omitempty"`
	RoleName         []byte `protobuf:"bytes,3,opt,name=roleName" json:"roleName,omitempty"`
	Matchid          []byte `protobuf:"bytes,4,opt,name=matchid" json:"matchid,omitempty"`
	Tableid          *int32 `protobuf:"varint,5,opt,name=tableid" json:"tableid,omitempty"`
	NTicketCount     *int32 `protobuf:"varint,6,opt,name=nTicketCount" json:"nTicketCount,omitempty"`
	Type             *int32 `protobuf:"varint,7,opt,name=type" json:"type,omitempty"`
	NCount           *int32 `protobuf:"varint,8,opt,name=nCount" json:"nCount,omitempty"`
	NResultChip      *int64 `protobuf:"varint,9,opt,name=nResultChip" json:"nResultChip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDAckRebuy) Reset()                    { *m = DDAckRebuy{} }
func (m *DDAckRebuy) String() string            { return proto.CompactTextString(m) }
func (*DDAckRebuy) ProtoMessage()               {}
func (*DDAckRebuy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{83} }

func (m *DDAckRebuy) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *DDAckRebuy) GetReson() int32 {
	if m != nil && m.Reson != nil {
		return *m.Reson
	}
	return 0
}

func (m *DDAckRebuy) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *DDAckRebuy) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *DDAckRebuy) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *DDAckRebuy) GetNTicketCount() int32 {
	if m != nil && m.NTicketCount != nil {
		return *m.NTicketCount
	}
	return 0
}

func (m *DDAckRebuy) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *DDAckRebuy) GetNCount() int32 {
	if m != nil && m.NCount != nil {
		return *m.NCount
	}
	return 0
}

func (m *DDAckRebuy) GetNResultChip() int64 {
	if m != nil && m.NResultChip != nil {
		return *m.NResultChip
	}
	return 0
}

// 广播比赛名次，奖励
// #define DDID_BROADCAST_MATCHRANK        (DDID_MSGBASE_TEXASPOKER_GAMEBASE + 0x0000008A)
type DDBroadCastMatchRank struct {
	RoleName         []byte `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	MatchName        []byte `protobuf:"bytes,2,opt,name=matchName" json:"matchName,omitempty"`
	NRank            *int32 `protobuf:"varint,3,opt,name=nRank" json:"nRank,omitempty"`
	NRewardType      *int32 `protobuf:"varint,4,opt,name=nRewardType" json:"nRewardType,omitempty"`
	NRewardCount     *int64 `protobuf:"varint,5,opt,name=nRewardCount" json:"nRewardCount,omitempty"`
	RewardName       []byte `protobuf:"bytes,6,opt,name=RewardName" json:"RewardName,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDBroadCastMatchRank) Reset()                    { *m = DDBroadCastMatchRank{} }
func (m *DDBroadCastMatchRank) String() string            { return proto.CompactTextString(m) }
func (*DDBroadCastMatchRank) ProtoMessage()               {}
func (*DDBroadCastMatchRank) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{84} }

func (m *DDBroadCastMatchRank) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *DDBroadCastMatchRank) GetMatchName() []byte {
	if m != nil {
		return m.MatchName
	}
	return nil
}

func (m *DDBroadCastMatchRank) GetNRank() int32 {
	if m != nil && m.NRank != nil {
		return *m.NRank
	}
	return 0
}

func (m *DDBroadCastMatchRank) GetNRewardType() int32 {
	if m != nil && m.NRewardType != nil {
		return *m.NRewardType
	}
	return 0
}

func (m *DDBroadCastMatchRank) GetNRewardCount() int64 {
	if m != nil && m.NRewardCount != nil {
		return *m.NRewardCount
	}
	return 0
}

func (m *DDBroadCastMatchRank) GetRewardName() []byte {
	if m != nil {
		return m.RewardName
	}
	return nil
}

// 注册
// SHENJINGID_SVR_REG = 0x00001003;//注册消息
type REQSHENJINGReg struct {
	UserName         *string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Pwd              *string `protobuf:"bytes,2,opt,name=Pwd" json:"Pwd,omitempty"`
	VerifyId         *int32  `protobuf:"varint,3,opt,name=VerifyId" json:"VerifyId,omitempty"`
	VerifyStr        *string `protobuf:"bytes,4,opt,name=VerifyStr" json:"VerifyStr,omitempty"`
	SecureID         *string `protobuf:"bytes,5,opt,name=SecureID" json:"SecureID,omitempty"`
	ComeFromID       *int32  `protobuf:"varint,6,opt,name=ComeFromID" json:"ComeFromID,omitempty"`
	ChannelID        *string `protobuf:"bytes,7,opt,name=ChannelID" json:"ChannelID,omitempty"`
	GameId           *int32  `protobuf:"varint,8,opt,name=GameId" json:"GameId,omitempty"`
	Token            *string `protobuf:"bytes,9,opt,name=token" json:"token,omitempty"`
	UserNameApl      []byte  `protobuf:"bytes,10,opt,name=UserNameApl" json:"UserNameApl,omitempty"`
	RoomAdapte       *int32  `protobuf:"varint,11,opt,name=RoomAdapte,def=0" json:"RoomAdapte,omitempty"`
	Sex              *int32  `protobuf:"varint,12,opt,name=Sex,def=0" json:"Sex,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *REQSHENJINGReg) Reset()                    { *m = REQSHENJINGReg{} }
func (m *REQSHENJINGReg) String() string            { return proto.CompactTextString(m) }
func (*REQSHENJINGReg) ProtoMessage()               {}
func (*REQSHENJINGReg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{85} }

const Default_REQSHENJINGReg_RoomAdapte int32 = 0
const Default_REQSHENJINGReg_Sex int32 = 0

func (m *REQSHENJINGReg) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *REQSHENJINGReg) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

func (m *REQSHENJINGReg) GetVerifyId() int32 {
	if m != nil && m.VerifyId != nil {
		return *m.VerifyId
	}
	return 0
}

func (m *REQSHENJINGReg) GetVerifyStr() string {
	if m != nil && m.VerifyStr != nil {
		return *m.VerifyStr
	}
	return ""
}

func (m *REQSHENJINGReg) GetSecureID() string {
	if m != nil && m.SecureID != nil {
		return *m.SecureID
	}
	return ""
}

func (m *REQSHENJINGReg) GetComeFromID() int32 {
	if m != nil && m.ComeFromID != nil {
		return *m.ComeFromID
	}
	return 0
}

func (m *REQSHENJINGReg) GetChannelID() string {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return ""
}

func (m *REQSHENJINGReg) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *REQSHENJINGReg) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *REQSHENJINGReg) GetUserNameApl() []byte {
	if m != nil {
		return m.UserNameApl
	}
	return nil
}

func (m *REQSHENJINGReg) GetRoomAdapte() int32 {
	if m != nil && m.RoomAdapte != nil {
		return *m.RoomAdapte
	}
	return Default_REQSHENJINGReg_RoomAdapte
}

func (m *REQSHENJINGReg) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return Default_REQSHENJINGReg_Sex
}

type ACKSHENJINGReg struct {
	AckResult        *int32        `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	ErrorStr         *string       `protobuf:"bytes,2,opt,name=ErrorStr" json:"ErrorStr,omitempty"`
	Cert             []byte        `protobuf:"bytes,3,opt,name=cert" json:"cert,omitempty"`
	RoleName         *string       `protobuf:"bytes,4,opt,name=RoleName" json:"RoleName,omitempty"`
	RoomList         []*DDRoomInfo `protobuf:"bytes,5,rep,name=RoomList" json:"RoomList,omitempty"`
	LoginId          *int32        `protobuf:"varint,6,opt,name=LoginId" json:"LoginId,omitempty"`
	MatchRoomList    []*DDRoomInfo `protobuf:"bytes,7,rep,name=MatchRoomList" json:"MatchRoomList,omitempty"`
	CertNoRole       []byte        `protobuf:"bytes,8,opt,name=CertNoRole" json:"CertNoRole,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ACKSHENJINGReg) Reset()                    { *m = ACKSHENJINGReg{} }
func (m *ACKSHENJINGReg) String() string            { return proto.CompactTextString(m) }
func (*ACKSHENJINGReg) ProtoMessage()               {}
func (*ACKSHENJINGReg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{86} }

func (m *ACKSHENJINGReg) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

func (m *ACKSHENJINGReg) GetErrorStr() string {
	if m != nil && m.ErrorStr != nil {
		return *m.ErrorStr
	}
	return ""
}

func (m *ACKSHENJINGReg) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *ACKSHENJINGReg) GetRoleName() string {
	if m != nil && m.RoleName != nil {
		return *m.RoleName
	}
	return ""
}

func (m *ACKSHENJINGReg) GetRoomList() []*DDRoomInfo {
	if m != nil {
		return m.RoomList
	}
	return nil
}

func (m *ACKSHENJINGReg) GetLoginId() int32 {
	if m != nil && m.LoginId != nil {
		return *m.LoginId
	}
	return 0
}

func (m *ACKSHENJINGReg) GetMatchRoomList() []*DDRoomInfo {
	if m != nil {
		return m.MatchRoomList
	}
	return nil
}

func (m *ACKSHENJINGReg) GetCertNoRole() []byte {
	if m != nil {
		return m.CertNoRole
	}
	return nil
}

// 登录SHENJING服务器
// SHENJINGID_SVR_LDDINCONN = 0x00001001;//登录消息
type REQSHENJINGConn struct {
	UserName         *string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	Pwd              *string `protobuf:"bytes,3,opt,name=Pwd" json:"Pwd,omitempty"`
	Sex              *int32  `protobuf:"varint,4,opt,name=Sex" json:"Sex,omitempty"`
	SecureID         *string `protobuf:"bytes,5,opt,name=SecureID" json:"SecureID,omitempty"`
	ComeFromID       *int32  `protobuf:"varint,6,opt,name=ComeFromID" json:"ComeFromID,omitempty"`
	ChannelID        *string `protobuf:"bytes,7,opt,name=ChannelID" json:"ChannelID,omitempty"`
	GameId           *int32  `protobuf:"varint,8,opt,name=GameId" json:"GameId,omitempty"`
	Token            *string `protobuf:"bytes,9,opt,name=token" json:"token,omitempty"`
	UserNameApl      []byte  `protobuf:"bytes,10,opt,name=UserNameApl" json:"UserNameApl,omitempty"`
	VerifyId         *int32  `protobuf:"varint,11,opt,name=VerifyId" json:"VerifyId,omitempty"`
	Ticket           *string `protobuf:"bytes,12,opt,name=Ticket" json:"Ticket,omitempty"`
	RoomAdapte       *int32  `protobuf:"varint,13,opt,name=RoomAdapte,def=0" json:"RoomAdapte,omitempty"`
	LoginType        *int32  `protobuf:"varint,14,opt,name=LoginType,def=0" json:"LoginType,omitempty"`
	GroupID          *int32  `protobuf:"varint,15,opt,name=GroupID" json:"GroupID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *REQSHENJINGConn) Reset()                    { *m = REQSHENJINGConn{} }
func (m *REQSHENJINGConn) String() string            { return proto.CompactTextString(m) }
func (*REQSHENJINGConn) ProtoMessage()               {}
func (*REQSHENJINGConn) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{87} }

const Default_REQSHENJINGConn_RoomAdapte int32 = 0
const Default_REQSHENJINGConn_LoginType int32 = 0

func (m *REQSHENJINGConn) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *REQSHENJINGConn) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *REQSHENJINGConn) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

func (m *REQSHENJINGConn) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *REQSHENJINGConn) GetSecureID() string {
	if m != nil && m.SecureID != nil {
		return *m.SecureID
	}
	return ""
}

func (m *REQSHENJINGConn) GetComeFromID() int32 {
	if m != nil && m.ComeFromID != nil {
		return *m.ComeFromID
	}
	return 0
}

func (m *REQSHENJINGConn) GetChannelID() string {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return ""
}

func (m *REQSHENJINGConn) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *REQSHENJINGConn) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *REQSHENJINGConn) GetUserNameApl() []byte {
	if m != nil {
		return m.UserNameApl
	}
	return nil
}

func (m *REQSHENJINGConn) GetVerifyId() int32 {
	if m != nil && m.VerifyId != nil {
		return *m.VerifyId
	}
	return 0
}

func (m *REQSHENJINGConn) GetTicket() string {
	if m != nil && m.Ticket != nil {
		return *m.Ticket
	}
	return ""
}

func (m *REQSHENJINGConn) GetRoomAdapte() int32 {
	if m != nil && m.RoomAdapte != nil {
		return *m.RoomAdapte
	}
	return Default_REQSHENJINGConn_RoomAdapte
}

func (m *REQSHENJINGConn) GetLoginType() int32 {
	if m != nil && m.LoginType != nil {
		return *m.LoginType
	}
	return Default_REQSHENJINGConn_LoginType
}

func (m *REQSHENJINGConn) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

type ACKSHENJINGConn struct {
	AckResult         *int32              `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	Cert              []byte              `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
	UserName          *string             `protobuf:"bytes,3,opt,name=UserName" json:"UserName,omitempty"`
	RoleName          *string             `protobuf:"bytes,4,opt,name=RoleName" json:"RoleName,omitempty"`
	PassWord          *string             `protobuf:"bytes,5,opt,name=PassWord" json:"PassWord,omitempty"`
	YuanBaoCnt        *int32              `protobuf:"varint,6,opt,name=YuanBaoCnt" json:"YuanBaoCnt,omitempty"`
	CoinCnt           *int64              `protobuf:"varint,7,opt,name=CoinCnt" json:"CoinCnt,omitempty"`
	RoomList          []*DDRoomInfo       `protobuf:"bytes,8,rep,name=RoomList" json:"RoomList,omitempty"`
	LoginId           *int32              `protobuf:"varint,9,opt,name=LoginId" json:"LoginId,omitempty"`
	MatchRoomList     []*DDRoomInfo       `protobuf:"bytes,10,rep,name=MatchRoomList" json:"MatchRoomList,omitempty"`
	CertNoRole        []byte              `protobuf:"bytes,11,opt,name=CertNoRole" json:"CertNoRole,omitempty"`
	SHENJINGRoomItems []*SHENJINGRoomInfo `protobuf:"bytes,12,rep,name=SHENJINGRoomItems" json:"SHENJINGRoomItems,omitempty"`
	XXX_unrecognized  []byte              `json:"-"`
}

func (m *ACKSHENJINGConn) Reset()                    { *m = ACKSHENJINGConn{} }
func (m *ACKSHENJINGConn) String() string            { return proto.CompactTextString(m) }
func (*ACKSHENJINGConn) ProtoMessage()               {}
func (*ACKSHENJINGConn) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{88} }

func (m *ACKSHENJINGConn) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

func (m *ACKSHENJINGConn) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *ACKSHENJINGConn) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *ACKSHENJINGConn) GetRoleName() string {
	if m != nil && m.RoleName != nil {
		return *m.RoleName
	}
	return ""
}

func (m *ACKSHENJINGConn) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

func (m *ACKSHENJINGConn) GetYuanBaoCnt() int32 {
	if m != nil && m.YuanBaoCnt != nil {
		return *m.YuanBaoCnt
	}
	return 0
}

func (m *ACKSHENJINGConn) GetCoinCnt() int64 {
	if m != nil && m.CoinCnt != nil {
		return *m.CoinCnt
	}
	return 0
}

func (m *ACKSHENJINGConn) GetRoomList() []*DDRoomInfo {
	if m != nil {
		return m.RoomList
	}
	return nil
}

func (m *ACKSHENJINGConn) GetLoginId() int32 {
	if m != nil && m.LoginId != nil {
		return *m.LoginId
	}
	return 0
}

func (m *ACKSHENJINGConn) GetMatchRoomList() []*DDRoomInfo {
	if m != nil {
		return m.MatchRoomList
	}
	return nil
}

func (m *ACKSHENJINGConn) GetCertNoRole() []byte {
	if m != nil {
		return m.CertNoRole
	}
	return nil
}

func (m *ACKSHENJINGConn) GetSHENJINGRoomItems() []*SHENJINGRoomInfo {
	if m != nil {
		return m.SHENJINGRoomItems
	}
	return nil
}

// 获取短证书  modify at 20120109  获取短证书
// SHENJINGID_SVR_SHORTCERT = 0x00001005;//登录消息
type REQSHENJINGShortCert struct {
	UserName         *string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	Pwd              *string `protobuf:"bytes,3,opt,name=Pwd" json:"Pwd,omitempty"`
	Sex              *int32  `protobuf:"varint,4,opt,name=Sex" json:"Sex,omitempty"`
	SecureID         *string `protobuf:"bytes,5,opt,name=SecureID" json:"SecureID,omitempty"`
	ComeFromID       *int32  `protobuf:"varint,6,opt,name=ComeFromID" json:"ComeFromID,omitempty"`
	ChannelID        *string `protobuf:"bytes,7,opt,name=ChannelID" json:"ChannelID,omitempty"`
	GameId           *int32  `protobuf:"varint,8,opt,name=GameId" json:"GameId,omitempty"`
	Token            *string `protobuf:"bytes,9,opt,name=token" json:"token,omitempty"`
	UserNameApl      []byte  `protobuf:"bytes,10,opt,name=UserNameApl" json:"UserNameApl,omitempty"`
	VerifyId         *int32  `protobuf:"varint,11,opt,name=VerifyId" json:"VerifyId,omitempty"`
	Ticket           *string `protobuf:"bytes,12,opt,name=Ticket" json:"Ticket,omitempty"`
	RoomAdapte       *int32  `protobuf:"varint,13,opt,name=RoomAdapte,def=0" json:"RoomAdapte,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *REQSHENJINGShortCert) Reset()                    { *m = REQSHENJINGShortCert{} }
func (m *REQSHENJINGShortCert) String() string            { return proto.CompactTextString(m) }
func (*REQSHENJINGShortCert) ProtoMessage()               {}
func (*REQSHENJINGShortCert) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{89} }

const Default_REQSHENJINGShortCert_RoomAdapte int32 = 0

func (m *REQSHENJINGShortCert) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *REQSHENJINGShortCert) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *REQSHENJINGShortCert) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

func (m *REQSHENJINGShortCert) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *REQSHENJINGShortCert) GetSecureID() string {
	if m != nil && m.SecureID != nil {
		return *m.SecureID
	}
	return ""
}

func (m *REQSHENJINGShortCert) GetComeFromID() int32 {
	if m != nil && m.ComeFromID != nil {
		return *m.ComeFromID
	}
	return 0
}

func (m *REQSHENJINGShortCert) GetChannelID() string {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return ""
}

func (m *REQSHENJINGShortCert) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *REQSHENJINGShortCert) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *REQSHENJINGShortCert) GetUserNameApl() []byte {
	if m != nil {
		return m.UserNameApl
	}
	return nil
}

func (m *REQSHENJINGShortCert) GetVerifyId() int32 {
	if m != nil && m.VerifyId != nil {
		return *m.VerifyId
	}
	return 0
}

func (m *REQSHENJINGShortCert) GetTicket() string {
	if m != nil && m.Ticket != nil {
		return *m.Ticket
	}
	return ""
}

func (m *REQSHENJINGShortCert) GetRoomAdapte() int32 {
	if m != nil && m.RoomAdapte != nil {
		return *m.RoomAdapte
	}
	return Default_REQSHENJINGShortCert_RoomAdapte
}

type ACKSHENJINGShortCert struct {
	AckResult        *int32        `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	ShortCert        []byte        `protobuf:"bytes,2,opt,name=ShortCert" json:"ShortCert,omitempty"`
	UserName         *string       `protobuf:"bytes,3,opt,name=UserName" json:"UserName,omitempty"`
	RoomList         []*DDRoomInfo `protobuf:"bytes,4,rep,name=RoomList" json:"RoomList,omitempty"`
	MatchRoomList    []*DDRoomInfo `protobuf:"bytes,5,rep,name=MatchRoomList" json:"MatchRoomList,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ACKSHENJINGShortCert) Reset()                    { *m = ACKSHENJINGShortCert{} }
func (m *ACKSHENJINGShortCert) String() string            { return proto.CompactTextString(m) }
func (*ACKSHENJINGShortCert) ProtoMessage()               {}
func (*ACKSHENJINGShortCert) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{90} }

func (m *ACKSHENJINGShortCert) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

func (m *ACKSHENJINGShortCert) GetShortCert() []byte {
	if m != nil {
		return m.ShortCert
	}
	return nil
}

func (m *ACKSHENJINGShortCert) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *ACKSHENJINGShortCert) GetRoomList() []*DDRoomInfo {
	if m != nil {
		return m.RoomList
	}
	return nil
}

func (m *ACKSHENJINGShortCert) GetMatchRoomList() []*DDRoomInfo {
	if m != nil {
		return m.MatchRoomList
	}
	return nil
}

// 登录SHENJING服务OpenId
// SHENJINGID_SVR_REG = 0x00001004;//OpenId登录消息
type REQSHENJINGOpenId struct {
	UserName         []byte  `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Pwd              *string `protobuf:"bytes,2,opt,name=Pwd" json:"Pwd,omitempty"`
	Type             *string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	SecureID         *string `protobuf:"bytes,4,opt,name=SecureID" json:"SecureID,omitempty"`
	ComeFromID       *int32  `protobuf:"varint,5,opt,name=ComeFromID" json:"ComeFromID,omitempty"`
	ChannelID        *string `protobuf:"bytes,6,opt,name=ChannelID" json:"ChannelID,omitempty"`
	GameId           *int32  `protobuf:"varint,7,opt,name=GameId" json:"GameId,omitempty"`
	VerifyId         *int32  `protobuf:"varint,8,opt,name=VerifyId" json:"VerifyId,omitempty"`
	Ticket           *string `protobuf:"bytes,9,opt,name=Ticket" json:"Ticket,omitempty"`
	Token            *string `protobuf:"bytes,10,opt,name=token" json:"token,omitempty"`
	Thirdkey         *string `protobuf:"bytes,11,opt,name=Thirdkey" json:"Thirdkey,omitempty"`
	RoomAdapte       *int32  `protobuf:"varint,12,opt,name=RoomAdapte,def=0" json:"RoomAdapte,omitempty"`
	ThirdAppId       *string `protobuf:"bytes,13,opt,name=ThirdAppId" json:"ThirdAppId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *REQSHENJINGOpenId) Reset()                    { *m = REQSHENJINGOpenId{} }
func (m *REQSHENJINGOpenId) String() string            { return proto.CompactTextString(m) }
func (*REQSHENJINGOpenId) ProtoMessage()               {}
func (*REQSHENJINGOpenId) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{91} }

const Default_REQSHENJINGOpenId_RoomAdapte int32 = 0

func (m *REQSHENJINGOpenId) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *REQSHENJINGOpenId) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

func (m *REQSHENJINGOpenId) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *REQSHENJINGOpenId) GetSecureID() string {
	if m != nil && m.SecureID != nil {
		return *m.SecureID
	}
	return ""
}

func (m *REQSHENJINGOpenId) GetComeFromID() int32 {
	if m != nil && m.ComeFromID != nil {
		return *m.ComeFromID
	}
	return 0
}

func (m *REQSHENJINGOpenId) GetChannelID() string {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return ""
}

func (m *REQSHENJINGOpenId) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *REQSHENJINGOpenId) GetVerifyId() int32 {
	if m != nil && m.VerifyId != nil {
		return *m.VerifyId
	}
	return 0
}

func (m *REQSHENJINGOpenId) GetTicket() string {
	if m != nil && m.Ticket != nil {
		return *m.Ticket
	}
	return ""
}

func (m *REQSHENJINGOpenId) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *REQSHENJINGOpenId) GetThirdkey() string {
	if m != nil && m.Thirdkey != nil {
		return *m.Thirdkey
	}
	return ""
}

func (m *REQSHENJINGOpenId) GetRoomAdapte() int32 {
	if m != nil && m.RoomAdapte != nil {
		return *m.RoomAdapte
	}
	return Default_REQSHENJINGOpenId_RoomAdapte
}

func (m *REQSHENJINGOpenId) GetThirdAppId() string {
	if m != nil && m.ThirdAppId != nil {
		return *m.ThirdAppId
	}
	return ""
}

type ACKSHENJINGOpenId struct {
	AckResult        *int32        `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	Cert             []byte        `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
	UserName         []byte        `protobuf:"bytes,3,opt,name=UserName" json:"UserName,omitempty"`
	RoleName         []byte        `protobuf:"bytes,4,opt,name=RoleName" json:"RoleName,omitempty"`
	YuanBaoCnt       *int32        `protobuf:"varint,5,opt,name=YuanBaoCnt" json:"YuanBaoCnt,omitempty"`
	CoinCnt          *int64        `protobuf:"varint,6,opt,name=CoinCnt" json:"CoinCnt,omitempty"`
	RoomList         []*DDRoomInfo `protobuf:"bytes,7,rep,name=RoomList" json:"RoomList,omitempty"`
	MatchRoomList    []*DDRoomInfo `protobuf:"bytes,8,rep,name=MatchRoomList" json:"MatchRoomList,omitempty"`
	LoginId          *int32        `protobuf:"varint,9,opt,name=LoginId" json:"LoginId,omitempty"`
	CertNoRole       []byte        `protobuf:"bytes,10,opt,name=CertNoRole" json:"CertNoRole,omitempty"`
	AchvId           []int32       `protobuf:"varint,11,rep,name=AchvId" json:"AchvId,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ACKSHENJINGOpenId) Reset()                    { *m = ACKSHENJINGOpenId{} }
func (m *ACKSHENJINGOpenId) String() string            { return proto.CompactTextString(m) }
func (*ACKSHENJINGOpenId) ProtoMessage()               {}
func (*ACKSHENJINGOpenId) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{92} }

func (m *ACKSHENJINGOpenId) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

func (m *ACKSHENJINGOpenId) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *ACKSHENJINGOpenId) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *ACKSHENJINGOpenId) GetRoleName() []byte {
	if m != nil {
		return m.RoleName
	}
	return nil
}

func (m *ACKSHENJINGOpenId) GetYuanBaoCnt() int32 {
	if m != nil && m.YuanBaoCnt != nil {
		return *m.YuanBaoCnt
	}
	return 0
}

func (m *ACKSHENJINGOpenId) GetCoinCnt() int64 {
	if m != nil && m.CoinCnt != nil {
		return *m.CoinCnt
	}
	return 0
}

func (m *ACKSHENJINGOpenId) GetRoomList() []*DDRoomInfo {
	if m != nil {
		return m.RoomList
	}
	return nil
}

func (m *ACKSHENJINGOpenId) GetMatchRoomList() []*DDRoomInfo {
	if m != nil {
		return m.MatchRoomList
	}
	return nil
}

func (m *ACKSHENJINGOpenId) GetLoginId() int32 {
	if m != nil && m.LoginId != nil {
		return *m.LoginId
	}
	return 0
}

func (m *ACKSHENJINGOpenId) GetCertNoRole() []byte {
	if m != nil {
		return m.CertNoRole
	}
	return nil
}

func (m *ACKSHENJINGOpenId) GetAchvId() []int32 {
	if m != nil {
		return m.AchvId
	}
	return nil
}

// 新浪微游戏操作
// SHENJINGID_SVR_SINAGAME = 0x00003007;//新浪微游戏相关
type REQSinaGame struct {
	Thirdkey         *string        `protobuf:"bytes,1,opt,name=Thirdkey" json:"Thirdkey,omitempty"`
	InfoList         []*SinaApiInfo `protobuf:"bytes,2,rep,name=InfoList" json:"InfoList,omitempty"`
	SecureID         *string        `protobuf:"bytes,4,opt,name=SecureID" json:"SecureID,omitempty"`
	ComeFromID       *int32         `protobuf:"varint,5,opt,name=ComeFromID" json:"ComeFromID,omitempty"`
	ChannelID        *string        `protobuf:"bytes,6,opt,name=ChannelID" json:"ChannelID,omitempty"`
	GameId           *int32         `protobuf:"varint,7,opt,name=GameId" json:"GameId,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *REQSinaGame) Reset()                    { *m = REQSinaGame{} }
func (m *REQSinaGame) String() string            { return proto.CompactTextString(m) }
func (*REQSinaGame) ProtoMessage()               {}
func (*REQSinaGame) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{93} }

func (m *REQSinaGame) GetThirdkey() string {
	if m != nil && m.Thirdkey != nil {
		return *m.Thirdkey
	}
	return ""
}

func (m *REQSinaGame) GetInfoList() []*SinaApiInfo {
	if m != nil {
		return m.InfoList
	}
	return nil
}

func (m *REQSinaGame) GetSecureID() string {
	if m != nil && m.SecureID != nil {
		return *m.SecureID
	}
	return ""
}

func (m *REQSinaGame) GetComeFromID() int32 {
	if m != nil && m.ComeFromID != nil {
		return *m.ComeFromID
	}
	return 0
}

func (m *REQSinaGame) GetChannelID() string {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return ""
}

func (m *REQSinaGame) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

type ACKSinaGame struct {
	AckResult        *int32        `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	RetList          []*SinaApiRet `protobuf:"bytes,2,rep,name=RetList" json:"RetList,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ACKSinaGame) Reset()                    { *m = ACKSinaGame{} }
func (m *ACKSinaGame) String() string            { return proto.CompactTextString(m) }
func (*ACKSinaGame) ProtoMessage()               {}
func (*ACKSinaGame) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{94} }

func (m *ACKSinaGame) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

func (m *ACKSinaGame) GetRetList() []*SinaApiRet {
	if m != nil {
		return m.RetList
	}
	return nil
}

// 发送新浪微博
// SHENJINGID_SVR_WEIBO = 0x00003005;//发送微博
type REQWeiBo struct {
	UserName         []byte  `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Pwd              *string `protobuf:"bytes,2,opt,name=Pwd" json:"Pwd,omitempty"`
	Type             *string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	SecureID         *string `protobuf:"bytes,4,opt,name=SecureID" json:"SecureID,omitempty"`
	ComeFromID       *int32  `protobuf:"varint,5,opt,name=ComeFromID" json:"ComeFromID,omitempty"`
	ChannelID        *string `protobuf:"bytes,6,opt,name=ChannelID" json:"ChannelID,omitempty"`
	GameId           *int32  `protobuf:"varint,7,opt,name=GameId" json:"GameId,omitempty"`
	Token            *string `protobuf:"bytes,8,opt,name=token" json:"token,omitempty"`
	WbMsg            []byte  `protobuf:"bytes,9,opt,name=wbMsg" json:"wbMsg,omitempty"`
	WbPic            []byte  `protobuf:"bytes,10,opt,name=wbPic" json:"wbPic,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *REQWeiBo) Reset()                    { *m = REQWeiBo{} }
func (m *REQWeiBo) String() string            { return proto.CompactTextString(m) }
func (*REQWeiBo) ProtoMessage()               {}
func (*REQWeiBo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{95} }

func (m *REQWeiBo) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *REQWeiBo) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

func (m *REQWeiBo) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *REQWeiBo) GetSecureID() string {
	if m != nil && m.SecureID != nil {
		return *m.SecureID
	}
	return ""
}

func (m *REQWeiBo) GetComeFromID() int32 {
	if m != nil && m.ComeFromID != nil {
		return *m.ComeFromID
	}
	return 0
}

func (m *REQWeiBo) GetChannelID() string {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return ""
}

func (m *REQWeiBo) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *REQWeiBo) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *REQWeiBo) GetWbMsg() []byte {
	if m != nil {
		return m.WbMsg
	}
	return nil
}

func (m *REQWeiBo) GetWbPic() []byte {
	if m != nil {
		return m.WbPic
	}
	return nil
}

type ACKWeiBo struct {
	AckResult        *int32 `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ACKWeiBo) Reset()                    { *m = ACKWeiBo{} }
func (m *ACKWeiBo) String() string            { return proto.CompactTextString(m) }
func (*ACKWeiBo) ProtoMessage()               {}
func (*ACKWeiBo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{96} }

func (m *ACKWeiBo) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

// 退出
// SHENJINGID_SVR_EXIT = 0x00001002;//退出消息
type REQSHENJINGExit struct {
	LoginId          *int32  `protobuf:"varint,1,opt,name=LoginId" json:"LoginId,omitempty"`
	ExitType         *int32  `protobuf:"varint,2,opt,name=ExitType" json:"ExitType,omitempty"`
	ExitMsg          *string `protobuf:"bytes,3,opt,name=ExitMsg" json:"ExitMsg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *REQSHENJINGExit) Reset()                    { *m = REQSHENJINGExit{} }
func (m *REQSHENJINGExit) String() string            { return proto.CompactTextString(m) }
func (*REQSHENJINGExit) ProtoMessage()               {}
func (*REQSHENJINGExit) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{97} }

func (m *REQSHENJINGExit) GetLoginId() int32 {
	if m != nil && m.LoginId != nil {
		return *m.LoginId
	}
	return 0
}

func (m *REQSHENJINGExit) GetExitType() int32 {
	if m != nil && m.ExitType != nil {
		return *m.ExitType
	}
	return 0
}

func (m *REQSHENJINGExit) GetExitMsg() string {
	if m != nil && m.ExitMsg != nil {
		return *m.ExitMsg
	}
	return ""
}

// 获取游戏版本信息
// SHENJINGID_SVR_VERSION = 0x00003001;//索蓝游戏版本消息
type REQSHENJINGGameVersion struct {
	CurVersion       *int32  `protobuf:"varint,1,opt,name=CurVersion" json:"CurVersion,omitempty"`
	GameId           *int32  `protobuf:"varint,2,opt,name=GameId" json:"GameId,omitempty"`
	ComeFromID       *int32  `protobuf:"varint,3,opt,name=ComeFromID" json:"ComeFromID,omitempty"`
	ResolutionID     *string `protobuf:"bytes,4,opt,name=ResolutionID" json:"ResolutionID,omitempty"`
	ChannelID        *string `protobuf:"bytes,5,opt,name=ChannelID" json:"ChannelID,omitempty"`
	LanguageID       *string `protobuf:"bytes,6,opt,name=LanguageID" json:"LanguageID,omitempty"`
	SmallVersion     *int32  `protobuf:"varint,7,opt,name=smallVersion" json:"smallVersion,omitempty"`
	ClientType       *string `protobuf:"bytes,8,opt,name=ClientType" json:"ClientType,omitempty"`
	ScreenSize       *string `protobuf:"bytes,9,opt,name=ScreenSize" json:"ScreenSize,omitempty"`
	RoomAdapte       *int32  `protobuf:"varint,10,opt,name=RoomAdapte,def=0" json:"RoomAdapte,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *REQSHENJINGGameVersion) Reset()                    { *m = REQSHENJINGGameVersion{} }
func (m *REQSHENJINGGameVersion) String() string            { return proto.CompactTextString(m) }
func (*REQSHENJINGGameVersion) ProtoMessage()               {}
func (*REQSHENJINGGameVersion) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{98} }

const Default_REQSHENJINGGameVersion_RoomAdapte int32 = 0

func (m *REQSHENJINGGameVersion) GetCurVersion() int32 {
	if m != nil && m.CurVersion != nil {
		return *m.CurVersion
	}
	return 0
}

func (m *REQSHENJINGGameVersion) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *REQSHENJINGGameVersion) GetComeFromID() int32 {
	if m != nil && m.ComeFromID != nil {
		return *m.ComeFromID
	}
	return 0
}

func (m *REQSHENJINGGameVersion) GetResolutionID() string {
	if m != nil && m.ResolutionID != nil {
		return *m.ResolutionID
	}
	return ""
}

func (m *REQSHENJINGGameVersion) GetChannelID() string {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return ""
}

func (m *REQSHENJINGGameVersion) GetLanguageID() string {
	if m != nil && m.LanguageID != nil {
		return *m.LanguageID
	}
	return ""
}

func (m *REQSHENJINGGameVersion) GetSmallVersion() int32 {
	if m != nil && m.SmallVersion != nil {
		return *m.SmallVersion
	}
	return 0
}

func (m *REQSHENJINGGameVersion) GetClientType() string {
	if m != nil && m.ClientType != nil {
		return *m.ClientType
	}
	return ""
}

func (m *REQSHENJINGGameVersion) GetScreenSize() string {
	if m != nil && m.ScreenSize != nil {
		return *m.ScreenSize
	}
	return ""
}

func (m *REQSHENJINGGameVersion) GetRoomAdapte() int32 {
	if m != nil && m.RoomAdapte != nil {
		return *m.RoomAdapte
	}
	return Default_REQSHENJINGGameVersion_RoomAdapte
}

type ACKSHENJINGGameVersion struct {
	AckResult        *int32                 `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	PlayEnable       *string                `protobuf:"bytes,2,opt,name=PlayEnable" json:"PlayEnable,omitempty"`
	DownloadUrl      *string                `protobuf:"bytes,3,opt,name=DownloadUrl" json:"DownloadUrl,omitempty"`
	GameServerIp     *string                `protobuf:"bytes,4,opt,name=GameServerIp" json:"GameServerIp,omitempty"`
	GameServerPort   *string                `protobuf:"bytes,5,opt,name=GameServerPort" json:"GameServerPort,omitempty"`
	GameRankEnable   *string                `protobuf:"bytes,6,opt,name=GameRankEnable" json:"GameRankEnable,omitempty"`
	GameRankDef      *string                `protobuf:"bytes,7,opt,name=GameRankDef" json:"GameRankDef,omitempty"`
	IfPreserve       *string                `protobuf:"bytes,8,opt,name=IfPreserve" json:"IfPreserve,omitempty"`
	PreserveMsg      *string                `protobuf:"bytes,9,opt,name=PreserveMsg" json:"PreserveMsg,omitempty"`
	MatchInfoList    []*DDSHENJINGMatchInfo `protobuf:"bytes,10,rep,name=MatchInfoList" json:"MatchInfoList,omitempty"`
	DownloadReasion  *int32                 `protobuf:"varint,11,opt,name=DownloadReasion" json:"DownloadReasion,omitempty"`
	GameId           *int32                 `protobuf:"varint,12,opt,name=GameId" json:"GameId,omitempty"`
	GameSort         *int32                 `protobuf:"varint,13,opt,name=gameSort" json:"gameSort,omitempty"`
	MatchRoomList    []*DDRoomInfo          `protobuf:"bytes,14,rep,name=MatchRoomList" json:"MatchRoomList,omitempty"`
	JssList          []*SHENJINGJSSInfo     `protobuf:"bytes,15,rep,name=JssList" json:"JssList,omitempty"`
	IfSearch         *string                `protobuf:"bytes,16,opt,name=IfSearch" json:"IfSearch,omitempty"`
	BulletinList     []*DDBulletinInfo      `protobuf:"bytes,17,rep,name=BulletinList" json:"BulletinList,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ACKSHENJINGGameVersion) Reset()                    { *m = ACKSHENJINGGameVersion{} }
func (m *ACKSHENJINGGameVersion) String() string            { return proto.CompactTextString(m) }
func (*ACKSHENJINGGameVersion) ProtoMessage()               {}
func (*ACKSHENJINGGameVersion) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{99} }

func (m *ACKSHENJINGGameVersion) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

func (m *ACKSHENJINGGameVersion) GetPlayEnable() string {
	if m != nil && m.PlayEnable != nil {
		return *m.PlayEnable
	}
	return ""
}

func (m *ACKSHENJINGGameVersion) GetDownloadUrl() string {
	if m != nil && m.DownloadUrl != nil {
		return *m.DownloadUrl
	}
	return ""
}

func (m *ACKSHENJINGGameVersion) GetGameServerIp() string {
	if m != nil && m.GameServerIp != nil {
		return *m.GameServerIp
	}
	return ""
}

func (m *ACKSHENJINGGameVersion) GetGameServerPort() string {
	if m != nil && m.GameServerPort != nil {
		return *m.GameServerPort
	}
	return ""
}

func (m *ACKSHENJINGGameVersion) GetGameRankEnable() string {
	if m != nil && m.GameRankEnable != nil {
		return *m.GameRankEnable
	}
	return ""
}

func (m *ACKSHENJINGGameVersion) GetGameRankDef() string {
	if m != nil && m.GameRankDef != nil {
		return *m.GameRankDef
	}
	return ""
}

func (m *ACKSHENJINGGameVersion) GetIfPreserve() string {
	if m != nil && m.IfPreserve != nil {
		return *m.IfPreserve
	}
	return ""
}

func (m *ACKSHENJINGGameVersion) GetPreserveMsg() string {
	if m != nil && m.PreserveMsg != nil {
		return *m.PreserveMsg
	}
	return ""
}

func (m *ACKSHENJINGGameVersion) GetMatchInfoList() []*DDSHENJINGMatchInfo {
	if m != nil {
		return m.MatchInfoList
	}
	return nil
}

func (m *ACKSHENJINGGameVersion) GetDownloadReasion() int32 {
	if m != nil && m.DownloadReasion != nil {
		return *m.DownloadReasion
	}
	return 0
}

func (m *ACKSHENJINGGameVersion) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *ACKSHENJINGGameVersion) GetGameSort() int32 {
	if m != nil && m.GameSort != nil {
		return *m.GameSort
	}
	return 0
}

func (m *ACKSHENJINGGameVersion) GetMatchRoomList() []*DDRoomInfo {
	if m != nil {
		return m.MatchRoomList
	}
	return nil
}

func (m *ACKSHENJINGGameVersion) GetJssList() []*SHENJINGJSSInfo {
	if m != nil {
		return m.JssList
	}
	return nil
}

func (m *ACKSHENJINGGameVersion) GetIfSearch() string {
	if m != nil && m.IfSearch != nil {
		return *m.IfSearch
	}
	return ""
}

func (m *ACKSHENJINGGameVersion) GetBulletinList() []*DDBulletinInfo {
	if m != nil {
		return m.BulletinList
	}
	return nil
}

// 获取验证码
// SHENJINGID_SVR_VERIFY = 0x00003003;//获取验证码信息
type REQSHENJINGNewVerify struct {
	SecureID         *string `protobuf:"bytes,1,opt,name=SecureID" json:"SecureID,omitempty"`
	ComeFromID       *int32  `protobuf:"varint,2,opt,name=ComeFromID" json:"ComeFromID,omitempty"`
	ChannelID        *string `protobuf:"bytes,3,opt,name=ChannelID" json:"ChannelID,omitempty"`
	GameId           *int32  `protobuf:"varint,4,opt,name=GameId" json:"GameId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *REQSHENJINGNewVerify) Reset()                    { *m = REQSHENJINGNewVerify{} }
func (m *REQSHENJINGNewVerify) String() string            { return proto.CompactTextString(m) }
func (*REQSHENJINGNewVerify) ProtoMessage()               {}
func (*REQSHENJINGNewVerify) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{100} }

func (m *REQSHENJINGNewVerify) GetSecureID() string {
	if m != nil && m.SecureID != nil {
		return *m.SecureID
	}
	return ""
}

func (m *REQSHENJINGNewVerify) GetComeFromID() int32 {
	if m != nil && m.ComeFromID != nil {
		return *m.ComeFromID
	}
	return 0
}

func (m *REQSHENJINGNewVerify) GetChannelID() string {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return ""
}

func (m *REQSHENJINGNewVerify) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

type ACKSHENJINGNewVerify struct {
	AckResult        *int32  `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	ErrorStr         *string `protobuf:"bytes,2,opt,name=ErrorStr" json:"ErrorStr,omitempty"`
	Verify           []byte  `protobuf:"bytes,3,opt,name=Verify" json:"Verify,omitempty"`
	VerifyId         *int32  `protobuf:"varint,4,opt,name=VerifyId" json:"VerifyId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ACKSHENJINGNewVerify) Reset()                    { *m = ACKSHENJINGNewVerify{} }
func (m *ACKSHENJINGNewVerify) String() string            { return proto.CompactTextString(m) }
func (*ACKSHENJINGNewVerify) ProtoMessage()               {}
func (*ACKSHENJINGNewVerify) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{101} }

func (m *ACKSHENJINGNewVerify) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

func (m *ACKSHENJINGNewVerify) GetErrorStr() string {
	if m != nil && m.ErrorStr != nil {
		return *m.ErrorStr
	}
	return ""
}

func (m *ACKSHENJINGNewVerify) GetVerify() []byte {
	if m != nil {
		return m.Verify
	}
	return nil
}

func (m *ACKSHENJINGNewVerify) GetVerifyId() int32 {
	if m != nil && m.VerifyId != nil {
		return *m.VerifyId
	}
	return 0
}

// 找回密码功能
// SHENJINGID_SVR_FINDPWD = 0x00003002;//找回密码功能
// 新设置的密码未设置，表示只发送密码而不重置
// 新设置的密码不未空时，表示需要用户点击邮箱中的链接才能重置成功，且更新用户状态为已激活
type REQSHENJINGFindPwd struct {
	Email            *string `protobuf:"bytes,1,opt,name=Email" json:"Email,omitempty"`
	NewPwd           *string `protobuf:"bytes,2,opt,name=NewPwd" json:"NewPwd,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *REQSHENJINGFindPwd) Reset()                    { *m = REQSHENJINGFindPwd{} }
func (m *REQSHENJINGFindPwd) String() string            { return proto.CompactTextString(m) }
func (*REQSHENJINGFindPwd) ProtoMessage()               {}
func (*REQSHENJINGFindPwd) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{102} }

func (m *REQSHENJINGFindPwd) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *REQSHENJINGFindPwd) GetNewPwd() string {
	if m != nil && m.NewPwd != nil {
		return *m.NewPwd
	}
	return ""
}

type ACKSHENJINGFindPwd struct {
	AckResult        *int32 `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ACKSHENJINGFindPwd) Reset()                    { *m = ACKSHENJINGFindPwd{} }
func (m *ACKSHENJINGFindPwd) String() string            { return proto.CompactTextString(m) }
func (*ACKSHENJINGFindPwd) ProtoMessage()               {}
func (*ACKSHENJINGFindPwd) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{103} }

func (m *ACKSHENJINGFindPwd) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

// SHENJING心跳
// SHENJINGID_SVR_HEART = 0x00003006;//SHENJING的心跳
// REQ只有消息头，没有消息体
type ACKSHENJINGHeart struct {
	ServTime         *string `protobuf:"bytes,1,opt,name=ServTime" json:"ServTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ACKSHENJINGHeart) Reset()                    { *m = ACKSHENJINGHeart{} }
func (m *ACKSHENJINGHeart) String() string            { return proto.CompactTextString(m) }
func (*ACKSHENJINGHeart) ProtoMessage()               {}
func (*ACKSHENJINGHeart) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{104} }

func (m *ACKSHENJINGHeart) GetServTime() string {
	if m != nil && m.ServTime != nil {
		return *m.ServTime
	}
	return ""
}

// 相关的结构
// 新浪微游戏结构
type SinaApiInfo struct {
	ApiType          *int32  `protobuf:"varint,1,opt,name=ApiType" json:"ApiType,omitempty"`
	RetValue         *string `protobuf:"bytes,2,opt,name=RetValue" json:"RetValue,omitempty"`
	UserId           *string `protobuf:"bytes,3,opt,name=UserId" json:"UserId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SinaApiInfo) Reset()                    { *m = SinaApiInfo{} }
func (m *SinaApiInfo) String() string            { return proto.CompactTextString(m) }
func (*SinaApiInfo) ProtoMessage()               {}
func (*SinaApiInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{105} }

func (m *SinaApiInfo) GetApiType() int32 {
	if m != nil && m.ApiType != nil {
		return *m.ApiType
	}
	return 0
}

func (m *SinaApiInfo) GetRetValue() string {
	if m != nil && m.RetValue != nil {
		return *m.RetValue
	}
	return ""
}

func (m *SinaApiInfo) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

// 新浪微游戏结果返回结构
type SinaApiRet struct {
	RetResult        *int32  `protobuf:"varint,1,opt,name=RetResult" json:"RetResult,omitempty"`
	ApiType          *int32  `protobuf:"varint,2,opt,name=ApiType" json:"ApiType,omitempty"`
	RetValue         *string `protobuf:"bytes,3,opt,name=RetValue" json:"RetValue,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SinaApiRet) Reset()                    { *m = SinaApiRet{} }
func (m *SinaApiRet) String() string            { return proto.CompactTextString(m) }
func (*SinaApiRet) ProtoMessage()               {}
func (*SinaApiRet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{106} }

func (m *SinaApiRet) GetRetResult() int32 {
	if m != nil && m.RetResult != nil {
		return *m.RetResult
	}
	return 0
}

func (m *SinaApiRet) GetApiType() int32 {
	if m != nil && m.ApiType != nil {
		return *m.ApiType
	}
	return 0
}

func (m *SinaApiRet) GetRetValue() string {
	if m != nil && m.RetValue != nil {
		return *m.RetValue
	}
	return ""
}

// 游戏房间结构
type DDRoomInfo struct {
	RoomId           *string `protobuf:"bytes,1,opt,name=RoomId" json:"RoomId,omitempty"`
	RoomRank         *string `protobuf:"bytes,2,opt,name=RoomRank" json:"RoomRank,omitempty"`
	RoomIp           *string `protobuf:"bytes,3,opt,name=RoomIp" json:"RoomIp,omitempty"`
	RoomPort         *string `protobuf:"bytes,4,opt,name=RoomPort" json:"RoomPort,omitempty"`
	RoomStatus       *string `protobuf:"bytes,5,opt,name=RoomStatus" json:"RoomStatus,omitempty"`
	RoomMinGold      *string `protobuf:"bytes,6,opt,name=RoomMinGold" json:"RoomMinGold,omitempty"`
	RoomMaxGold      *string `protobuf:"bytes,7,opt,name=RoomMaxGold" json:"RoomMaxGold,omitempty"`
	RoomMinPlay      *string `protobuf:"bytes,8,opt,name=RoomMinPlay" json:"RoomMinPlay,omitempty"`
	RoomType         *string `protobuf:"bytes,9,opt,name=RoomType" json:"RoomType,omitempty"`
	ServerType       *string `protobuf:"bytes,10,opt,name=ServerType" json:"ServerType,omitempty"`
	Description      *string `protobuf:"bytes,11,opt,name=Description" json:"Description,omitempty"`
	RoomName         *string `protobuf:"bytes,12,opt,name=RoomName" json:"RoomName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DDRoomInfo) Reset()                    { *m = DDRoomInfo{} }
func (m *DDRoomInfo) String() string            { return proto.CompactTextString(m) }
func (*DDRoomInfo) ProtoMessage()               {}
func (*DDRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{107} }

func (m *DDRoomInfo) GetRoomId() string {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return ""
}

func (m *DDRoomInfo) GetRoomRank() string {
	if m != nil && m.RoomRank != nil {
		return *m.RoomRank
	}
	return ""
}

func (m *DDRoomInfo) GetRoomIp() string {
	if m != nil && m.RoomIp != nil {
		return *m.RoomIp
	}
	return ""
}

func (m *DDRoomInfo) GetRoomPort() string {
	if m != nil && m.RoomPort != nil {
		return *m.RoomPort
	}
	return ""
}

func (m *DDRoomInfo) GetRoomStatus() string {
	if m != nil && m.RoomStatus != nil {
		return *m.RoomStatus
	}
	return ""
}

func (m *DDRoomInfo) GetRoomMinGold() string {
	if m != nil && m.RoomMinGold != nil {
		return *m.RoomMinGold
	}
	return ""
}

func (m *DDRoomInfo) GetRoomMaxGold() string {
	if m != nil && m.RoomMaxGold != nil {
		return *m.RoomMaxGold
	}
	return ""
}

func (m *DDRoomInfo) GetRoomMinPlay() string {
	if m != nil && m.RoomMinPlay != nil {
		return *m.RoomMinPlay
	}
	return ""
}

func (m *DDRoomInfo) GetRoomType() string {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return ""
}

func (m *DDRoomInfo) GetServerType() string {
	if m != nil && m.ServerType != nil {
		return *m.ServerType
	}
	return ""
}

func (m *DDRoomInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *DDRoomInfo) GetRoomName() string {
	if m != nil && m.RoomName != nil {
		return *m.RoomName
	}
	return ""
}

// 比赛信息结构
type DDSHENJINGMatchInfo struct {
	MatchID   *int32  `protobuf:"varint,1,opt,name=MatchID" json:"MatchID,omitempty"`
	MatchName *string `protobuf:"bytes,2,opt,name=MatchName" json:"MatchName,omitempty"`
	// 以下参数在斗地主比赛中应用
	AwardName        *string `protobuf:"bytes,3,opt,name=AwardName" json:"AwardName,omitempty"`
	AwardSum         *int32  `protobuf:"varint,4,opt,name=AwardSum" json:"AwardSum,omitempty"`
	MatchTerm        *string `protobuf:"bytes,5,opt,name=MatchTerm" json:"MatchTerm,omitempty"`
	HumanLimit       *int32  `protobuf:"varint,6,opt,name=HumanLimit" json:"HumanLimit,omitempty"`
	MatchHumanSum    *int32  `protobuf:"varint,7,opt,name=MatchHumanSum" json:"MatchHumanSum,omitempty"`
	MatchType        *int32  `protobuf:"varint,8,opt,name=MatchType" json:"MatchType,omitempty"`
	MatchInterval    *int32  `protobuf:"varint,9,opt,name=MatchInterval" json:"MatchInterval,omitempty"`
	MatchPrize       *string `protobuf:"bytes,10,opt,name=MatchPrize" json:"MatchPrize,omitempty"`
	MatchProcess     *string `protobuf:"bytes,11,opt,name=MatchProcess" json:"MatchProcess,omitempty"`
	MatchDate        *string `protobuf:"bytes,12,opt,name=MatchDate" json:"MatchDate,omitempty"`
	MatchFee         *string `protobuf:"bytes,13,opt,name=MatchFee" json:"MatchFee,omitempty"`
	MatchArea        *int32  `protobuf:"varint,14,opt,name=MatchArea" json:"MatchArea,omitempty"`
	Description      *string `protobuf:"bytes,15,opt,name=Description" json:"Description,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DDSHENJINGMatchInfo) Reset()                    { *m = DDSHENJINGMatchInfo{} }
func (m *DDSHENJINGMatchInfo) String() string            { return proto.CompactTextString(m) }
func (*DDSHENJINGMatchInfo) ProtoMessage()               {}
func (*DDSHENJINGMatchInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{108} }

func (m *DDSHENJINGMatchInfo) GetMatchID() int32 {
	if m != nil && m.MatchID != nil {
		return *m.MatchID
	}
	return 0
}

func (m *DDSHENJINGMatchInfo) GetMatchName() string {
	if m != nil && m.MatchName != nil {
		return *m.MatchName
	}
	return ""
}

func (m *DDSHENJINGMatchInfo) GetAwardName() string {
	if m != nil && m.AwardName != nil {
		return *m.AwardName
	}
	return ""
}

func (m *DDSHENJINGMatchInfo) GetAwardSum() int32 {
	if m != nil && m.AwardSum != nil {
		return *m.AwardSum
	}
	return 0
}

func (m *DDSHENJINGMatchInfo) GetMatchTerm() string {
	if m != nil && m.MatchTerm != nil {
		return *m.MatchTerm
	}
	return ""
}

func (m *DDSHENJINGMatchInfo) GetHumanLimit() int32 {
	if m != nil && m.HumanLimit != nil {
		return *m.HumanLimit
	}
	return 0
}

func (m *DDSHENJINGMatchInfo) GetMatchHumanSum() int32 {
	if m != nil && m.MatchHumanSum != nil {
		return *m.MatchHumanSum
	}
	return 0
}

func (m *DDSHENJINGMatchInfo) GetMatchType() int32 {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return 0
}

func (m *DDSHENJINGMatchInfo) GetMatchInterval() int32 {
	if m != nil && m.MatchInterval != nil {
		return *m.MatchInterval
	}
	return 0
}

func (m *DDSHENJINGMatchInfo) GetMatchPrize() string {
	if m != nil && m.MatchPrize != nil {
		return *m.MatchPrize
	}
	return ""
}

func (m *DDSHENJINGMatchInfo) GetMatchProcess() string {
	if m != nil && m.MatchProcess != nil {
		return *m.MatchProcess
	}
	return ""
}

func (m *DDSHENJINGMatchInfo) GetMatchDate() string {
	if m != nil && m.MatchDate != nil {
		return *m.MatchDate
	}
	return ""
}

func (m *DDSHENJINGMatchInfo) GetMatchFee() string {
	if m != nil && m.MatchFee != nil {
		return *m.MatchFee
	}
	return ""
}

func (m *DDSHENJINGMatchInfo) GetMatchArea() int32 {
	if m != nil && m.MatchArea != nil {
		return *m.MatchArea
	}
	return 0
}

func (m *DDSHENJINGMatchInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

// 索蓝服务器的房间基本信息 modify at 20120217  索蓝酒吧骰子用
type SHENJINGRoomInfo struct {
	GameID            *int32              `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
	GroupID           *int32              `protobuf:"varint,2,opt,name=GroupID" json:"GroupID,omitempty"`
	RoomID            []byte              `protobuf:"bytes,3,opt,name=RoomID" json:"RoomID,omitempty"`
	MaxPlayer         *int32              `protobuf:"varint,4,opt,name=MaxPlayer" json:"MaxPlayer,omitempty"`
	RoomIP            *string             `protobuf:"bytes,5,opt,name=RoomIP" json:"RoomIP,omitempty"`
	RoomPort          *int32              `protobuf:"varint,6,opt,name=RoomPort" json:"RoomPort,omitempty"`
	Context           []byte              `protobuf:"bytes,7,opt,name=Context" json:"Context,omitempty"`
	CurPlayer         *int32              `protobuf:"varint,8,opt,name=CurPlayer" json:"CurPlayer,omitempty"`
	RoomState         *int32              `protobuf:"varint,9,opt,name=RoomState" json:"RoomState,omitempty"`
	IsLock            *int32              `protobuf:"varint,10,opt,name=IsLock,def=0" json:"IsLock,omitempty"`
	SHENJINGRoomItems []*SHENJINGRoomInfo `protobuf:"bytes,11,rep,name=SHENJINGRoomItems" json:"SHENJINGRoomItems,omitempty"`
	XXX_unrecognized  []byte              `json:"-"`
}

func (m *SHENJINGRoomInfo) Reset()                    { *m = SHENJINGRoomInfo{} }
func (m *SHENJINGRoomInfo) String() string            { return proto.CompactTextString(m) }
func (*SHENJINGRoomInfo) ProtoMessage()               {}
func (*SHENJINGRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{109} }

const Default_SHENJINGRoomInfo_IsLock int32 = 0

func (m *SHENJINGRoomInfo) GetGameID() int32 {
	if m != nil && m.GameID != nil {
		return *m.GameID
	}
	return 0
}

func (m *SHENJINGRoomInfo) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

func (m *SHENJINGRoomInfo) GetRoomID() []byte {
	if m != nil {
		return m.RoomID
	}
	return nil
}

func (m *SHENJINGRoomInfo) GetMaxPlayer() int32 {
	if m != nil && m.MaxPlayer != nil {
		return *m.MaxPlayer
	}
	return 0
}

func (m *SHENJINGRoomInfo) GetRoomIP() string {
	if m != nil && m.RoomIP != nil {
		return *m.RoomIP
	}
	return ""
}

func (m *SHENJINGRoomInfo) GetRoomPort() int32 {
	if m != nil && m.RoomPort != nil {
		return *m.RoomPort
	}
	return 0
}

func (m *SHENJINGRoomInfo) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SHENJINGRoomInfo) GetCurPlayer() int32 {
	if m != nil && m.CurPlayer != nil {
		return *m.CurPlayer
	}
	return 0
}

func (m *SHENJINGRoomInfo) GetRoomState() int32 {
	if m != nil && m.RoomState != nil {
		return *m.RoomState
	}
	return 0
}

func (m *SHENJINGRoomInfo) GetIsLock() int32 {
	if m != nil && m.IsLock != nil {
		return *m.IsLock
	}
	return Default_SHENJINGRoomInfo_IsLock
}

func (m *SHENJINGRoomInfo) GetSHENJINGRoomItems() []*SHENJINGRoomInfo {
	if m != nil {
		return m.SHENJINGRoomItems
	}
	return nil
}

// 索蓝服务器配置的jss服务器  modify at 20120321
type SHENJINGJSSInfo struct {
	RoomIP           *string `protobuf:"bytes,1,opt,name=RoomIP" json:"RoomIP,omitempty"`
	RoomPort         *string `protobuf:"bytes,2,opt,name=RoomPort" json:"RoomPort,omitempty"`
	Remark           *string `protobuf:"bytes,3,opt,name=Remark" json:"Remark,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SHENJINGJSSInfo) Reset()                    { *m = SHENJINGJSSInfo{} }
func (m *SHENJINGJSSInfo) String() string            { return proto.CompactTextString(m) }
func (*SHENJINGJSSInfo) ProtoMessage()               {}
func (*SHENJINGJSSInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{110} }

func (m *SHENJINGJSSInfo) GetRoomIP() string {
	if m != nil && m.RoomIP != nil {
		return *m.RoomIP
	}
	return ""
}

func (m *SHENJINGJSSInfo) GetRoomPort() string {
	if m != nil && m.RoomPort != nil {
		return *m.RoomPort
	}
	return ""
}

func (m *SHENJINGJSSInfo) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

// 游戏公告
type DDBulletinInfo struct {
	Title            []byte `protobuf:"bytes,1,opt,name=Title" json:"Title,omitempty"`
	Content          []byte `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DDBulletinInfo) Reset()                    { *m = DDBulletinInfo{} }
func (m *DDBulletinInfo) String() string            { return proto.CompactTextString(m) }
func (*DDBulletinInfo) ProtoMessage()               {}
func (*DDBulletinInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{111} }

func (m *DDBulletinInfo) GetTitle() []byte {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *DDBulletinInfo) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// ***************************************************************//
// modify at 20120516
// 快速登录
// SHENJINGID_SVR_QUICKCONN = 0x00001006;//快速登录
type REQQuickConn struct {
	UserName         []byte      `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Pwd              *string     `protobuf:"bytes,2,opt,name=Pwd" json:"Pwd,omitempty"`
	SecureID         *string     `protobuf:"bytes,3,opt,name=SecureID" json:"SecureID,omitempty"`
	ComeFromID       *int32      `protobuf:"varint,4,opt,name=ComeFromID" json:"ComeFromID,omitempty"`
	ChannelID        *string     `protobuf:"bytes,5,opt,name=ChannelID" json:"ChannelID,omitempty"`
	GameId           *int32      `protobuf:"varint,6,opt,name=GameId" json:"GameId,omitempty"`
	Token            *string     `protobuf:"bytes,7,opt,name=token" json:"token,omitempty"`
	RoomAdapte       *int32      `protobuf:"varint,8,opt,name=RoomAdapte,def=0" json:"RoomAdapte,omitempty"`
	LoginType        *int32      `protobuf:"varint,9,opt,name=LoginType,def=0" json:"LoginType,omitempty"`
	CurVersion       *int32      `protobuf:"varint,10,opt,name=CurVersion" json:"CurVersion,omitempty"`
	SmallVersion     *int32      `protobuf:"varint,11,opt,name=smallVersion" json:"smallVersion,omitempty"`
	ResolutionID     *string     `protobuf:"bytes,12,opt,name=ResolutionID" json:"ResolutionID,omitempty"`
	LanguageID       *string     `protobuf:"bytes,13,opt,name=LanguageID" json:"LanguageID,omitempty"`
	ScreenSize       *string     `protobuf:"bytes,14,opt,name=ScreenSize" json:"ScreenSize,omitempty"`
	ThirdDigitalName *string     `protobuf:"bytes,15,opt,name=ThirdDigitalName" json:"ThirdDigitalName,omitempty"`
	Thirdkey         *string     `protobuf:"bytes,16,opt,name=Thirdkey" json:"Thirdkey,omitempty"`
	ThirdAppId       *string     `protobuf:"bytes,17,opt,name=ThirdAppId" json:"ThirdAppId,omitempty"`
	UserId           *uint32     `protobuf:"varint,18,opt,name=userId" json:"userId,omitempty"`
	Wx               *WeixinInfo `protobuf:"bytes,19,opt,name=wx" json:"wx,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *REQQuickConn) Reset()                    { *m = REQQuickConn{} }
func (m *REQQuickConn) String() string            { return proto.CompactTextString(m) }
func (*REQQuickConn) ProtoMessage()               {}
func (*REQQuickConn) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{112} }

const Default_REQQuickConn_RoomAdapte int32 = 0
const Default_REQQuickConn_LoginType int32 = 0

func (m *REQQuickConn) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *REQQuickConn) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

func (m *REQQuickConn) GetSecureID() string {
	if m != nil && m.SecureID != nil {
		return *m.SecureID
	}
	return ""
}

func (m *REQQuickConn) GetComeFromID() int32 {
	if m != nil && m.ComeFromID != nil {
		return *m.ComeFromID
	}
	return 0
}

func (m *REQQuickConn) GetChannelID() string {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return ""
}

func (m *REQQuickConn) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *REQQuickConn) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *REQQuickConn) GetRoomAdapte() int32 {
	if m != nil && m.RoomAdapte != nil {
		return *m.RoomAdapte
	}
	return Default_REQQuickConn_RoomAdapte
}

func (m *REQQuickConn) GetLoginType() int32 {
	if m != nil && m.LoginType != nil {
		return *m.LoginType
	}
	return Default_REQQuickConn_LoginType
}

func (m *REQQuickConn) GetCurVersion() int32 {
	if m != nil && m.CurVersion != nil {
		return *m.CurVersion
	}
	return 0
}

func (m *REQQuickConn) GetSmallVersion() int32 {
	if m != nil && m.SmallVersion != nil {
		return *m.SmallVersion
	}
	return 0
}

func (m *REQQuickConn) GetResolutionID() string {
	if m != nil && m.ResolutionID != nil {
		return *m.ResolutionID
	}
	return ""
}

func (m *REQQuickConn) GetLanguageID() string {
	if m != nil && m.LanguageID != nil {
		return *m.LanguageID
	}
	return ""
}

func (m *REQQuickConn) GetScreenSize() string {
	if m != nil && m.ScreenSize != nil {
		return *m.ScreenSize
	}
	return ""
}

func (m *REQQuickConn) GetThirdDigitalName() string {
	if m != nil && m.ThirdDigitalName != nil {
		return *m.ThirdDigitalName
	}
	return ""
}

func (m *REQQuickConn) GetThirdkey() string {
	if m != nil && m.Thirdkey != nil {
		return *m.Thirdkey
	}
	return ""
}

func (m *REQQuickConn) GetThirdAppId() string {
	if m != nil && m.ThirdAppId != nil {
		return *m.ThirdAppId
	}
	return ""
}

func (m *REQQuickConn) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *REQQuickConn) GetWx() *WeixinInfo {
	if m != nil {
		return m.Wx
	}
	return nil
}

type ACKQuickConn struct {
	AckResult        *int32                 `protobuf:"varint,1,opt,name=AckResult" json:"AckResult,omitempty"`
	UserId           *uint32                `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	UserName         *string                `protobuf:"bytes,3,opt,name=UserName" json:"UserName,omitempty"`
	RoleName         *string                `protobuf:"bytes,4,opt,name=RoleName" json:"RoleName,omitempty"`
	YuanBaoCnt       *int32                 `protobuf:"varint,5,opt,name=YuanBaoCnt" json:"YuanBaoCnt,omitempty"`
	CoinCnt          *int64                 `protobuf:"varint,6,opt,name=CoinCnt" json:"CoinCnt,omitempty"`
	RoomList         []*DDRoomInfo          `protobuf:"bytes,7,rep,name=RoomList" json:"RoomList,omitempty"`
	MatchRoomList    []*DDSHENJINGMatchInfo `protobuf:"bytes,8,rep,name=MatchRoomList" json:"MatchRoomList,omitempty"`
	Cert             []byte                 `protobuf:"bytes,9,opt,name=Cert" json:"Cert,omitempty"`
	CertNoCert       []byte                 `protobuf:"bytes,10,opt,name=CertNoCert" json:"CertNoCert,omitempty"`
	CurVersion       *int32                 `protobuf:"varint,11,opt,name=CurVersion" json:"CurVersion,omitempty"`
	PlayEnable       *string                `protobuf:"bytes,12,opt,name=PlayEnable" json:"PlayEnable,omitempty"`
	DownloadUrl      *string                `protobuf:"bytes,13,opt,name=DownloadUrl" json:"DownloadUrl,omitempty"`
	IfPreserve       *string                `protobuf:"bytes,14,opt,name=IfPreserve" json:"IfPreserve,omitempty"`
	PreserveMsg      *string                `protobuf:"bytes,16,opt,name=PreserveMsg" json:"PreserveMsg,omitempty"`
	GameId           *int32                 `protobuf:"varint,17,opt,name=GameId" json:"GameId,omitempty"`
	JssList          []*SHENJINGJSSInfo     `protobuf:"bytes,18,rep,name=JssList" json:"JssList,omitempty"`
	IfSearch         *string                `protobuf:"bytes,19,opt,name=IfSearch" json:"IfSearch,omitempty"`
	BulletinList     []*DDBulletinInfo      `protobuf:"bytes,20,rep,name=BulletinList" json:"BulletinList,omitempty"`
	VersionInfo      *string                `protobuf:"bytes,21,opt,name=VersionInfo" json:"VersionInfo,omitempty"`
	MatchSvrList     []*DDRoomInfo          `protobuf:"bytes,22,rep,name=MatchSvrList" json:"MatchSvrList,omitempty"`
	Sex              *int32                 `protobuf:"varint,23,opt,name=Sex" json:"Sex,omitempty"`
	RoomSvrList      []*DDRoomInfo          `protobuf:"bytes,24,rep,name=RoomSvrList" json:"RoomSvrList,omitempty"`
	DdzActive        *int32                 `protobuf:"varint,25,opt,name=DdzActive,def=0" json:"DdzActive,omitempty"`
	MsgUrl           *string                `protobuf:"bytes,26,opt,name=MsgUrl" json:"MsgUrl,omitempty"`
	ErrorCode        *int32                 `protobuf:"varint,27,opt,name=ErrorCode,def=0" json:"ErrorCode,omitempty"`
	NickName         *string                `protobuf:"bytes,28,opt,name=NickName" json:"NickName,omitempty"`
	ReleaseTag       *int32                 `protobuf:"varint,29,opt,name=releaseTag" json:"releaseTag,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ACKQuickConn) Reset()                    { *m = ACKQuickConn{} }
func (m *ACKQuickConn) String() string            { return proto.CompactTextString(m) }
func (*ACKQuickConn) ProtoMessage()               {}
func (*ACKQuickConn) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{113} }

const Default_ACKQuickConn_DdzActive int32 = 0
const Default_ACKQuickConn_ErrorCode int32 = 0

func (m *ACKQuickConn) GetAckResult() int32 {
	if m != nil && m.AckResult != nil {
		return *m.AckResult
	}
	return 0
}

func (m *ACKQuickConn) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ACKQuickConn) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *ACKQuickConn) GetRoleName() string {
	if m != nil && m.RoleName != nil {
		return *m.RoleName
	}
	return ""
}

func (m *ACKQuickConn) GetYuanBaoCnt() int32 {
	if m != nil && m.YuanBaoCnt != nil {
		return *m.YuanBaoCnt
	}
	return 0
}

func (m *ACKQuickConn) GetCoinCnt() int64 {
	if m != nil && m.CoinCnt != nil {
		return *m.CoinCnt
	}
	return 0
}

func (m *ACKQuickConn) GetRoomList() []*DDRoomInfo {
	if m != nil {
		return m.RoomList
	}
	return nil
}

func (m *ACKQuickConn) GetMatchRoomList() []*DDSHENJINGMatchInfo {
	if m != nil {
		return m.MatchRoomList
	}
	return nil
}

func (m *ACKQuickConn) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *ACKQuickConn) GetCertNoCert() []byte {
	if m != nil {
		return m.CertNoCert
	}
	return nil
}

func (m *ACKQuickConn) GetCurVersion() int32 {
	if m != nil && m.CurVersion != nil {
		return *m.CurVersion
	}
	return 0
}

func (m *ACKQuickConn) GetPlayEnable() string {
	if m != nil && m.PlayEnable != nil {
		return *m.PlayEnable
	}
	return ""
}

func (m *ACKQuickConn) GetDownloadUrl() string {
	if m != nil && m.DownloadUrl != nil {
		return *m.DownloadUrl
	}
	return ""
}

func (m *ACKQuickConn) GetIfPreserve() string {
	if m != nil && m.IfPreserve != nil {
		return *m.IfPreserve
	}
	return ""
}

func (m *ACKQuickConn) GetPreserveMsg() string {
	if m != nil && m.PreserveMsg != nil {
		return *m.PreserveMsg
	}
	return ""
}

func (m *ACKQuickConn) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *ACKQuickConn) GetJssList() []*SHENJINGJSSInfo {
	if m != nil {
		return m.JssList
	}
	return nil
}

func (m *ACKQuickConn) GetIfSearch() string {
	if m != nil && m.IfSearch != nil {
		return *m.IfSearch
	}
	return ""
}

func (m *ACKQuickConn) GetBulletinList() []*DDBulletinInfo {
	if m != nil {
		return m.BulletinList
	}
	return nil
}

func (m *ACKQuickConn) GetVersionInfo() string {
	if m != nil && m.VersionInfo != nil {
		return *m.VersionInfo
	}
	return ""
}

func (m *ACKQuickConn) GetMatchSvrList() []*DDRoomInfo {
	if m != nil {
		return m.MatchSvrList
	}
	return nil
}

func (m *ACKQuickConn) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *ACKQuickConn) GetRoomSvrList() []*DDRoomInfo {
	if m != nil {
		return m.RoomSvrList
	}
	return nil
}

func (m *ACKQuickConn) GetDdzActive() int32 {
	if m != nil && m.DdzActive != nil {
		return *m.DdzActive
	}
	return Default_ACKQuickConn_DdzActive
}

func (m *ACKQuickConn) GetMsgUrl() string {
	if m != nil && m.MsgUrl != nil {
		return *m.MsgUrl
	}
	return ""
}

func (m *ACKQuickConn) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return Default_ACKQuickConn_ErrorCode
}

func (m *ACKQuickConn) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *ACKQuickConn) GetReleaseTag() int32 {
	if m != nil && m.ReleaseTag != nil {
		return *m.ReleaseTag
	}
	return 0
}

type NullMsg struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *NullMsg) Reset()                    { *m = NullMsg{} }
func (m *NullMsg) String() string            { return proto.CompactTextString(m) }
func (*NullMsg) ProtoMessage()               {}
func (*NullMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{114} }

// 新增用户的时候,发送广播
type Game_SendAddUser struct {
	Matchid          []byte  `protobuf:"bytes,1,opt,name=Matchid" json:"Matchid,omitempty"`
	Tableid          *int32  `protobuf:"varint,2,opt,name=Tableid" json:"Tableid,omitempty"`
	NickName         *string `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty"`
	Coin             *int64  `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	Seat             *int32  `protobuf:"varint,5,opt,name=seat" json:"seat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_SendAddUser) Reset()                    { *m = Game_SendAddUser{} }
func (m *Game_SendAddUser) String() string            { return proto.CompactTextString(m) }
func (*Game_SendAddUser) ProtoMessage()               {}
func (*Game_SendAddUser) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{115} }

func (m *Game_SendAddUser) GetMatchid() []byte {
	if m != nil {
		return m.Matchid
	}
	return nil
}

func (m *Game_SendAddUser) GetTableid() int32 {
	if m != nil && m.Tableid != nil {
		return *m.Tableid
	}
	return 0
}

func (m *Game_SendAddUser) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *Game_SendAddUser) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_SendAddUser) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

type Game_Notice struct {
	NoticeType       *int32 `protobuf:"varint,1,opt,name=noticeType" json:"noticeType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_Notice) Reset()                    { *m = Game_Notice{} }
func (m *Game_Notice) String() string            { return proto.CompactTextString(m) }
func (*Game_Notice) ProtoMessage()               {}
func (*Game_Notice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{116} }

func (m *Game_Notice) GetNoticeType() int32 {
	if m != nil && m.NoticeType != nil {
		return *m.NoticeType
	}
	return 0
}

// 公告的内容
type Game_AckNotice struct {
	NoticeType       *int32   `protobuf:"varint,1,opt,name=noticeType" json:"noticeType,omitempty"`
	NoticeTitle      *string  `protobuf:"bytes,2,opt,name=noticeTitle" json:"noticeTitle,omitempty"`
	NoticeContent    *string  `protobuf:"bytes,3,opt,name=noticeContent" json:"noticeContent,omitempty"`
	NoticeMemo       *string  `protobuf:"bytes,4,opt,name=noticeMemo" json:"noticeMemo,omitempty"`
	Id               *int32   `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
	Fileds           []string `protobuf:"bytes,6,rep,name=fileds" json:"fileds,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Game_AckNotice) Reset()                    { *m = Game_AckNotice{} }
func (m *Game_AckNotice) String() string            { return proto.CompactTextString(m) }
func (*Game_AckNotice) ProtoMessage()               {}
func (*Game_AckNotice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{117} }

func (m *Game_AckNotice) GetNoticeType() int32 {
	if m != nil && m.NoticeType != nil {
		return *m.NoticeType
	}
	return 0
}

func (m *Game_AckNotice) GetNoticeTitle() string {
	if m != nil && m.NoticeTitle != nil {
		return *m.NoticeTitle
	}
	return ""
}

func (m *Game_AckNotice) GetNoticeContent() string {
	if m != nil && m.NoticeContent != nil {
		return *m.NoticeContent
	}
	return ""
}

func (m *Game_AckNotice) GetNoticeMemo() string {
	if m != nil && m.NoticeMemo != nil {
		return *m.NoticeMemo
	}
	return ""
}

func (m *Game_AckNotice) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Game_AckNotice) GetFileds() []string {
	if m != nil {
		return m.Fileds
	}
	return nil
}

// 创建房间
type Game_CreateDesk struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Password         *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	SmallBlind       *int64  `protobuf:"varint,3,opt,name=smallBlind" json:"smallBlind,omitempty"`
	BigBlind         *int64  `protobuf:"varint,4,opt,name=bigBlind" json:"bigBlind,omitempty"`
	InitCoin         *int64  `protobuf:"varint,5,opt,name=initCoin" json:"initCoin,omitempty"`
	InitCount        *int32  `protobuf:"varint,6,opt,name=initCount" json:"initCount,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_CreateDesk) Reset()                    { *m = Game_CreateDesk{} }
func (m *Game_CreateDesk) String() string            { return proto.CompactTextString(m) }
func (*Game_CreateDesk) ProtoMessage()               {}
func (*Game_CreateDesk) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{118} }

func (m *Game_CreateDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Game_CreateDesk) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *Game_CreateDesk) GetSmallBlind() int64 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *Game_CreateDesk) GetBigBlind() int64 {
	if m != nil && m.BigBlind != nil {
		return *m.BigBlind
	}
	return 0
}

func (m *Game_CreateDesk) GetInitCoin() int64 {
	if m != nil && m.InitCoin != nil {
		return *m.InitCoin
	}
	return 0
}

func (m *Game_CreateDesk) GetInitCount() int32 {
	if m != nil && m.InitCount != nil {
		return *m.InitCount
	}
	return 0
}

// 创建房间回复的信息
type Game_AckCreateDesk struct {
	Result           *int32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	DeskId           *int32  `protobuf:"varint,2,opt,name=deskId" json:"deskId,omitempty"`
	Password         *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_AckCreateDesk) Reset()                    { *m = Game_AckCreateDesk{} }
func (m *Game_AckCreateDesk) String() string            { return proto.CompactTextString(m) }
func (*Game_AckCreateDesk) ProtoMessage()               {}
func (*Game_AckCreateDesk) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{119} }

func (m *Game_AckCreateDesk) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_AckCreateDesk) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *Game_AckCreateDesk) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

// 解散房间
type Game_DissolveDesk struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_DissolveDesk) Reset()                    { *m = Game_DissolveDesk{} }
func (m *Game_DissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*Game_DissolveDesk) ProtoMessage()               {}
func (*Game_DissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{120} }

func (m *Game_DissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 解散房间回复
type Game_AckDissolveDesk struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Result           *int32  `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	DeskId           *int32  `protobuf:"varint,3,opt,name=deskId" json:"deskId,omitempty"`
	PassWord         *string `protobuf:"bytes,4,opt,name=passWord" json:"passWord,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_AckDissolveDesk) Reset()                    { *m = Game_AckDissolveDesk{} }
func (m *Game_AckDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*Game_AckDissolveDesk) ProtoMessage()               {}
func (*Game_AckDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{121} }

func (m *Game_AckDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Game_AckDissolveDesk) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_AckDissolveDesk) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *Game_AckDissolveDesk) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

// 离开房间
type Game_LeaveDesk struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_LeaveDesk) Reset()                    { *m = Game_LeaveDesk{} }
func (m *Game_LeaveDesk) String() string            { return proto.CompactTextString(m) }
func (*Game_LeaveDesk) ProtoMessage()               {}
func (*Game_LeaveDesk) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{122} }

func (m *Game_LeaveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 离开房间的回复
type Game_ACKLeaveDesk struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_ACKLeaveDesk) Reset()                    { *m = Game_ACKLeaveDesk{} }
func (m *Game_ACKLeaveDesk) String() string            { return proto.CompactTextString(m) }
func (*Game_ACKLeaveDesk) ProtoMessage()               {}
func (*Game_ACKLeaveDesk) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{123} }

func (m *Game_ACKLeaveDesk) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 准备游戏
type Game_Ready struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_Ready) Reset()                    { *m = Game_Ready{} }
func (m *Game_Ready) String() string            { return proto.CompactTextString(m) }
func (*Game_Ready) ProtoMessage()               {}
func (*Game_Ready) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{124} }

func (m *Game_Ready) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 准备游戏的结果
type Game_AckReady struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_AckReady) Reset()                    { *m = Game_AckReady{} }
func (m *Game_AckReady) String() string            { return proto.CompactTextString(m) }
func (*Game_AckReady) ProtoMessage()               {}
func (*Game_AckReady) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{125} }

func (m *Game_AckReady) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 开始游戏
type Game_Begin struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_Begin) Reset()                    { *m = Game_Begin{} }
func (m *Game_Begin) String() string            { return proto.CompactTextString(m) }
func (*Game_Begin) ProtoMessage()               {}
func (*Game_Begin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{126} }

func (m *Game_Begin) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 游戏战绩
type Game_GameRecord struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_GameRecord) Reset()                    { *m = Game_GameRecord{} }
func (m *Game_GameRecord) String() string            { return proto.CompactTextString(m) }
func (*Game_GameRecord) ProtoMessage()               {}
func (*Game_GameRecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{127} }

func (m *Game_GameRecord) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Game_GameRecord) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// message
type Game_BeanUserRecord struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	WinAmount        *int64  `protobuf:"varint,3,opt,name=WinAmount" json:"WinAmount,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_BeanUserRecord) Reset()                    { *m = Game_BeanUserRecord{} }
func (m *Game_BeanUserRecord) String() string            { return proto.CompactTextString(m) }
func (*Game_BeanUserRecord) ProtoMessage()               {}
func (*Game_BeanUserRecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{128} }

func (m *Game_BeanUserRecord) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Game_BeanUserRecord) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *Game_BeanUserRecord) GetWinAmount() int64 {
	if m != nil && m.WinAmount != nil {
		return *m.WinAmount
	}
	return 0
}

// message
type Game_BeanGameRecord struct {
	Id               *int32                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DeskId           *int32                 `protobuf:"varint,2,opt,name=deskId" json:"deskId,omitempty"`
	BeginTime        *string                `protobuf:"bytes,3,opt,name=beginTime" json:"beginTime,omitempty"`
	Users            []*Game_BeanUserRecord `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *Game_BeanGameRecord) Reset()                    { *m = Game_BeanGameRecord{} }
func (m *Game_BeanGameRecord) String() string            { return proto.CompactTextString(m) }
func (*Game_BeanGameRecord) ProtoMessage()               {}
func (*Game_BeanGameRecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{129} }

func (m *Game_BeanGameRecord) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Game_BeanGameRecord) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *Game_BeanGameRecord) GetBeginTime() string {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return ""
}

func (m *Game_BeanGameRecord) GetUsers() []*Game_BeanUserRecord {
	if m != nil {
		return m.Users
	}
	return nil
}

//
type Game_AckGameRecord struct {
	UserId           *uint32                `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Result           *int32                 `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	Records          []*Game_BeanGameRecord `protobuf:"bytes,3,rep,name=records" json:"records,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *Game_AckGameRecord) Reset()                    { *m = Game_AckGameRecord{} }
func (m *Game_AckGameRecord) String() string            { return proto.CompactTextString(m) }
func (*Game_AckGameRecord) ProtoMessage()               {}
func (*Game_AckGameRecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{130} }

func (m *Game_AckGameRecord) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Game_AckGameRecord) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_AckGameRecord) GetRecords() []*Game_BeanGameRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

// 微信信息
type WeixinInfo struct {
	OpenId           *string `protobuf:"bytes,1,opt,name=openId" json:"openId,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	HeadUrl          *string `protobuf:"bytes,3,opt,name=headUrl" json:"headUrl,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WeixinInfo) Reset()                    { *m = WeixinInfo{} }
func (m *WeixinInfo) String() string            { return proto.CompactTextString(m) }
func (*WeixinInfo) ProtoMessage()               {}
func (*WeixinInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{131} }

func (m *WeixinInfo) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *WeixinInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WeixinInfo) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

// 聊天的内容
type Game_Message struct {
	MsgType          *int32  `protobuf:"varint,1,opt,name=msgType" json:"msgType,omitempty"`
	Id               *int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Msg              *string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	UserId           *uint32 `protobuf:"varint,4,opt,name=userId" json:"userId,omitempty"`
	DeskId           *int32  `protobuf:"varint,5,opt,name=deskId" json:"deskId,omitempty"`
	Seat             *int32  `protobuf:"varint,6,opt,name=seat" json:"seat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_Message) Reset()                    { *m = Game_Message{} }
func (m *Game_Message) String() string            { return proto.CompactTextString(m) }
func (*Game_Message) ProtoMessage()               {}
func (*Game_Message) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{132} }

func (m *Game_Message) GetMsgType() int32 {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return 0
}

func (m *Game_Message) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Game_Message) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *Game_Message) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Game_Message) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *Game_Message) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

// 消息广播
type Game_SendMessage struct {
	MsgType          *int32  `protobuf:"varint,1,opt,name=msgType" json:"msgType,omitempty"`
	Id               *int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Msg              *string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	UserId           *uint32 `protobuf:"varint,4,opt,name=userId" json:"userId,omitempty"`
	Seat             *int32  `protobuf:"varint,5,opt,name=seat" json:"seat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_SendMessage) Reset()                    { *m = Game_SendMessage{} }
func (m *Game_SendMessage) String() string            { return proto.CompactTextString(m) }
func (*Game_SendMessage) ProtoMessage()               {}
func (*Game_SendMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{133} }

func (m *Game_SendMessage) GetMsgType() int32 {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return 0
}

func (m *Game_SendMessage) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Game_SendMessage) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *Game_SendMessage) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Game_SendMessage) GetSeat() int32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

// 几局游戏完了之后的广播信息
type Game_EndLottery struct {
	Coin             *int64  `protobuf:"varint,1,opt,name=coin" json:"coin,omitempty"`
	BigWin           *bool   `protobuf:"varint,2,opt,name=bigWin" json:"bigWin,omitempty"`
	Owner            *bool   `protobuf:"varint,3,opt,name=owner" json:"owner,omitempty"`
	Rolename         *string `protobuf:"bytes,4,opt,name=rolename" json:"rolename,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_EndLottery) Reset()                    { *m = Game_EndLottery{} }
func (m *Game_EndLottery) String() string            { return proto.CompactTextString(m) }
func (*Game_EndLottery) ProtoMessage()               {}
func (*Game_EndLottery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{134} }

func (m *Game_EndLottery) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Game_EndLottery) GetBigWin() bool {
	if m != nil && m.BigWin != nil {
		return *m.BigWin
	}
	return false
}

func (m *Game_EndLottery) GetOwner() bool {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return false
}

func (m *Game_EndLottery) GetRolename() string {
	if m != nil && m.Rolename != nil {
		return *m.Rolename
	}
	return ""
}

// 几局完成之后的情况
type Game_SendDeskEndLottery struct {
	Result           *int32             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	CoinInfo         []*Game_EndLottery `protobuf:"bytes,2,rep,name=coinInfo" json:"coinInfo,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Game_SendDeskEndLottery) Reset()                    { *m = Game_SendDeskEndLottery{} }
func (m *Game_SendDeskEndLottery) String() string            { return proto.CompactTextString(m) }
func (*Game_SendDeskEndLottery) ProtoMessage()               {}
func (*Game_SendDeskEndLottery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{135} }

func (m *Game_SendDeskEndLottery) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_SendDeskEndLottery) GetCoinInfo() []*Game_EndLottery {
	if m != nil {
		return m.CoinInfo
	}
	return nil
}

type Game_TounamentBlindBean struct {
	SmallBlind       *int32 `protobuf:"varint,1,opt,name=smallBlind" json:"smallBlind,omitempty"`
	Ante             *int32 `protobuf:"varint,2,opt,name=ante" json:"ante,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Game_TounamentBlindBean) Reset()                    { *m = Game_TounamentBlindBean{} }
func (m *Game_TounamentBlindBean) String() string            { return proto.CompactTextString(m) }
func (*Game_TounamentBlindBean) ProtoMessage()               {}
func (*Game_TounamentBlindBean) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{136} }

func (m *Game_TounamentBlindBean) GetSmallBlind() int32 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *Game_TounamentBlindBean) GetAnte() int32 {
	if m != nil && m.Ante != nil {
		return *m.Ante
	}
	return 0
}

// 盲注的信息
type Game_TounamentBlind struct {
	Data             []*Game_TounamentBlindBean `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *Game_TounamentBlind) Reset()                    { *m = Game_TounamentBlind{} }
func (m *Game_TounamentBlind) String() string            { return proto.CompactTextString(m) }
func (*Game_TounamentBlind) ProtoMessage()               {}
func (*Game_TounamentBlind) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{137} }

func (m *Game_TounamentBlind) GetData() []*Game_TounamentBlindBean {
	if m != nil {
		return m.Data
	}
	return nil
}

type Game_TounamentRewardsBean struct {
	IconPath         *string `protobuf:"bytes,1,opt,name=iconPath" json:"iconPath,omitempty"`
	Rewards          *string `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_TounamentRewardsBean) Reset()                    { *m = Game_TounamentRewardsBean{} }
func (m *Game_TounamentRewardsBean) String() string            { return proto.CompactTextString(m) }
func (*Game_TounamentRewardsBean) ProtoMessage()               {}
func (*Game_TounamentRewardsBean) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{138} }

func (m *Game_TounamentRewardsBean) GetIconPath() string {
	if m != nil && m.IconPath != nil {
		return *m.IconPath
	}
	return ""
}

func (m *Game_TounamentRewardsBean) GetRewards() string {
	if m != nil && m.Rewards != nil {
		return *m.Rewards
	}
	return ""
}

type Game_TounamentRewards struct {
	Data             []*Game_TounamentRewardsBean `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *Game_TounamentRewards) Reset()                    { *m = Game_TounamentRewards{} }
func (m *Game_TounamentRewards) String() string            { return proto.CompactTextString(m) }
func (*Game_TounamentRewards) ProtoMessage()               {}
func (*Game_TounamentRewards) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{139} }

func (m *Game_TounamentRewards) GetData() []*Game_TounamentRewardsBean {
	if m != nil {
		return m.Data
	}
	return nil
}

type Game_TounamentRankBean struct {
	Place            *int32  `protobuf:"varint,1,opt,name=place" json:"place,omitempty"`
	PlayerImage      *string `protobuf:"bytes,2,opt,name=playerImage" json:"playerImage,omitempty"`
	PlayerName       *string `protobuf:"bytes,3,opt,name=playerName" json:"playerName,omitempty"`
	Coin             *int64  `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_TounamentRankBean) Reset()                    { *m = Game_TounamentRankBean{} }
func (m *Game_TounamentRankBean) String() string            { return proto.CompactTextString(m) }
func (*Game_TounamentRankBean) ProtoMessage()               {}
func (*Game_TounamentRankBean) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{140} }

func (m *Game_TounamentRankBean) GetPlace() int32 {
	if m != nil && m.Place != nil {
		return *m.Place
	}
	return 0
}

func (m *Game_TounamentRankBean) GetPlayerImage() string {
	if m != nil && m.PlayerImage != nil {
		return *m.PlayerImage
	}
	return ""
}

func (m *Game_TounamentRankBean) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *Game_TounamentRankBean) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

type Game_TounamentRank struct {
	Data             []*Game_TounamentRankBean `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Game_TounamentRank) Reset()                    { *m = Game_TounamentRank{} }
func (m *Game_TounamentRank) String() string            { return proto.CompactTextString(m) }
func (*Game_TounamentRank) ProtoMessage()               {}
func (*Game_TounamentRank) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{141} }

func (m *Game_TounamentRank) GetData() []*Game_TounamentRankBean {
	if m != nil {
		return m.Data
	}
	return nil
}

type Game_TounamentSummary struct {
	Fee              *string `protobuf:"bytes,1,opt,name=fee" json:"fee,omitempty"`
	Time             *string `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	PersonCount      *string `protobuf:"bytes,3,opt,name=personCount" json:"personCount,omitempty"`
	Coin             *string `protobuf:"bytes,4,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_TounamentSummary) Reset()                    { *m = Game_TounamentSummary{} }
func (m *Game_TounamentSummary) String() string            { return proto.CompactTextString(m) }
func (*Game_TounamentSummary) ProtoMessage()               {}
func (*Game_TounamentSummary) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{142} }

func (m *Game_TounamentSummary) GetFee() string {
	if m != nil && m.Fee != nil {
		return *m.Fee
	}
	return ""
}

func (m *Game_TounamentSummary) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *Game_TounamentSummary) GetPersonCount() string {
	if m != nil && m.PersonCount != nil {
		return *m.PersonCount
	}
	return ""
}

func (m *Game_TounamentSummary) GetCoin() string {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return ""
}

type Game_MatchItem struct {
	Type             *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Title            *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Time             *string `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Status           *int32  `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	CostFee          *int64  `protobuf:"varint,5,opt,name=costFee" json:"costFee,omitempty"`
	Person           *int32  `protobuf:"varint,6,opt,name=person" json:"person,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Game_MatchItem) Reset()                    { *m = Game_MatchItem{} }
func (m *Game_MatchItem) String() string            { return proto.CompactTextString(m) }
func (*Game_MatchItem) ProtoMessage()               {}
func (*Game_MatchItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{143} }

func (m *Game_MatchItem) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Game_MatchItem) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Game_MatchItem) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *Game_MatchItem) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *Game_MatchItem) GetCostFee() int64 {
	if m != nil && m.CostFee != nil {
		return *m.CostFee
	}
	return 0
}

func (m *Game_MatchItem) GetPerson() int32 {
	if m != nil && m.Person != nil {
		return *m.Person
	}
	return 0
}

// 竞标赛场次列表，每条包括信息：
type Game_MatchList struct {
	Result           *int32            `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Items            []*Game_MatchItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Game_MatchList) Reset()                    { *m = Game_MatchList{} }
func (m *Game_MatchList) String() string            { return proto.CompactTextString(m) }
func (*Game_MatchList) ProtoMessage()               {}
func (*Game_MatchList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{144} }

func (m *Game_MatchList) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Game_MatchList) GetItems() []*Game_MatchItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Game_ACKConfirmConnect)(nil), "bbproto.game_ACKConfirmConnect")
	proto.RegisterType((*Game_LoginGame)(nil), "bbproto.game_LoginGame")
	proto.RegisterType((*Game_EnterMatch)(nil), "bbproto.game_EnterMatch")
	proto.RegisterType((*Game_AckEnterMatch)(nil), "bbproto.game_AckEnterMatch")
	proto.RegisterType((*Game_AddHandCoin)(nil), "bbproto.game_AddHandCoin")
	proto.RegisterType((*Game_CardInfo)(nil), "bbproto.game_CardInfo")
	proto.RegisterType((*Game_InitCard)(nil), "bbproto.game_InitCard")
	proto.RegisterType((*Game_RaiseBet)(nil), "bbproto.game_RaiseBet")
	proto.RegisterType((*Game_AckRaiseBet)(nil), "bbproto.game_AckRaiseBet")
	proto.RegisterType((*Game_FollowBet)(nil), "bbproto.game_FollowBet")
	proto.RegisterType((*Game_AckFollowBet)(nil), "bbproto.game_AckFollowBet")
	proto.RegisterType((*Game_FoldBet)(nil), "bbproto.game_FoldBet")
	proto.RegisterType((*Game_AckFoldBet)(nil), "bbproto.game_AckFoldBet")
	proto.RegisterType((*Game_CheckBet)(nil), "bbproto.game_CheckBet")
	proto.RegisterType((*Game_AckCheckBet)(nil), "bbproto.game_AckCheckBet")
	proto.RegisterType((*Game_SendFlopCard)(nil), "bbproto.game_SendFlopCard")
	proto.RegisterType((*Game_SendTurnCard)(nil), "bbproto.game_SendTurnCard")
	proto.RegisterType((*Game_SendRiverCard)(nil), "bbproto.game_SendRiverCard")
	proto.RegisterType((*Game_SendOverTurn)(nil), "bbproto.game_SendOverTurn")
	proto.RegisterType((*Game_CardType)(nil), "bbproto.game_CardType")
	proto.RegisterType((*Game_WinCoin)(nil), "bbproto.game_WinCoin")
	proto.RegisterType((*Game_TestResult)(nil), "bbproto.game_TestResult")
	proto.RegisterType((*Game_LeaveMatch)(nil), "bbproto.game_LeaveMatch")
	proto.RegisterType((*Game_UserInfo)(nil), "bbproto.game_UserInfo")
	proto.RegisterType((*Game_SendUserInfo)(nil), "bbproto.game_SendUserInfo")
	proto.RegisterType((*Game_SendRank)(nil), "bbproto.game_SendRank")
	proto.RegisterType((*Game_RestMatch)(nil), "bbproto.game_RestMatch")
	proto.RegisterType((*Game_ChangeTable)(nil), "bbproto.game_ChangeTable")
	proto.RegisterType((*Game_SendGameInfo)(nil), "bbproto.game_SendGameInfo")
	proto.RegisterType((*Game_ShowCard)(nil), "bbproto.game_ShowCard")
	proto.RegisterType((*Game_AckShowCard)(nil), "bbproto.game_AckShowCard")
	proto.RegisterType((*Game_TestLogin)(nil), "bbproto.game_TestLogin")
	proto.RegisterType((*Game_AckTestLogin)(nil), "bbproto.game_AckTestLogin")
	proto.RegisterType((*Game_TestStartMatch)(nil), "bbproto.game_TestStartMatch")
	proto.RegisterType((*Game_ReportPlayer)(nil), "bbproto.game_ReportPlayer")
	proto.RegisterType((*Game_UseDelayTime)(nil), "bbproto.game_UseDelayTime")
	proto.RegisterType((*Game_LeaveSeat)(nil), "bbproto.game_LeaveSeat")
	proto.RegisterType((*Game_MatchChip)(nil), "bbproto.game_MatchChip")
	proto.RegisterType((*Game_SendUserRank)(nil), "bbproto.game_SendUserRank")
	proto.RegisterType((*Game_BlindChange)(nil), "bbproto.game_BlindChange")
	proto.RegisterType((*Game_NextBlindInfo)(nil), "bbproto.game_NextBlindInfo")
	proto.RegisterType((*Game_SendRestTime)(nil), "bbproto.game_SendRestTime")
	proto.RegisterType((*Game_LeaveTable)(nil), "bbproto.game_LeaveTable")
	proto.RegisterType((*Game_PreCoin)(nil), "bbproto.game_PreCoin")
	proto.RegisterType((*Game_BlindCoin)(nil), "bbproto.game_BlindCoin")
	proto.RegisterType((*Game_NowelterInfo)(nil), "bbproto.game_NowelterInfo")
	proto.RegisterType((*DDReqSitdownSeat)(nil), "bbproto.DDReqSitdownSeat")
	proto.RegisterType((*DDAckSitdownSeat)(nil), "bbproto.DDAckSitdownSeat")
	proto.RegisterType((*DDReqBuyChip)(nil), "bbproto.DDReqBuyChip")
	proto.RegisterType((*DDAckBuyChip)(nil), "bbproto.DDAckBuyChip")
	proto.RegisterType((*DDNeetBugChip)(nil), "bbproto.DDNeetBugChip")
	proto.RegisterType((*DDReqLeave)(nil), "bbproto.DDReqLeave")
	proto.RegisterType((*DDAckLeave)(nil), "bbproto.DDAckLeave")
	proto.RegisterType((*DDGameRule)(nil), "bbproto.DDGameRule")
	proto.RegisterType((*DDWaitBigBling)(nil), "bbproto.DDWaitBigBling")
	proto.RegisterType((*DDNextBiglingWatch)(nil), "bbproto.DDNextBiglingWatch")
	proto.RegisterType((*DDChatMsg)(nil), "bbproto.DDChatMsg")
	proto.RegisterType((*DDProposalMsg)(nil), "bbproto.DDProposalMsg")
	proto.RegisterType((*DDReqPayMsg)(nil), "bbproto.DDReqPayMsg")
	proto.RegisterType((*DDAckPayMsg)(nil), "bbproto.DDAckPayMsg")
	proto.RegisterType((*DDReqExChangeHYD)(nil), "bbproto.DDReqExChangeHYD")
	proto.RegisterType((*DDAckExChangeHYD)(nil), "bbproto.DDAckExChangeHYD")
	proto.RegisterType((*DDNtfChangeHYD)(nil), "bbproto.DDNtfChangeHYD")
	proto.RegisterType((*DDReqPresentCoins)(nil), "bbproto.DDReqPresentCoins")
	proto.RegisterType((*DDAckPresentCoins)(nil), "bbproto.DDAckPresentCoins")
	proto.RegisterType((*DDReqPrivateChatMsg)(nil), "bbproto.DDReqPrivateChatMsg")
	proto.RegisterType((*DDAckPrivateChatMsg)(nil), "bbproto.DDAckPrivateChatMsg")
	proto.RegisterType((*DDReqAbleOrUnableChat)(nil), "bbproto.DDReqAbleOrUnableChat")
	proto.RegisterType((*DDAckAbleOrUnableChat)(nil), "bbproto.DDAckAbleOrUnableChat")
	proto.RegisterType((*DDReqKick)(nil), "bbproto.DDReqKick")
	proto.RegisterType((*DDAckKick)(nil), "bbproto.DDAckKick")
	proto.RegisterType((*DDUserInfos)(nil), "bbproto.DDUserInfos")
	proto.RegisterType((*DDUserList)(nil), "bbproto.DDUserList")
	proto.RegisterType((*DDModifyConfig)(nil), "bbproto.DDModifyConfig")
	proto.RegisterType((*DDUnAbleChatList)(nil), "bbproto.DDUnAbleChatList")
	proto.RegisterType((*DDShowPictrue)(nil), "bbproto.DDShowPictrue")
	proto.RegisterType((*DDAddUserToList)(nil), "bbproto.DDAddUserToList")
	proto.RegisterType((*DDDeleteUserFromList)(nil), "bbproto.DDDeleteUserFromList")
	proto.RegisterType((*DDBroadCastPlayerGiftStatus)(nil), "bbproto.DDBroadCastPlayerGiftStatus")
	proto.RegisterType((*DDGiveGift)(nil), "bbproto.DDGiveGift")
	proto.RegisterType((*DDGiveItem)(nil), "bbproto.DDGiveItem")
	proto.RegisterType((*DDBroadCastFace)(nil), "bbproto.DDBroadCastFace")
	proto.RegisterType((*DDReqRebuy)(nil), "bbproto.DDReqRebuy")
	proto.RegisterType((*DDAckRebuy)(nil), "bbproto.DDAckRebuy")
	proto.RegisterType((*DDBroadCastMatchRank)(nil), "bbproto.DDBroadCastMatchRank")
	proto.RegisterType((*REQSHENJINGReg)(nil), "bbproto.REQSHENJINGReg")
	proto.RegisterType((*ACKSHENJINGReg)(nil), "bbproto.ACKSHENJINGReg")
	proto.RegisterType((*REQSHENJINGConn)(nil), "bbproto.REQSHENJINGConn")
	proto.RegisterType((*ACKSHENJINGConn)(nil), "bbproto.ACKSHENJINGConn")
	proto.RegisterType((*REQSHENJINGShortCert)(nil), "bbproto.REQSHENJINGShortCert")
	proto.RegisterType((*ACKSHENJINGShortCert)(nil), "bbproto.ACKSHENJINGShortCert")
	proto.RegisterType((*REQSHENJINGOpenId)(nil), "bbproto.REQSHENJINGOpenId")
	proto.RegisterType((*ACKSHENJINGOpenId)(nil), "bbproto.ACKSHENJINGOpenId")
	proto.RegisterType((*REQSinaGame)(nil), "bbproto.REQSinaGame")
	proto.RegisterType((*ACKSinaGame)(nil), "bbproto.ACKSinaGame")
	proto.RegisterType((*REQWeiBo)(nil), "bbproto.REQWeiBo")
	proto.RegisterType((*ACKWeiBo)(nil), "bbproto.ACKWeiBo")
	proto.RegisterType((*REQSHENJINGExit)(nil), "bbproto.REQSHENJINGExit")
	proto.RegisterType((*REQSHENJINGGameVersion)(nil), "bbproto.REQSHENJINGGameVersion")
	proto.RegisterType((*ACKSHENJINGGameVersion)(nil), "bbproto.ACKSHENJINGGameVersion")
	proto.RegisterType((*REQSHENJINGNewVerify)(nil), "bbproto.REQSHENJINGNewVerify")
	proto.RegisterType((*ACKSHENJINGNewVerify)(nil), "bbproto.ACKSHENJINGNewVerify")
	proto.RegisterType((*REQSHENJINGFindPwd)(nil), "bbproto.REQSHENJINGFindPwd")
	proto.RegisterType((*ACKSHENJINGFindPwd)(nil), "bbproto.ACKSHENJINGFindPwd")
	proto.RegisterType((*ACKSHENJINGHeart)(nil), "bbproto.ACKSHENJINGHeart")
	proto.RegisterType((*SinaApiInfo)(nil), "bbproto.SinaApiInfo")
	proto.RegisterType((*SinaApiRet)(nil), "bbproto.SinaApiRet")
	proto.RegisterType((*DDRoomInfo)(nil), "bbproto.DDRoomInfo")
	proto.RegisterType((*DDSHENJINGMatchInfo)(nil), "bbproto.DDSHENJINGMatchInfo")
	proto.RegisterType((*SHENJINGRoomInfo)(nil), "bbproto.SHENJINGRoomInfo")
	proto.RegisterType((*SHENJINGJSSInfo)(nil), "bbproto.SHENJINGJSSInfo")
	proto.RegisterType((*DDBulletinInfo)(nil), "bbproto.DDBulletinInfo")
	proto.RegisterType((*REQQuickConn)(nil), "bbproto.REQQuickConn")
	proto.RegisterType((*ACKQuickConn)(nil), "bbproto.ACKQuickConn")
	proto.RegisterType((*NullMsg)(nil), "bbproto.NullMsg")
	proto.RegisterType((*Game_SendAddUser)(nil), "bbproto.Game_SendAddUser")
	proto.RegisterType((*Game_Notice)(nil), "bbproto.Game_Notice")
	proto.RegisterType((*Game_AckNotice)(nil), "bbproto.Game_AckNotice")
	proto.RegisterType((*Game_CreateDesk)(nil), "bbproto.Game_CreateDesk")
	proto.RegisterType((*Game_AckCreateDesk)(nil), "bbproto.Game_AckCreateDesk")
	proto.RegisterType((*Game_DissolveDesk)(nil), "bbproto.Game_DissolveDesk")
	proto.RegisterType((*Game_AckDissolveDesk)(nil), "bbproto.Game_AckDissolveDesk")
	proto.RegisterType((*Game_LeaveDesk)(nil), "bbproto.Game_LeaveDesk")
	proto.RegisterType((*Game_ACKLeaveDesk)(nil), "bbproto.Game_ACKLeaveDesk")
	proto.RegisterType((*Game_Ready)(nil), "bbproto.Game_Ready")
	proto.RegisterType((*Game_AckReady)(nil), "bbproto.Game_AckReady")
	proto.RegisterType((*Game_Begin)(nil), "bbproto.Game_Begin")
	proto.RegisterType((*Game_GameRecord)(nil), "bbproto.Game_GameRecord")
	proto.RegisterType((*Game_BeanUserRecord)(nil), "bbproto.Game_BeanUserRecord")
	proto.RegisterType((*Game_BeanGameRecord)(nil), "bbproto.Game_BeanGameRecord")
	proto.RegisterType((*Game_AckGameRecord)(nil), "bbproto.Game_AckGameRecord")
	proto.RegisterType((*WeixinInfo)(nil), "bbproto.WeixinInfo")
	proto.RegisterType((*Game_Message)(nil), "bbproto.Game_Message")
	proto.RegisterType((*Game_SendMessage)(nil), "bbproto.Game_SendMessage")
	proto.RegisterType((*Game_EndLottery)(nil), "bbproto.Game_EndLottery")
	proto.RegisterType((*Game_SendDeskEndLottery)(nil), "bbproto.Game_SendDeskEndLottery")
	proto.RegisterType((*Game_TounamentBlindBean)(nil), "bbproto.Game_TounamentBlindBean")
	proto.RegisterType((*Game_TounamentBlind)(nil), "bbproto.Game_TounamentBlind")
	proto.RegisterType((*Game_TounamentRewardsBean)(nil), "bbproto.Game_TounamentRewardsBean")
	proto.RegisterType((*Game_TounamentRewards)(nil), "bbproto.Game_TounamentRewards")
	proto.RegisterType((*Game_TounamentRankBean)(nil), "bbproto.Game_TounamentRankBean")
	proto.RegisterType((*Game_TounamentRank)(nil), "bbproto.Game_TounamentRank")
	proto.RegisterType((*Game_TounamentSummary)(nil), "bbproto.Game_TounamentSummary")
	proto.RegisterType((*Game_MatchItem)(nil), "bbproto.Game_MatchItem")
	proto.RegisterType((*Game_MatchList)(nil), "bbproto.Game_MatchList")
	proto.RegisterEnum("bbproto.Game_LeaveTable_Reason", Game_LeaveTable_Reason_name, Game_LeaveTable_Reason_value)
	proto.RegisterEnum("bbproto.DDAckPayMsg_Reason", DDAckPayMsg_Reason_name, DDAckPayMsg_Reason_value)
	proto.RegisterEnum("bbproto.DDAckPresentCoins_Reason", DDAckPresentCoins_Reason_name, DDAckPresentCoins_Reason_value)
}

var fileDescriptor1 = []byte{
	// 5361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe4, 0x7c, 0x49, 0x90, 0x23, 0x57,
	0x5a, 0xf0, 0xaf, 0x5d, 0x7a, 0xb5, 0xa9, 0xd4, 0x8b, 0xcb, 0xcb, 0xfc, 0xf6, 0x24, 0x1e, 0x4f,
	0x8f, 0xc1, 0xc6, 0xd8, 0x43, 0x10, 0x31, 0x44, 0xcc, 0x8c, 0x4a, 0x52, 0x75, 0xcb, 0xae, 0x52,
	0xc9, 0x92, 0xca, 0x6d, 0x1b, 0x86, 0x76, 0x96, 0xf4, 0xaa, 0x2a, 0x5d, 0xa9, 0x4c, 0x39, 0x33,
	0x55, 0x4b, 0x13, 0x10, 0x5c, 0x38, 0x10, 0x70, 0x20, 0xb8, 0x70, 0x80, 0x0b, 0x07, 0x96, 0x20,
	0xe0, 0xc4, 0x91, 0xe0, 0x06, 0x47, 0xce, 0x5c, 0x27, 0x38, 0x10, 0x5c, 0x88, 0x80, 0x13, 0x04,
	0x5c, 0xf8, 0xbe, 0xef, 0x2d, 0xf9, 0x32, 0x95, 0xaa, 0x52, 0xb7, 0x9b, 0x25, 0x82, 0x53, 0x97,
	0x3e, 0xbd, 0xf7, 0xed, 0xeb, 0x7b, 0x4f, 0xcd, 0xb6, 0x46, 0xfc, 0xca, 0x0e, 0x1f, 0xda, 0x53,
	0xfe, 0xee, 0x2c, 0xf0, 0x23, 0xbf, 0x51, 0x39, 0x3e, 0xa6, 0x3f, 0xac, 0x07, 0xec, 0xfe, 0x29,
	0x80, 0x9f, 0x34, 0x5b, 0x1f, 0xb5, 0x7c, 0xef, 0xc4, 0x09, 0xa6, 0xf0, 0x8f, 0xc7, 0xc7, 0x51,
	0x63, 0x93, 0x95, 0x03, 0x1e, 0xce, 0xdd, 0x68, 0x27, 0xf7, 0x46, 0xee, 0x41, 0xc9, 0x7a, 0x8f,
	0x6d, 0xd2, 0xca, 0x7d, 0xff, 0xd4, 0xf1, 0x10, 0x15, 0xae, 0xd8, 0xe7, 0x51, 0xc4, 0x03, 0x5a,
	0xb1, 0x6e, 0xec, 0xc8, 0xd3, 0x8e, 0x2f, 0xd9, 0x16, 0xed, 0xe8, 0x78, 0xb0, 0xe6, 0xc0, 0x8e,
	0xc6, 0x67, 0x8d, 0x2d, 0x56, 0xa1, 0x3f, 0xba, 0x6d, 0xb9, 0x07, 0x00, 0x23, 0xfb, 0xd8, 0xe5,
	0xce, 0x44, 0x6c, 0x6a, 0xd4, 0x59, 0xb5, 0x6f, 0x87, 0xe1, 0x63, 0x3f, 0x98, 0xec, 0x14, 0x68,
	0xc9, 0x1d, 0xb6, 0x16, 0xb6, 0xf6, 0x8e, 0x42, 0x1e, 0xf4, 0x00, 0xdb, 0x4e, 0x51, 0xd1, 0x9a,
	0x03, 0xa4, 0x3b, 0xd9, 0x29, 0xc1, 0xe7, 0x0d, 0xeb, 0x31, 0x6b, 0x08, 0x39, 0xc6, 0xe7, 0x06,
	0xb9, 0x94, 0x0c, 0x9a, 0xbc, 0xa4, 0x96, 0x20, 0x5f, 0x50, 0x2b, 0xbc, 0x01, 0xb7, 0x43, 0xdf,
	0x23, 0x42, 0x25, 0xab, 0xcf, 0xea, 0x02, 0xf1, 0x64, 0xf2, 0xc8, 0xf6, 0x26, 0x2d, 0xdf, 0xf1,
	0x4c, 0x34, 0x4b, 0xa4, 0x58, 0x67, 0xc5, 0x90, 0xdb, 0x91, 0x44, 0x0a, 0x9f, 0x70, 0x1f, 0x61,
	0x2c, 0x58, 0xef, 0xb0, 0x0d, 0xc2, 0xd8, 0xb2, 0x83, 0x49, 0xd7, 0x3b, 0xf1, 0x1b, 0x1b, 0xac,
	0x34, 0xf6, 0x5d, 0x3f, 0x90, 0x4c, 0xc2, 0xc7, 0x0b, 0xdb, 0x9d, 0x73, 0xa9, 0xc5, 0x1f, 0xe7,
	0xe4, 0xfa, 0xae, 0xe7, 0x44, 0xb8, 0xe7, 0x99, 0xc9, 0x83, 0x4a, 0x7b, 0xfc, 0x2a, 0x42, 0x0d,
	0x0a, 0xa1, 0x1a, 0x0f, 0x58, 0x95, 0x84, 0x01, 0x6c, 0xa0, 0xbf, 0xc2, 0x83, 0xb5, 0xf7, 0xef,
	0xbf, 0x2b, 0x3d, 0xe2, 0xdd, 0x24, 0x6f, 0x6f, 0x33, 0xd6, 0x9f, 0x1f, 0xbb, 0xce, 0x98, 0xd6,
	0x96, 0x6f, 0x5c, 0x0b, 0x74, 0x0e, 0x1c, 0x6f, 0x60, 0x3b, 0x21, 0xdf, 0xa9, 0xa0, 0xa8, 0x8d,
	0x06, 0x63, 0xcd, 0x71, 0xe4, 0xf8, 0xde, 0xc8, 0x01, 0xcb, 0x55, 0x89, 0xf6, 0x36, 0xab, 0xb5,
	0xb9, 0x6b, 0x5f, 0x13, 0xa8, 0x46, 0x22, 0x1e, 0x48, 0x09, 0x69, 0xeb, 0x2e, 0x8f, 0x56, 0x93,
	0x70, 0xb8, 0x4c, 0xc1, 0x7f, 0x94, 0x53, 0x36, 0x1b, 0x9f, 0xbf, 0x18, 0x94, 0x28, 0x9a, 0xb2,
	0x3e, 0x39, 0x5c, 0x41, 0x29, 0x95, 0x76, 0x94, 0xd5, 0x8e, 0x99, 0xef, 0xbb, 0x52, 0x74, 0x53,
	0x19, 0x55, 0x05, 0x69, 0xd9, 0x12, 0x22, 0xe4, 0xfe, 0xa1, 0x0c, 0xa9, 0x3d, 0xdf, 0x75, 0xfd,
	0xcb, 0xe7, 0xe0, 0xd2, 0xfa, 0xe3, 0x1c, 0xdb, 0x56, 0xa2, 0x3e, 0x37, 0x96, 0x84, 0x2c, 0xc5,
	0x84, 0xf4, 0xa5, 0x05, 0xe9, 0xcb, 0x04, 0x79, 0x76, 0x59, 0xbf, 0xcf, 0xd6, 0x95, 0xac, 0x93,
	0xe7, 0x91, 0xf4, 0x0f, 0x73, 0x32, 0x9b, 0x08, 0x49, 0x27, 0xff, 0x5b, 0xe5, 0xfc, 0x81, 0x8a,
	0xee, 0x33, 0x3e, 0x3e, 0x7f, 0x1e, 0x41, 0x4d, 0xef, 0x7d, 0x5e, 0x24, 0x5f, 0x43, 0xd2, 0xea,
	0x82, 0xa4, 0xb5, 0x05, 0x49, 0x19, 0x31, 0xfa, 0xa7, 0xca, 0xf7, 0x86, 0xdc, 0x9b, 0xec, 0xb9,
	0xfe, 0x6c, 0xc5, 0xe4, 0xf4, 0x2d, 0x48, 0x77, 0xb0, 0xf2, 0x3d, 0x62, 0x75, 0x79, 0x36, 0x91,
	0xcb, 0x7e, 0x86, 0xf8, 0xbf, 0x75, 0xd9, 0xfb, 0x24, 0xd8, 0xd2, 0x65, 0xd6, 0x2f, 0x18, 0xbc,
	0x8e, 0xe6, 0x81, 0xb7, 0x22, 0xaf, 0x6f, 0xb2, 0x22, 0x62, 0xbf, 0x99, 0x55, 0xeb, 0x17, 0x65,
	0xf1, 0x41, 0xe4, 0x03, 0xe7, 0x82, 0x07, 0x2f, 0x14, 0xfb, 0xef, 0x99, 0x7a, 0x3e, 0x04, 0xec,
	0xc8, 0xff, 0x6a, 0x1e, 0xd1, 0x47, 0x8b, 0x16, 0x54, 0x2a, 0x1e, 0xf2, 0xb1, 0xef, 0x4d, 0x08,
	0x56, 0x84, 0x44, 0x9e, 0xcc, 0x61, 0x25, 0xe5, 0x37, 0x67, 0xe0, 0x17, 0x63, 0xe1, 0x17, 0x05,
	0xe1, 0x17, 0xf4, 0xa9, 0xa2, 0x76, 0x24, 0x23, 0xc0, 0x72, 0x8d, 0x6a, 0x36, 0xba, 0x9e, 0x71,
	0xaa, 0x66, 0x64, 0x37, 0x5d, 0xcd, 0x84, 0x7d, 0xf2, 0xe6, 0xc7, 0x0f, 0xa4, 0x9f, 0xca, 0x8f,
	0xdf, 0x95, 0x4e, 0x2a, 0x3f, 0xfe, 0x6c, 0xcc, 0x0d, 0x7e, 0x8c, 0x00, 0xad, 0xc8, 0xb1, 0xd6,
	0x9f, 0xe5, 0x64, 0x1a, 0x79, 0xec, 0x78, 0x54, 0x8a, 0x95, 0xdb, 0xe7, 0x54, 0x6d, 0x41, 0x27,
	0xee, 0x7a, 0x13, 0x7e, 0x15, 0x6b, 0x81, 0xf8, 0x17, 0x5a, 0xd8, 0x30, 0x9d, 0xca, 0x60, 0xae,
	0x94, 0x64, 0xae, 0x9c, 0x64, 0xae, 0x92, 0x64, 0xae, 0xba, 0xc0, 0x5c, 0x4d, 0x41, 0x02, 0xdf,
	0xe5, 0x1e, 0x76, 0x29, 0x18, 0x22, 0xeb, 0xd6, 0x3f, 0xa9, 0xa4, 0x35, 0xe2, 0x61, 0x34, 0xa0,
	0x4e, 0x64, 0x05, 0xc3, 0x3d, 0x90, 0x46, 0x10, 0xae, 0x71, 0x53, 0xc5, 0x05, 0x79, 0x8f, 0x87,
	0x67, 0xfe, 0x25, 0x15, 0x67, 0xb4, 0x69, 0xa9, 0x71, 0x97, 0xad, 0x1f, 0x43, 0xa0, 0x6a, 0x68,
	0x89, 0xa0, 0x6f, 0xb3, 0x35, 0xa9, 0x31, 0xdc, 0x27, 0xeb, 0xf8, 0xbd, 0x24, 0x56, 0xa5, 0x52,
	0x33, 0x37, 0x08, 0xab, 0x7f, 0x1b, 0x62, 0x5f, 0x6d, 0xad, 0xde, 0xb0, 0xd5, 0x6a, 0x4a, 0x71,
	0xf7, 0xb9, 0x7d, 0xc1, 0x93, 0x1d, 0xdf, 0xaa, 0xe9, 0xaf, 0x2d, 0xfd, 0x09, 0xbb, 0x15, 0xd5,
	0x55, 0xe8, 0xde, 0x4f, 0x60, 0x50, 0x1b, 0xc4, 0xf6, 0x54, 0x7b, 0x48, 0x3d, 0xa3, 0xf5, 0xc4,
	0x08, 0x19, 0x8d, 0xe9, 0x81, 0xc0, 0x44, 0x62, 0xe4, 0xb2, 0xf4, 0xaa, 0x57, 0xde, 0xda, 0x27,
	0x5a, 0xff, 0xa2, 0xba, 0x32, 0x8a, 0x79, 0xdb, 0x3b, 0x5f, 0x41, 0x50, 0x53, 0x92, 0x82, 0x92,
	0x04, 0xf7, 0x4a, 0x6f, 0x04, 0x49, 0xf8, 0x80, 0x5f, 0xca, 0x40, 0x92, 0x3e, 0x09, 0xf6, 0xf4,
	0x04, 0xb0, 0xe5, 0xcf, 0xbd, 0x48, 0x66, 0x6b, 0x88, 0x66, 0x6f, 0xe4, 0x47, 0xb6, 0x2b, 0xad,
	0x84, 0xb0, 0x7b, 0x6c, 0xc3, 0xeb, 0xf9, 0x97, 0xdc, 0x85, 0xf6, 0x97, 0xc0, 0xd5, 0x05, 0xf0,
	0x28, 0x76, 0x56, 0x68, 0x8d, 0xbd, 0xe1, 0xd8, 0x0f, 0x84, 0xab, 0x12, 0x46, 0x41, 0x86, 0xd8,
	0x5b, 0x23, 0xf6, 0xc0, 0xe3, 0x3d, 0xd2, 0xf4, 0x3a, 0xc9, 0xfc, 0xbe, 0x6c, 0x57, 0xc0, 0x91,
	0xa3, 0x15, 0x8d, 0x6b, 0xfd, 0x8a, 0x2c, 0x66, 0x2d, 0xf0, 0xe8, 0x53, 0x4e, 0xdf, 0x2d, 0xee,
	0x02, 0xda, 0x3d, 0x7e, 0x99, 0x54, 0xd6, 0x42, 0x67, 0x6e, 0x6a, 0xaf, 0x98, 0xf0, 0x83, 0x52,
	0x96, 0x1f, 0x94, 0xc9, 0x0f, 0x7e, 0xa7, 0x64, 0x38, 0x02, 0x0e, 0x2d, 0x69, 0xf3, 0x2e, 0x31,
	0x15, 0x70, 0x84, 0xab, 0x87, 0x91, 0x1d, 0xcd, 0xc3, 0x98, 0x81, 0xd6, 0x99, 0x33, 0x4b, 0xd6,
	0x54, 0xaa, 0x99, 0xa2, 0xa6, 0x02, 0x03, 0x84, 0xa4, 0x0f, 0xcd, 0x2d, 0x74, 0xda, 0x65, 0xb5,
	0x69, 0x17, 0x2c, 0x4c, 0x9b, 0x44, 0x1a, 0x81, 0x8e, 0x7a, 0x46, 0x1d, 0x35, 0xc5, 0x77, 0xf5,
	0xc6, 0xf8, 0x36, 0x33, 0x41, 0xed, 0xb6, 0xde, 0x5b, 0x07, 0x2d, 0x53, 0xa9, 0x9a, 0x0a, 0x1d,
	0x42, 0xd6, 0x08, 0x92, 0xec, 0xc6, 0xd7, 0x95, 0x9a, 0x8f, 0x3b, 0x1e, 0xb2, 0xbd, 0xb3, 0x41,
	0x99, 0xc2, 0xcc, 0xf0, 0x9b, 0x2a, 0x67, 0x1e, 0x63, 0xc7, 0xb5, 0xb3, 0x45, 0x0b, 0xc0, 0x71,
	0x8e, 0x9b, 0x2e, 0xe4, 0xd8, 0x9d, 0xba, 0xfe, 0xbc, 0x1b, 0x70, 0xfb, 0x7c, 0x67, 0x5b, 0x7f,
	0xa6, 0xf8, 0xdf, 0x69, 0xd0, 0xe7, 0x44, 0xbf, 0x7f, 0x47, 0x99, 0x0a, 0x7c, 0xfa, 0x78, 0x7e,
	0x2d, 0x5c, 0xfa, 0xae, 0x06, 0xc2, 0x90, 0xe5, 0x7b, 0x02, 0x78, 0x4f, 0x01, 0x8f, 0xf7, 0x1c,
	0xcf, 0x76, 0xe9, 0x9b, 0x9d, 0xfb, 0x04, 0x7c, 0x89, 0x6d, 0x79, 0x38, 0x0c, 0x19, 0xc2, 0xbc,
	0x44, 0x5f, 0xdc, 0x67, 0x9b, 0xf4, 0x45, 0x4c, 0x6f, 0x47, 0x19, 0xc1, 0x73, 0xc6, 0xe7, 0xe4,
	0x17, 0x2f, 0x03, 0x53, 0x35, 0x64, 0x12, 0x07, 0x24, 0x18, 0x1f, 0x5f, 0x21, 0x26, 0xd5, 0xc0,
	0xf4, 0xaa, 0xb2, 0x7e, 0x18, 0xd7, 0xca, 0xd7, 0x48, 0x79, 0xa0, 0xa8, 0x08, 0xd4, 0x79, 0x60,
	0x5f, 0xed, 0x7c, 0x83, 0xd4, 0x12, 0xcf, 0x96, 0xff, 0x5f, 0x66, 0xed, 0xb5, 0x4b, 0xee, 0x5c,
	0x89, 0x34, 0x19, 0xee, 0xbc, 0x4e, 0xe6, 0xba, 0xa3, 0xcd, 0xf5, 0x58, 0x7f, 0x67, 0xed, 0xab,
	0xd4, 0x21, 0x73, 0x34, 0xe2, 0x9e, 0x26, 0xfc, 0x11, 0x54, 0x1e, 0x91, 0x4d, 0x74, 0xd1, 0xa4,
	0x34, 0x1f, 0x8f, 0x26, 0xb1, 0x13, 0x42, 0xf3, 0xa1, 0xdb, 0xc5, 0x95, 0x11, 0x9a, 0xf3, 0xdf,
	0x8d, 0x15, 0xc6, 0xb2, 0x64, 0xcc, 0x63, 0x01, 0xa3, 0xc9, 0x7f, 0x31, 0x1f, 0x5b, 0x9d, 0x78,
	0x06, 0x89, 0x97, 0x3d, 0xf3, 0xe8, 0x6d, 0xbd, 0xc5, 0xee, 0x68, 0x52, 0x10, 0x78, 0xc1, 0x92,
	0x1c, 0x63, 0x7d, 0x24, 0xc9, 0x0d, 0xf8, 0xcc, 0x0f, 0x22, 0x11, 0x6d, 0x60, 0xb1, 0xbc, 0x33,
	0x93, 0xa4, 0x28, 0x2c, 0x83, 0x28, 0x2e, 0x2f, 0x54, 0xa3, 0x0b, 0x2a, 0xed, 0xcd, 0x44, 0x7c,
	0x0a, 0xed, 0x7d, 0x22, 0x91, 0x81, 0x48, 0xda, 0x6b, 0x16, 0xd5, 0x87, 0xc6, 0xbf, 0xa1, 0xdb,
	0x06, 0x17, 0x9f, 0xe0, 0xe6, 0xc8, 0x91, 0xb9, 0xa9, 0x64, 0x4d, 0xd4, 0x69, 0x09, 0x46, 0x02,
	0x2e, 0x7d, 0x66, 0xa4, 0x71, 0x1c, 0x15, 0x95, 0x53, 0x1e, 0x3f, 0xb6, 0x9d, 0x68, 0xd7, 0x75,
	0xbc, 0x53, 0x91, 0xf3, 0x2c, 0x2e, 0xa9, 0x90, 0x82, 0x30, 0x39, 0xad, 0x40, 0x85, 0xf4, 0x79,
	0x85, 0x8b, 0x65, 0x4f, 0x84, 0x00, 0xa8, 0xdf, 0x08, 0x28, 0x2a, 0x40, 0xf3, 0x82, 0x13, 0x80,
	0x32, 0x9b, 0x75, 0x96, 0xaa, 0xa6, 0xaa, 0xde, 0xdd, 0x2e, 0x0f, 0x55, 0x37, 0xad, 0x24, 0x28,
	0x1c, 0x7d, 0x43, 0xf9, 0xe8, 0x4a, 0x78, 0x88, 0x43, 0x0d, 0x53, 0x89, 0x6c, 0xfb, 0xb9, 0x74,
	0x66, 0x14, 0x72, 0x22, 0x6a, 0xc6, 0x0a, 0x84, 0xb0, 0xb7, 0x9d, 0xda, 0xae, 0x4b, 0xbb, 0xa4,
	0x54, 0x98, 0x78, 0x9d, 0x53, 0x01, 0x11, 0xc7, 0x02, 0x7f, 0x90, 0x93, 0x6d, 0x3a, 0xf6, 0xbc,
	0xf4, 0x85, 0x2a, 0x06, 0xb7, 0xa0, 0x87, 0xb4, 0x42, 0x6d, 0x72, 0x9a, 0x04, 0x94, 0x66, 0x42,
	0x95, 0x20, 0x83, 0xf5, 0x56, 0x13, 0xa0, 0x1c, 0xa4, 0x7b, 0x59, 0xac, 0x9b, 0x04, 0x29, 0x2b,
	0xae, 0x85, 0x98, 0xae, 0x1d, 0x86, 0xa2, 0x38, 0x24, 0x34, 0xad, 0x96, 0xaf, 0xc0, 0x21, 0x76,
	0x9e, 0xb0, 0x9a, 0xfc, 0xaf, 0x90, 0xf0, 0xfa, 0xa2, 0xd2, 0x3d, 0x7e, 0x2f, 0xfa, 0x62, 0xe1,
	0x3a, 0xff, 0x90, 0x33, 0x7b, 0x35, 0x5d, 0x98, 0x6f, 0x37, 0x69, 0xf2, 0x60, 0x49, 0xdb, 0x4f,
	0x94, 0xe4, 0x9f, 0xc6, 0xa8, 0xa7, 0xd3, 0x33, 0xa4, 0xb2, 0xf9, 0xfe, 0xeb, 0xc9, 0xb4, 0x12,
	0xd3, 0x7a, 0x57, 0x1c, 0xb2, 0x59, 0x5f, 0xb0, 0xb2, 0xf8, 0x0b, 0x68, 0xad, 0x7d, 0x35, 0x77,
	0xa2, 0x27, 0x53, 0x3f, 0x00, 0x45, 0xd7, 0xff, 0x1f, 0xe4, 0xfe, 0x2d, 0x02, 0x9c, 0x04, 0x0e,
	0x68, 0xe3, 0x23, 0x48, 0xe0, 0xf5, 0x1c, 0xe8, 0xbc, 0x4e, 0x40, 0x7b, 0xf2, 0xe5, 0x1c, 0xd4,
	0x83, 0xa8, 0xea, 0xf9, 0xc6, 0x2b, 0xec, 0xbe, 0xb1, 0x94, 0xa0, 0x10, 0xcd, 0x3c, 0xe2, 0xf5,
	0x82, 0xf5, 0x23, 0x39, 0x31, 0xf4, 0x03, 0xae, 0x0e, 0xef, 0x6e, 0x8f, 0x90, 0x59, 0xc0, 0xe5,
	0xd4, 0x60, 0xce, 0x40, 0x45, 0xf5, 0x29, 0xae, 0xfa, 0xd6, 0x5f, 0xe7, 0x64, 0x0c, 0x0a, 0x5b,
	0xae, 0x46, 0x01, 0x63, 0x1b, 0x22, 0x03, 0x02, 0xa1, 0xb0, 0x30, 0x76, 0x15, 0x13, 0x24, 0x4b,
	0x09, 0x92, 0xa2, 0xf9, 0x03, 0x7f, 0x0c, 0xd1, 0x17, 0x8f, 0x91, 0x62, 0x18, 0x77, 0x16, 0xd8,
	0xfa, 0x3b, 0xa7, 0x31, 0xb4, 0xaa, 0x8b, 0x99, 0x5e, 0x1d, 0x0f, 0xf3, 0x6a, 0xa5, 0x68, 0xff,
	0xac, 0x87, 0xd2, 0xf1, 0x54, 0xa7, 0x48, 0xa1, 0x01, 0x5b, 0x03, 0xae, 0x2d, 0xac, 0x2b, 0x89,
	0x47, 0x6d, 0x64, 0x3e, 0x7d, 0x5e, 0x2a, 0xb2, 0xb8, 0xcb, 0xea, 0xed, 0xf6, 0x80, 0x7f, 0x35,
	0x74, 0xa2, 0x89, 0x7f, 0xe9, 0xa9, 0xd4, 0x97, 0x3c, 0xf5, 0x05, 0x7f, 0x0c, 0x75, 0x11, 0xd1,
	0xe5, 0x80, 0x16, 0xc3, 0x1a, 0x9d, 0xff, 0xbc, 0x3d, 0x87, 0xbb, 0x93, 0xb8, 0x3b, 0x36, 0xfb,
	0x3b, 0x91, 0x2f, 0xf0, 0xb0, 0xa4, 0xdd, 0xc6, 0xd2, 0x67, 0x90, 0xdb, 0x44, 0x9f, 0x32, 0x4a,
	0xcf, 0xa6, 0x76, 0xca, 0x7c, 0xa2, 0x14, 0x49, 0x52, 0x29, 0x76, 0x8a, 0x69, 0x76, 0x4a, 0x2a,
	0x84, 0xa0, 0x0b, 0x0a, 0xc6, 0x7c, 0x77, 0x7e, 0x2d, 0x03, 0x18, 0x3b, 0x6b, 0x02, 0xa9, 0xf4,
	0x59, 0x51, 0x7d, 0xa0, 0xc9, 0x68, 0x95, 0x18, 0x3d, 0x65, 0xeb, 0xa4, 0x16, 0xd8, 0xad, 0xf2,
	0xf4, 0xb3, 0xab, 0x04, 0xfb, 0x18, 0x89, 0x20, 0x3e, 0x97, 0xf4, 0x5a, 0xf3, 0xc0, 0xc8, 0xd5,
	0xbf, 0x95, 0x43, 0x4a, 0xa0, 0x11, 0x45, 0xe9, 0x45, 0x68, 0xc3, 0x24, 0x5c, 0xca, 0x18, 0x40,
	0xf4, 0x50, 0x62, 0x54, 0x28, 0x91, 0xd0, 0x3e, 0x60, 0x1b, 0xed, 0x76, 0x8f, 0xf3, 0x68, 0x77,
	0x7e, 0xba, 0xaa, 0xe0, 0xd6, 0x80, 0x31, 0x52, 0x16, 0xa5, 0x8b, 0xe7, 0x53, 0x15, 0x02, 0x68,
	0x9c, 0xeb, 0x93, 0x08, 0x1b, 0x90, 0x68, 0x18, 0xa9, 0x45, 0xe0, 0x7c, 0x11, 0x4a, 0x41, 0x07,
	0x75, 0xe3, 0x33, 0x35, 0x6b, 0x8c, 0x14, 0x70, 0x6a, 0x18, 0xcc, 0xdd, 0xe7, 0xe7, 0x5a, 0xd5,
	0xe6, 0x62, 0xba, 0x36, 0x0b, 0x22, 0x47, 0x6c, 0xb3, 0xdd, 0x26, 0x25, 0x8b, 0xaa, 0x73, 0xfa,
	0xdc, 0xc1, 0xd5, 0x0d, 0x11, 0x8d, 0x6e, 0x22, 0x1b, 0x68, 0x26, 0x2a, 0x66, 0x88, 0xf5, 0x71,
	0xf6, 0x6d, 0xcd, 0x2a, 0xa8, 0x61, 0x0d, 0xa2, 0x86, 0x6d, 0xba, 0xc9, 0xfa, 0x02, 0x46, 0x80,
	0x36, 0x54, 0xf3, 0xe8, 0x20, 0x7c, 0x7e, 0x7e, 0xc3, 0xa7, 0x88, 0x21, 0xd6, 0xbd, 0xec, 0x2e,
	0x45, 0x35, 0x7b, 0x8c, 0x6e, 0xd6, 0x0f, 0xfc, 0x99, 0x1f, 0xda, 0x2e, 0x52, 0x81, 0x34, 0x15,
	0x1a, 0x47, 0x06, 0x19, 0x34, 0x30, 0x2f, 0x8e, 0xa0, 0x48, 0xcc, 0xce, 0x7c, 0x4f, 0xcd, 0xe3,
	0xe0, 0xe7, 0x61, 0xcb, 0xf7, 0x22, 0xee, 0x49, 0x42, 0xe0, 0x8a, 0x6b, 0xe4, 0x8a, 0x7d, 0xfb,
	0x1a, 0xd1, 0x26, 0xf0, 0xe8, 0x84, 0x18, 0x3e, 0x1d, 0x5d, 0x45, 0x31, 0xeb, 0x49, 0xcf, 0xc1,
	0xd8, 0xa1, 0x8a, 0xd4, 0xf3, 0xa5, 0x3a, 0xfe, 0x26, 0x8f, 0x48, 0xc1, 0x17, 0x97, 0x23, 0x35,
	0xb0, 0xe4, 0x17, 0xb0, 0xe8, 0xa3, 0x33, 0x41, 0x37, 0x53, 0x23, 0x8d, 0x9f, 0x62, 0x15, 0x2e,
	0x13, 0x73, 0x99, 0x4a, 0xf1, 0xab, 0xba, 0x14, 0x1b, 0xb4, 0x65, 0x19, 0x8e, 0xb3, 0x7a, 0x45,
	0xe5, 0xda, 0x80, 0x4f, 0x6d, 0xc7, 0x1b, 0xd3, 0x2c, 0xa6, 0x0b, 0x49, 0xc0, 0x27, 0xf3, 0x31,
	0x95, 0x51, 0x59, 0x48, 0x52, 0xb9, 0x4e, 0x9c, 0x7a, 0x9d, 0xe8, 0x9a, 0x5e, 0x67, 0xeb, 0x8f,
	0x0e, 0x07, 0xbd, 0x27, 0xbd, 0xc3, 0xd1, 0xa3, 0x6e, 0xef, 0x21, 0x14, 0x75, 0xa8, 0xf2, 0x12,
	0xd2, 0x3a, 0xec, 0xf6, 0xa0, 0xa0, 0xab, 0x25, 0x0f, 0x3b, 0x23, 0x82, 0xe4, 0xb1, 0xee, 0x13,
	0xe4, 0xa8, 0xdf, 0x6e, 0x8e, 0x3a, 0x04, 0xc4, 0xdc, 0xb2, 0x49, 0xc0, 0x4e, 0xaf, 0xb9, 0xbb,
	0xdf, 0x19, 0x7d, 0x3a, 0xaa, 0x17, 0x61, 0x10, 0x10, 0xa5, 0xa6, 0x73, 0x25, 0x3a, 0xc5, 0x47,
	0x9f, 0xb5, 0x57, 0xf2, 0x2e, 0x9c, 0x34, 0x3b, 0x57, 0xb0, 0x5a, 0x4c, 0x9a, 0xd4, 0xcc, 0x59,
	0xbf, 0xab, 0x2a, 0x49, 0x0a, 0x9b, 0x37, 0xc8, 0x9a, 0x62, 0xb4, 0x5d, 0x12, 0xe8, 0x0b, 0x59,
	0xe8, 0x8b, 0xaa, 0x57, 0xc4, 0x44, 0xad, 0xa1, 0x25, 0x15, 0xde, 0xb0, 0x34, 0x99, 0x42, 0xd3,
	0xe7, 0x3a, 0xd6, 0xa7, 0x18, 0xf2, 0xbd, 0xe8, 0xe4, 0xd9, 0x84, 0x04, 0x90, 0x07, 0x6b, 0x09,
	0x59, 0xdc, 0xe8, 0x23, 0x08, 0xd8, 0x90, 0x1d, 0xf1, 0x2f, 0xb3, 0x6d, 0xe1, 0xdc, 0xe0, 0x39,
	0xe0, 0xf2, 0x48, 0x33, 0xcc, 0xbc, 0xa2, 0x0d, 0xb1, 0x1f, 0x85, 0x70, 0xd6, 0x2e, 0x1e, 0x0e,
	0xf8, 0xf8, 0x42, 0xb6, 0x2f, 0xa2, 0x27, 0x30, 0x2e, 0xcb, 0x90, 0x74, 0xb7, 0x2f, 0xb7, 0xd0,
	0xf5, 0xac, 0x04, 0xc9, 0x4d, 0x65, 0x4a, 0xc8, 0xff, 0x91, 0x47, 0xea, 0xe8, 0x89, 0xb7, 0x51,
	0x57, 0x26, 0xd0, 0xa9, 0x59, 0xb1, 0x53, 0x48, 0xb3, 0x23, 0x42, 0x01, 0x75, 0x6d, 0x20, 0x95,
	0xba, 0x7e, 0x3f, 0x1d, 0x10, 0xdf, 0x4c, 0x05, 0x84, 0xc1, 0x86, 0xea, 0x4e, 0xff, 0x2e, 0xa7,
	0x5d, 0x79, 0x93, 0xb1, 0x7e, 0xcb, 0x70, 0x64, 0xf1, 0xf9, 0xa8, 0xf7, 0x51, 0xef, 0xf0, 0xb1,
	0xf4, 0x63, 0xf8, 0xdc, 0x3a, 0xec, 0xf5, 0x3a, 0xad, 0x51, 0x7b, 0x17, 0xfc, 0xb8, 0xc6, 0x4a,
	0x00, 0x81, 0x3f, 0x51, 0x23, 0x1b, 0xf0, 0xe7, 0xb0, 0xd3, 0x6b, 0x77, 0x06, 0xdd, 0xde, 0xde,
	0x61, 0xbd, 0x98, 0x00, 0x91, 0x8f, 0x63, 0x44, 0xd7, 0x04, 0x8a, 0xbd, 0xee, 0xc3, 0x7a, 0x19,
	0x9a, 0xbe, 0x2a, 0x7e, 0xdc, 0x3f, 0x1c, 0x76, 0xea, 0x15, 0xf9, 0x65, 0xf3, 0xe0, 0xf0, 0xa8,
	0x37, 0xaa, 0x57, 0x25, 0xb9, 0x51, 0xf7, 0xa0, 0x33, 0x3c, 0x1a, 0x76, 0x06, 0xf5, 0x1a, 0x46,
	0x96, 0x82, 0xb4, 0x9b, 0x9f, 0xd5, 0x99, 0x04, 0x0c, 0x8f, 0x76, 0x47, 0x83, 0x66, 0x6b, 0x54,
	0x5f, 0x03, 0xdf, 0x2a, 0x23, 0x8a, 0x76, 0xbb, 0xbe, 0x0e, 0x4e, 0x75, 0x47, 0x9a, 0xde, 0xb9,
	0xb0, 0x23, 0xbe, 0x34, 0x39, 0xdf, 0x6e, 0xfc, 0x54, 0x6a, 0x86, 0x11, 0xe6, 0x8e, 0xd4, 0xe7,
	0x0b, 0xc6, 0xbc, 0x90, 0xf4, 0xbf, 0x60, 0xf7, 0x48, 0x86, 0x26, 0xa4, 0xc5, 0xc3, 0xe0, 0x88,
	0x4e, 0xb1, 0x70, 0xf9, 0x22, 0x2d, 0xca, 0xeb, 0x50, 0xe0, 0x23, 0x4d, 0x0c, 0x23, 0x06, 0xd7,
	0xd2, 0xa5, 0xb8, 0x2e, 0xf1, 0x1e, 0xa2, 0xda, 0x73, 0xed, 0x53, 0x99, 0xa9, 0xbf, 0x42, 0x0a,
	0x20, 0xcb, 0x7f, 0x19, 0x05, 0xd3, 0xbd, 0x85, 0x50, 0x23, 0xac, 0x95, 0x20, 0x14, 0xce, 0x3b,
	0xab, 0x92, 0xc1, 0xb5, 0x1c, 0x72, 0xb3, 0x41, 0xa6, 0x05, 0x55, 0x9c, 0xe3, 0xf9, 0x96, 0x88,
	0xf4, 0x01, 0x62, 0x05, 0x41, 0xbe, 0x06, 0x56, 0x83, 0x53, 0xa1, 0x9c, 0x23, 0xac, 0x62, 0xea,
	0xc8, 0x3c, 0xcc, 0xaa, 0x62, 0x09, 0x46, 0xf2, 0x14, 0x85, 0x6b, 0xac, 0xe0, 0x75, 0x67, 0xb2,
	0x84, 0x65, 0xbd, 0xec, 0x80, 0x52, 0xce, 0x04, 0xda, 0x7d, 0x27, 0xcc, 0x50, 0xf4, 0x5b, 0x62,
	0xe6, 0x74, 0xe1, 0x4b, 0x40, 0x89, 0x47, 0x57, 0x77, 0x8d, 0x38, 0x8e, 0xd9, 0x31, 0x65, 0x12,
	0x77, 0x02, 0x36, 0xe6, 0xd1, 0x03, 0x7f, 0xe2, 0x9c, 0x5c, 0xd3, 0x53, 0x97, 0x0c, 0x9f, 0xa4,
	0x9e, 0x80, 0xaa, 0x6c, 0x9c, 0x48, 0x29, 0x73, 0x3f, 0xfc, 0xfc, 0x49, 0xf2, 0xd0, 0x44, 0x43,
	0xcd, 0x93, 0x13, 0xeb, 0xe7, 0xb0, 0x86, 0x1c, 0x91, 0x8d, 0xd1, 0xf4, 0xd9, 0x12, 0x20, 0x91,
	0xa7, 0x46, 0xb6, 0x2e, 0x00, 0x6f, 0x7b, 0xd8, 0xbf, 0xe0, 0xf1, 0x5d, 0xdf, 0x19, 0x47, 0xc1,
	0x9c, 0x67, 0xda, 0x48, 0x34, 0x00, 0x5d, 0xe3, 0xd4, 0xc3, 0xc0, 0x23, 0x64, 0xfc, 0x92, 0x6d,
	0x81, 0x9d, 0x27, 0x74, 0x4a, 0x33, 0xf2, 0xb3, 0xe9, 0x2f, 0x29, 0x16, 0xda, 0x50, 0x05, 0xd3,
	0x50, 0x37, 0xcc, 0x5e, 0xdf, 0x63, 0x77, 0xdb, 0x6d, 0x31, 0x66, 0xe3, 0x37, 0x7b, 0x81, 0x3f,
	0x5d, 0x95, 0xa0, 0x75, 0xc0, 0x5e, 0x6d, 0xb7, 0x77, 0x03, 0xdf, 0x9e, 0xb4, 0xec, 0x50, 0x9e,
	0xe1, 0x3d, 0x74, 0x4e, 0x22, 0x71, 0xe0, 0xae, 0x6e, 0xd2, 0x92, 0x77, 0x3e, 0xa7, 0xf0, 0xbd,
	0xe4, 0x17, 0x5b, 0xef, 0x63, 0x7d, 0x75, 0x8a, 0x27, 0x90, 0xd8, 0x7a, 0x3b, 0x17, 0x1c, 0x71,
	0xa0, 0x6d, 0xc6, 0xf3, 0x30, 0xf2, 0xa7, 0x09, 0x67, 0x84, 0x3d, 0x88, 0xa1, 0x3b, 0x89, 0x65,
	0x86, 0x21, 0x9f, 0xe3, 0x75, 0x6d, 0x48, 0x73, 0xfe, 0xba, 0xd5, 0x52, 0x68, 0xba, 0x11, 0x9f,
	0x2e, 0x41, 0x03, 0x8c, 0x38, 0xf0, 0x6d, 0x36, 0x12, 0xe4, 0xe5, 0x53, 0x34, 0x81, 0x16, 0x6d,
	0xcf, 0x1e, 0xf3, 0x0c, 0x71, 0x00, 0x72, 0x02, 0xdf, 0xe8, 0x41, 0x7a, 0x03, 0x55, 0x8c, 0x10,
	0xd5, 0x7d, 0xea, 0xfb, 0xa1, 0x50, 0x9d, 0xf4, 0x6e, 0x80, 0x03, 0x8b, 0xb1, 0x88, 0x8e, 0xce,
	0x33, 0x90, 0x1a, 0xe7, 0x0e, 0xf9, 0xf4, 0xb9, 0xc3, 0x92, 0x53, 0xa1, 0x29, 0xf4, 0xbe, 0xd7,
	0xf1, 0x6d, 0x93, 0xf5, 0x27, 0x39, 0x39, 0x26, 0x09, 0x1a, 0xe9, 0x43, 0x5c, 0x28, 0xf4, 0xf0,
	0x59, 0x4f, 0x49, 0x26, 0x0b, 0x85, 0x34, 0x0b, 0xc5, 0x34, 0x0b, 0xf1, 0x7d, 0xd6, 0x08, 0x33,
	0x4b, 0x14, 0xdf, 0x67, 0xc5, 0x8c, 0x55, 0xf4, 0xe8, 0xdf, 0x32, 0x3a, 0x4f, 0x71, 0x5f, 0x80,
	0x7c, 0x50, 0xac, 0x51, 0xeb, 0x69, 0xfd, 0x46, 0x0e, 0xfd, 0x4f, 0x2b, 0x9a, 0x5c, 0x8e, 0x0e,
	0x26, 0x17, 0x15, 0x83, 0x82, 0xe2, 0xd7, 0x86, 0xc7, 0x63, 0xcb, 0x62, 0x1c, 0x4e, 0x0a, 0x0a,
	0xfa, 0xea, 0xad, 0x98, 0x79, 0xf5, 0x56, 0xca, 0xb8, 0x28, 0x13, 0xd7, 0x4c, 0xff, 0x98, 0x63,
	0x9b, 0x83, 0xce, 0xc7, 0xc3, 0x47, 0x9d, 0xde, 0x87, 0xd0, 0x1e, 0x0c, 0xf8, 0xe9, 0xc2, 0x31,
	0x79, 0x0d, 0x23, 0xaa, 0x7f, 0x29, 0x4c, 0x53, 0xc3, 0xaf, 0x3f, 0xe1, 0x01, 0xa4, 0xa2, 0xee,
	0x24, 0x9e, 0x9b, 0x04, 0x64, 0x18, 0x89, 0x46, 0x86, 0x16, 0x0d, 0xf9, 0x78, 0x1e, 0x70, 0x79,
	0x0a, 0x51, 0x43, 0xe2, 0x2d, 0x70, 0x48, 0x8c, 0x35, 0x80, 0x95, 0xd5, 0x46, 0x6c, 0x0d, 0x3d,
	0xee, 0x02, 0xa8, 0x42, 0xcb, 0x40, 0x81, 0x74, 0xd9, 0x35, 0x91, 0x0a, 0xc4, 0xe3, 0x7f, 0xff,
	0x9c, 0x8b, 0xae, 0xbd, 0x86, 0xd2, 0x2a, 0xde, 0x9a, 0x33, 0x57, 0x74, 0xed, 0x8d, 0x7b, 0x20,
	0x97, 0xef, 0x4f, 0x9b, 0x13, 0x7b, 0x16, 0x89, 0x0b, 0xc0, 0xd2, 0xf7, 0x72, 0xef, 0x01, 0xaa,
	0xc2, 0x90, 0x5f, 0x89, 0xdb, 0x22, 0xf8, 0x6c, 0xfd, 0x2d, 0x88, 0xda, 0x6c, 0x7d, 0x64, 0x8a,
	0x0a, 0x0c, 0x90, 0xc7, 0x18, 0x8e, 0x02, 0x9c, 0x77, 0x82, 0xc0, 0x0f, 0x50, 0x16, 0x21, 0x30,
	0x1e, 0x68, 0xf1, 0x20, 0x8a, 0x87, 0xa2, 0x81, 0xb2, 0x91, 0x90, 0xf5, 0x5b, 0x08, 0x11, 0x19,
	0x44, 0x3e, 0x49, 0xbb, 0x63, 0xe4, 0x75, 0xfc, 0x4a, 0x9d, 0xd6, 0xd2, 0xfd, 0x42, 0x77, 0x22,
	0xa5, 0x7f, 0x9b, 0x6d, 0x08, 0xd3, 0xab, 0xcd, 0x95, 0xe5, 0x9b, 0x51, 0x7b, 0xc0, 0x43, 0xcf,
	0x47, 0xda, 0xf2, 0x60, 0xe6, 0xf7, 0xf3, 0x6c, 0xcb, 0x30, 0x1d, 0xbe, 0x7e, 0xcc, 0xb0, 0x1d,
	0xbe, 0x94, 0x50, 0x37, 0x48, 0x79, 0xd3, 0x9a, 0x05, 0xf5, 0x01, 0x95, 0xa4, 0x4f, 0xb5, 0xff,
	0xfb, 0xac, 0x66, 0xfa, 0xd1, 0x9a, 0x0a, 0x1e, 0x11, 0x5f, 0x64, 0xb3, 0x5a, 0xca, 0xae, 0x1b,
	0xca, 0xae, 0x77, 0x59, 0x8d, 0x14, 0x49, 0xfe, 0xbe, 0xa9, 0xa0, 0xa0, 0xde, 0x87, 0x81, 0x3f,
	0x9f, 0x01, 0x4f, 0x5b, 0x94, 0x10, 0xfe, 0x12, 0xd4, 0x63, 0x98, 0x9b, 0xd4, 0x93, 0x61, 0x6f,
	0x65, 0x5d, 0x3d, 0xac, 0x26, 0xea, 0x52, 0x2d, 0xc3, 0xde, 0xe6, 0x3b, 0x4f, 0xad, 0xa5, 0xcf,
	0xe6, 0xb6, 0xb7, 0x6b, 0xfb, 0x2d, 0x9d, 0x17, 0x80, 0x1f, 0x6c, 0xc8, 0x11, 0x20, 0x0e, 0xd7,
	0x4c, 0x37, 0xa9, 0xae, 0xe4, 0x26, 0xb5, 0x6c, 0x37, 0x61, 0xab, 0xba, 0x89, 0xb8, 0x0a, 0xff,
	0x2e, 0xdb, 0xd6, 0x2e, 0x8f, 0xeb, 0xa0, 0x04, 0x84, 0xa0, 0x60, 0xc4, 0xf1, 0xb2, 0xc6, 0x91,
	0x58, 0x81, 0xb7, 0x67, 0xff, 0x0e, 0x39, 0xca, 0x70, 0x2e, 0x28, 0xf0, 0x41, 0x84, 0xa8, 0xff,
	0x2f, 0x78, 0x18, 0xde, 0xb7, 0xdc, 0x35, 0x5c, 0x27, 0x16, 0x3e, 0xc3, 0x7f, 0x00, 0xa4, 0xbf,
	0x5f, 0xea, 0x44, 0xa6, 0xed, 0x8b, 0xcb, 0xcd, 0xb7, 0x60, 0xea, 0xe5, 0xe9, 0xc4, 0xfa, 0xd7,
	0x1c, 0xdb, 0x36, 0x0c, 0x74, 0x38, 0xe3, 0xe0, 0x32, 0x19, 0x4f, 0x4e, 0x12, 0xb9, 0xdb, 0xbc,
	0x51, 0x4c, 0x26, 0xe9, 0x62, 0x86, 0x31, 0x4a, 0x8b, 0xc6, 0x28, 0xa7, 0x8c, 0x51, 0x51, 0x56,
	0xd5, 0x8a, 0xae, 0xa6, 0x14, 0x2d, 0xec, 0xa3, 0xcd, 0xc5, 0x14, 0xe5, 0xd1, 0x99, 0x13, 0x4c,
	0xce, 0xf9, 0x35, 0x59, 0x26, 0x6d, 0x09, 0x95, 0xb3, 0x91, 0x21, 0x5a, 0xd8, 0x9c, 0xcd, 0x00,
	0x37, 0x1a, 0xa8, 0x66, 0xfd, 0x3a, 0x8c, 0xdf, 0x86, 0x75, 0xa4, 0xe4, 0xcf, 0x1c, 0xda, 0x8b,
	0xa9, 0x7c, 0x3d, 0x15, 0xc8, 0xa5, 0x74, 0x20, 0x97, 0x17, 0x02, 0xb9, 0xf2, 0x0c, 0xc6, 0x7c,
	0x96, 0xa0, 0x4f, 0x06, 0x32, 0x53, 0x6d, 0x60, 0x73, 0x7c, 0x76, 0x41, 0xce, 0x5c, 0x80, 0x04,
	0xf7, 0xdb, 0x39, 0xb6, 0x86, 0x1e, 0xe0, 0x78, 0x36, 0x3d, 0x6a, 0x37, 0x95, 0x2a, 0x22, 0x13,
	0x26, 0x0e, 0x44, 0xbf, 0x9f, 0x35, 0x71, 0xe0, 0xb6, 0xe6, 0xcc, 0x51, 0x4f, 0x30, 0x5e, 0x88,
	0x23, 0xc0, 0x30, 0xb0, 0x86, 0x96, 0x51, 0x1c, 0x65, 0xd8, 0xe4, 0x4d, 0x56, 0x19, 0xf0, 0xc8,
	0xe0, 0xe8, 0x4e, 0x9a, 0x23, 0xf8, 0xda, 0xfa, 0xf3, 0x1c, 0xe8, 0xb8, 0xf3, 0xf1, 0x63, 0xee,
	0xec, 0xfa, 0xff, 0x43, 0x3e, 0xad, 0x3d, 0xb6, 0xaa, 0x1c, 0xf8, 0xf2, 0xf8, 0x20, 0x3c, 0x25,
	0xfb, 0xac, 0x8b, 0x8f, 0x30, 0xf1, 0xc8, 0x73, 0xc3, 0x6f, 0xb0, 0x2a, 0xc8, 0x2d, 0xd8, 0x5d,
	0x14, 0x1a, 0x9a, 0x7c, 0xb3, 0x50, 0x77, 0xae, 0x9c, 0xc8, 0xb4, 0x78, 0xdc, 0x77, 0xc0, 0x17,
	0xc9, 0x0b, 0x2a, 0x84, 0x20, 0x51, 0x92, 0xcd, 0xfa, 0xfb, 0x1c, 0xbb, 0x6f, 0xe0, 0x41, 0x76,
	0x21, 0xec, 0x42, 0xc7, 0xf7, 0x48, 0xc8, 0x79, 0x20, 0x3f, 0xc5, 0x37, 0x03, 0x52, 0x22, 0x3d,
	0x75, 0x19, 0x8a, 0x28, 0xa8, 0x46, 0x11, 0x38, 0xf5, 0xdd, 0x39, 0xbe, 0x47, 0xd1, 0x2a, 0x4b,
	0xa8, 0x47, 0xa7, 0xe9, 0x7d, 0xdb, 0x3b, 0x9d, 0xdb, 0xa7, 0x5c, 0xab, 0x0c, 0x36, 0xd3, 0xfd,
	0x9c, 0x22, 0x5b, 0xd1, 0x64, 0x5c, 0x07, 0x26, 0x01, 0x12, 0xa5, 0xaa, 0x76, 0x0f, 0xc7, 0x01,
	0xe7, 0xde, 0xd0, 0x79, 0xca, 0x65, 0x4a, 0x48, 0x46, 0x3c, 0x53, 0xb9, 0xf7, 0xc7, 0x05, 0x76,
	0xdf, 0x88, 0x6e, 0x53, 0xc8, 0x0c, 0x77, 0x02, 0xc4, 0x38, 0x82, 0xc9, 0x77, 0x40, 0x79, 0x55,
	0x0b, 0xda, 0xfe, 0xa5, 0xe7, 0x42, 0x7b, 0x7d, 0x14, 0xb8, 0xd2, 0x2f, 0x80, 0x57, 0x7a, 0x16,
	0xc5, 0x03, 0x18, 0x78, 0xe4, 0x74, 0x58, 0xc3, 0xfb, 0xc8, 0x18, 0xda, 0xc7, 0x97, 0x17, 0x25,
	0x13, 0x8e, 0x6d, 0xb6, 0x44, 0x5d, 0x56, 0xa8, 0x15, 0xbc, 0xcd, 0x4f, 0x64, 0x69, 0x02, 0x1e,
	0xba, 0x27, 0x74, 0x06, 0x07, 0x58, 0xa4, 0xc0, 0xb0, 0x50, 0x41, 0x94, 0xd3, 0xd4, 0x1a, 0x1f,
	0xc8, 0x8c, 0xa0, 0x63, 0x52, 0x54, 0xf2, 0xd7, 0x8c, 0x8c, 0xa0, 0xc4, 0xd6, 0xeb, 0xf0, 0xc9,
	0x90, 0x92, 0x06, 0xcf, 0xf3, 0x50, 0xcf, 0x6b, 0x29, 0xf3, 0xae, 0x2b, 0x07, 0xc2, 0x7b, 0xd0,
	0x21, 0x4a, 0xb1, 0x91, 0xdd, 0x39, 0x6c, 0x2e, 0xcf, 0x40, 0xdf, 0x61, 0x95, 0x0f, 0xc3, 0x90,
	0x56, 0x6d, 0xd1, 0xaa, 0x9d, 0x85, 0xde, 0xe0, 0xc3, 0xe1, 0x50, 0x65, 0x8b, 0xee, 0xc9, 0x90,
	0xdb, 0xc1, 0xf8, 0x6c, 0xa7, 0x4e, 0x82, 0xbd, 0xc3, 0xd6, 0x77, 0xe7, 0x2e, 0x8c, 0xd3, 0x8e,
	0x47, 0x18, 0xb6, 0x09, 0xc3, 0x4b, 0x06, 0x1d, 0xf5, 0x35, 0x95, 0xae, 0x27, 0x89, 0xd6, 0xa2,
	0xc7, 0x2f, 0x45, 0xf1, 0x48, 0xc4, 0x6e, 0x2e, 0x23, 0x76, 0xf3, 0x8b, 0xb1, 0x5b, 0x48, 0xc5,
	0xae, 0x38, 0xdf, 0xf9, 0x51, 0xa2, 0x7c, 0xc7, 0x04, 0x56, 0x6a, 0xf7, 0x01, 0x99, 0x58, 0x1e,
	0x57, 0x09, 0x5d, 0xdc, 0x8a, 0xf2, 0x66, 0xb0, 0x61, 0xf0, 0xbf, 0xe7, 0x78, 0x13, 0xc8, 0x46,
	0x98, 0x12, 0x3a, 0x53, 0xdb, 0x71, 0x25, 0xeb, 0x80, 0x06, 0x08, 0xeb, 0x34, 0x65, 0x7d, 0x9b,
	0x35, 0x0c, 0x9e, 0xd4, 0xa6, 0x8c, 0x64, 0xf1, 0x26, 0xab, 0x1b, 0x0b, 0x1f, 0x81, 0x9e, 0x23,
	0xa1, 0x99, 0xe0, 0x82, 0x9e, 0x60, 0x10, 0x7a, 0xeb, 0x87, 0x6c, 0xcd, 0xcc, 0xe0, 0xf8, 0xf0,
	0x65, 0xe6, 0x50, 0xc4, 0xe5, 0xe2, 0x47, 0x1b, 0xd1, 0x27, 0xfa, 0xd7, 0x38, 0xc4, 0xd0, 0x91,
	0xf8, 0xdd, 0x91, 0xc8, 0x26, 0xbb, 0x10, 0x93, 0x3a, 0xe3, 0x8a, 0x37, 0x2e, 0x51, 0xfa, 0xc6,
	0x40, 0xe1, 0xcc, 0x2f, 0xe0, 0x14, 0x38, 0xfe, 0x99, 0x86, 0x6e, 0xed, 0x44, 0x78, 0x37, 0x89,
	0x7f, 0x4f, 0xe2, 0xce, 0x10, 0x3f, 0xd3, 0xb4, 0xaa, 0x99, 0xa0, 0x15, 0x33, 0xb3, 0xbb, 0xf6,
	0xa7, 0x14, 0x7a, 0x3a, 0x5d, 0x23, 0x44, 0xbe, 0x5f, 0x2c, 0xa9, 0x68, 0x42, 0xd8, 0x81, 0xe3,
	0x3d, 0xc4, 0xd7, 0x7c, 0xe5, 0x04, 0xd0, 0xbe, 0x22, 0x60, 0x25, 0xb5, 0x12, 0xd3, 0x82, 0x0c,
	0x46, 0x49, 0x44, 0x3f, 0x21, 0x15, 0xf9, 0x88, 0x62, 0x9e, 0x60, 0x4c, 0xa7, 0x0d, 0x1e, 0x8e,
	0x03, 0x67, 0x16, 0xa9, 0x20, 0xd3, 0x5b, 0xa9, 0xf6, 0x50, 0xcb, 0x68, 0xfd, 0x55, 0x1e, 0x4f,
	0x89, 0x17, 0xe3, 0x34, 0x75, 0x76, 0x44, 0x7e, 0x7a, 0x90, 0x18, 0xdd, 0x29, 0xaf, 0x36, 0xf5,
	0xfc, 0xad, 0x15, 0x40, 0xa0, 0xe1, 0x7c, 0x1a, 0x9f, 0x6d, 0xd0, 0xbe, 0x11, 0x0f, 0xa6, 0x71,
	0xf2, 0x7d, 0x34, 0x9f, 0xda, 0x10, 0x5c, 0x53, 0x27, 0x8a, 0xaf, 0xf0, 0x69, 0x19, 0x7d, 0x81,
	0xbb, 0x2b, 0xc9, 0xdd, 0x2a, 0xf9, 0xc6, 0x2b, 0xbb, 0xf8, 0xeb, 0xb2, 0x0b, 0xdb, 0x8d, 0x5b,
	0x0c, 0x02, 0xf7, 0x03, 0xcc, 0xc9, 0x4c, 0x65, 0x49, 0x09, 0xf3, 0xc7, 0x3c, 0x0c, 0xa5, 0x12,
	0x14, 0xce, 0xb6, 0x2d, 0x5b, 0x33, 0x62, 0x9b, 0x40, 0x7b, 0x5c, 0xb4, 0xcd, 0xf1, 0xa2, 0x66,
	0xc0, 0x6d, 0x31, 0x95, 0xa5, 0x35, 0xba, 0x45, 0xfa, 0xfb, 0xb7, 0x1c, 0xab, 0xa7, 0xa7, 0x0d,
	0x1d, 0xc0, 0xed, 0xd8, 0xf5, 0xd4, 0x30, 0xa7, 0x9f, 0x9d, 0xd0, 0x62, 0xe3, 0x52, 0x1b, 0x0c,
	0x9f, 0x78, 0x92, 0xa5, 0x96, 0xf4, 0xa5, 0xd2, 0x4c, 0xd7, 0x32, 0x46, 0x32, 0x50, 0xc2, 0x95,
	0x18, 0xc9, 0x08, 0x0b, 0x54, 0x4d, 0x89, 0x45, 0xff, 0xc6, 0x4b, 0xb9, 0x9f, 0x7a, 0x6f, 0xbc,
	0x8d, 0x37, 0xce, 0xfb, 0xfe, 0xf8, 0x5c, 0x17, 0xa9, 0xec, 0x99, 0x6a, 0xed, 0xb6, 0x99, 0xaa,
	0xc5, 0xb6, 0xd2, 0xb9, 0x34, 0x66, 0x3a, 0xb7, 0xc0, 0x74, 0x1c, 0x31, 0x7c, 0x6a, 0x07, 0xe7,
	0x32, 0xe4, 0xde, 0xc3, 0xb3, 0x60, 0x33, 0x9d, 0x62, 0xe2, 0x19, 0x39, 0x91, 0x6b, 0x9c, 0xa5,
	0xa9, 0xa3, 0x38, 0x71, 0x62, 0xf9, 0x9b, 0x05, 0x28, 0xf2, 0x9d, 0x8f, 0x3f, 0x9e, 0x43, 0x43,
	0x9e, 0x79, 0x48, 0xb0, 0xbe, 0x70, 0xc0, 0xa3, 0xd3, 0x70, 0x21, 0x23, 0x0d, 0x17, 0x17, 0xd3,
	0x70, 0x29, 0x95, 0x86, 0xcb, 0xc9, 0x16, 0xaa, 0x92, 0x51, 0xf0, 0xab, 0x99, 0xe3, 0x7c, 0xcd,
	0x68, 0xfc, 0x8d, 0x86, 0x86, 0xa9, 0x66, 0x25, 0xd1, 0x6f, 0xac, 0x65, 0xb6, 0x30, 0xeb, 0x19,
	0xfd, 0xca, 0x46, 0x46, 0x17, 0xb2, 0x49, 0xb0, 0x1d, 0x56, 0xa7, 0xa6, 0xb9, 0xed, 0x9c, 0x3a,
	0x91, 0xed, 0x92, 0x4e, 0xb6, 0x16, 0x66, 0x94, 0xba, 0xda, 0x6f, 0x0c, 0x23, 0xdb, 0x4a, 0x66,
	0xf9, 0x6b, 0xce, 0x06, 0x1d, 0x86, 0xbe, 0xce, 0xf2, 0x97, 0x57, 0xf4, 0x58, 0x78, 0xc9, 0x13,
	0xda, 0xbf, 0x28, 0xb1, 0x75, 0xc8, 0xef, 0xb1, 0x35, 0x32, 0x8a, 0x52, 0x9c, 0xaa, 0xc5, 0x09,
	0xeb, 0x2a, 0xa7, 0x12, 0x2f, 0x72, 0x74, 0xf9, 0x20, 0x7b, 0x74, 0xb9, 0xb9, 0x51, 0xc1, 0x9f,
	0x69, 0xe1, 0xb4, 0x55, 0x53, 0x93, 0x94, 0x18, 0x60, 0x08, 0xc6, 0x34, 0x2c, 0xb6, 0xe9, 0x5a,
	0x46, 0x03, 0xb7, 0x9e, 0xd5, 0xc0, 0x6d, 0x64, 0x74, 0x59, 0x9b, 0x59, 0x5d, 0x56, 0x3d, 0xe5,
	0x85, 0xdb, 0x44, 0xc1, 0xe8, 0x6c, 0x1a, 0xcf, 0xd0, 0xd9, 0xdc, 0xc9, 0xec, 0x6c, 0xee, 0xde,
	0xd8, 0xd9, 0x20, 0x43, 0x52, 0x3c, 0xfa, 0xa9, 0xc6, 0x3d, 0xc2, 0xf1, 0x1d, 0x99, 0x54, 0x87,
	0x17, 0x74, 0x31, 0xb4, 0x73, 0x7f, 0xb9, 0xe2, 0xe5, 0x59, 0xc9, 0x4b, 0xea, 0x59, 0x36, 0xa5,
	0x22, 0xb9, 0x6d, 0x67, 0xf9, 0x36, 0x08, 0xa1, 0xf6, 0xe4, 0x29, 0x3e, 0x2a, 0xbf, 0xc0, 0x67,
	0xe2, 0xfa, 0xfc, 0xb3, 0x0c, 0x5a, 0x41, 0x0d, 0xbe, 0x22, 0x93, 0x7b, 0x8d, 0x5a, 0x9d, 0x96,
	0x3f, 0xe1, 0xe2, 0xb9, 0x38, 0xae, 0x32, 0x4f, 0x6f, 0x5e, 0x53, 0x9a, 0x0e, 0xb8, 0x0b, 0xbd,
	0x26, 0x1f, 0xd9, 0xa7, 0xf4, 0x64, 0xbc, 0x64, 0xd5, 0x58, 0xa5, 0x07, 0x82, 0x02, 0x3e, 0xeb,
	0x98, 0xd5, 0x1f, 0xaa, 0x87, 0x9e, 0xf2, 0xbe, 0x66, 0xb5, 0x5f, 0x90, 0x68, 0x32, 0x05, 0x35,
	0xb7, 0x19, 0x37, 0xef, 0xea, 0xbe, 0x40, 0x1c, 0xe6, 0x7f, 0x53, 0xf4, 0xd9, 0x4f, 0x7a, 0x7e,
	0xe4, 0x8c, 0x39, 0xbd, 0x2d, 0xa0, 0xbf, 0xe2, 0x06, 0xc7, 0xfa, 0xb5, 0x9c, 0xe8, 0xd1, 0xf1,
	0xed, 0xf6, 0xf2, 0x65, 0x74, 0x3c, 0x2e, 0x60, 0x94, 0x22, 0xf3, 0x32, 0x13, 0x6d, 0x08, 0xa0,
	0x79, 0x67, 0x51, 0x8b, 0xf7, 0x1f, 0xf0, 0xa9, 0x2f, 0xc3, 0x0a, 0x5f, 0x67, 0xab, 0x0b, 0x00,
	0x50, 0xe8, 0x89, 0xe3, 0xf2, 0x49, 0x48, 0xbf, 0x42, 0xaa, 0x59, 0xbf, 0xca, 0xb6, 0x88, 0x03,
	0x71, 0x59, 0x07, 0xa5, 0xee, 0xdc, 0x48, 0x07, 0x39, 0x15, 0xb9, 0x33, 0x3b, 0x0c, 0x2f, 0xf1,
	0xac, 0x30, 0xaf, 0x88, 0x84, 0x19, 0x2f, 0x7e, 0x8f, 0x93, 0x4f, 0x71, 0x01, 0xe2, 0xe0, 0x8f,
	0xa6, 0xe3, 0x47, 0x00, 0x90, 0x26, 0x04, 0x44, 0x5f, 0x3d, 0xc0, 0xb4, 0xdd, 0x50, 0x1a, 0x48,
	0xb2, 0x10, 0xa4, 0x92, 0xc9, 0x04, 0xe0, 0x5d, 0xc3, 0x12, 0x9a, 0x25, 0x51, 0x52, 0x7e, 0x82,
	0x6d, 0x13, 0x9e, 0xb6, 0x13, 0x42, 0x1e, 0xbd, 0xc8, 0x94, 0xc4, 0xfa, 0x94, 0xdd, 0x55, 0xc4,
	0x6e, 0x5a, 0x97, 0xfe, 0x29, 0xbd, 0x41, 0xbe, 0x60, 0x92, 0xa7, 0xd3, 0x53, 0x52, 0xb1, 0xf5,
	0x86, 0x34, 0x24, 0xbd, 0x6f, 0xcb, 0xa4, 0xad, 0x18, 0x84, 0xbc, 0x99, 0x58, 0x94, 0xf8, 0x95,
	0xff, 0x6b, 0xe2, 0x87, 0x2f, 0x4f, 0x60, 0x4a, 0x9a, 0x5c, 0x2f, 0xa0, 0x78, 0x9d, 0x6d, 0x28,
	0xf6, 0xf5, 0x82, 0xcc, 0xed, 0xbb, 0x5c, 0xfe, 0x06, 0x20, 0xb1, 0xfd, 0x1d, 0x69, 0x6a, 0x9a,
	0xfe, 0xf8, 0x18, 0x98, 0x97, 0x9e, 0xa1, 0x75, 0x3c, 0x37, 0x12, 0xb6, 0xf5, 0x21, 0xbb, 0x23,
	0x91, 0xd9, 0xf4, 0x96, 0x4f, 0x6e, 0x89, 0xf3, 0xba, 0xf6, 0x8e, 0xd4, 0xc9, 0x29, 0x58, 0xf9,
	0xb1, 0xe3, 0x35, 0xa7, 0xc6, 0xf3, 0x9e, 0xaf, 0x0c, 0x5c, 0xcb, 0xc9, 0x27, 0x4c, 0x8c, 0x2f,
	0x3e, 0x51, 0x8c, 0x91, 0xa3, 0xa3, 0xed, 0x27, 0x59, 0x09, 0x39, 0x0c, 0xe5, 0xf1, 0x63, 0x9c,
	0xca, 0x33, 0xf8, 0xb4, 0xc6, 0xb1, 0x63, 0x19, 0x14, 0x6f, 0xb3, 0xf4, 0x3b, 0xac, 0x12, 0xd0,
	0xca, 0x50, 0xfe, 0x32, 0x23, 0x83, 0x48, 0x8c, 0xce, 0xfa, 0x01, 0x63, 0x71, 0x59, 0x44, 0x64,
	0x3e, 0x1d, 0xe4, 0xc5, 0x8d, 0x90, 0x97, 0x54, 0x0d, 0xa4, 0x94, 0x33, 0x6e, 0x8c, 0xf4, 0xd6,
	0x89, 0x18, 0xe9, 0x9f, 0x1c, 0x40, 0xa7, 0x6a, 0xcb, 0xd7, 0xf6, 0xe1, 0xa9, 0x11, 0xfb, 0x42,
	0x45, 0x82, 0x39, 0xc8, 0xac, 0x53, 0x75, 0x90, 0x62, 0x48, 0x52, 0x54, 0x92, 0x48, 0xfd, 0x95,
	0x12, 0x6f, 0xc5, 0x45, 0x98, 0x7d, 0x6e, 0x24, 0xbc, 0xaf, 0x4f, 0x2b, 0x99, 0xe8, 0xfa, 0xd2,
	0xaf, 0x3a, 0xde, 0x64, 0xdf, 0xc7, 0xff, 0x90, 0xe2, 0x5a, 0xbf, 0x9f, 0xce, 0xa9, 0xdf, 0xea,
	0x40, 0x6a, 0x00, 0x9f, 0x20, 0xdc, 0x55, 0xec, 0xa9, 0xa0, 0x34, 0xca, 0x97, 0x01, 0xd5, 0xc4,
	0x0f, 0x37, 0x45, 0x34, 0x1d, 0xb1, 0x97, 0x34, 0xb7, 0x18, 0x27, 0x06, 0xe6, 0x74, 0x66, 0x78,
	0x9b, 0x55, 0xc7, 0xea, 0xc7, 0x91, 0xf9, 0x54, 0x69, 0x4c, 0x71, 0x65, 0xfd, 0xbc, 0x44, 0x3b,
	0x02, 0xcf, 0x84, 0x7f, 0x3d, 0xf1, 0x2b, 0x01, 0x34, 0x69, 0x2a, 0xa3, 0xe9, 0xa3, 0x57, 0x1b,
	0x52, 0xab, 0xfc, 0x29, 0x5d, 0x47, 0xba, 0x70, 0x72, 0x73, 0xe3, 0x5d, 0x56, 0x9c, 0xd8, 0x91,
	0x2d, 0x7f, 0xd1, 0xf8, 0x46, 0x92, 0xf6, 0x22, 0x21, 0xeb, 0xfb, 0xec, 0xe5, 0xe4, 0x57, 0xe2,
	0x36, 0x33, 0x24, 0x2e, 0x30, 0x63, 0x8e, 0x7d, 0xaf, 0x6f, 0x47, 0x67, 0xd2, 0x85, 0xb6, 0xd0,
	0x1f, 0x69, 0x81, 0x1c, 0xc1, 0xbb, 0xec, 0x5e, 0xe6, 0xfe, 0xc6, 0x7b, 0x09, 0x46, 0xac, 0x25,
	0x8c, 0x18, 0xd4, 0xac, 0x5f, 0x62, 0xf7, 0x53, 0x5f, 0xc2, 0x8c, 0x4b, 0x7c, 0x80, 0x81, 0x66,
	0xae, 0x3d, 0x36, 0xea, 0x8f, 0xf8, 0xd5, 0x4e, 0x77, 0x0a, 0x7e, 0x13, 0xd7, 0x00, 0x01, 0x4c,
	0x96, 0xc3, 0x71, 0xfc, 0x1f, 0x41, 0xb4, 0x64, 0x04, 0x26, 0xf0, 0x43, 0x84, 0x99, 0x7c, 0xbe,
	0xbe, 0x8c, 0x4f, 0xc9, 0x0a, 0xb8, 0x42, 0x4a, 0x5e, 0x18, 0x13, 0x61, 0x92, 0xb8, 0x46, 0x07,
	0x3d, 0xe1, 0xea, 0xfa, 0x06, 0xcf, 0x4f, 0x9d, 0xa9, 0x71, 0x78, 0x36, 0x83, 0x34, 0xa1, 0x7e,
	0xcb, 0xb6, 0xc8, 0x5b, 0xcd, 0x72, 0x65, 0xbe, 0x16, 0xad, 0x1f, 0xbe, 0x37, 0x50, 0x47, 0xb0,
	0xfa, 0xaa, 0x3d, 0x32, 0x8a, 0xad, 0xc2, 0xaf, 0xc3, 0x21, 0x14, 0xa3, 0xbd, 0x7e, 0x45, 0x34,
	0xf6, 0xc3, 0x08, 0xe7, 0xc8, 0x92, 0x72, 0x78, 0xc1, 0x80, 0x8c, 0xbe, 0x47, 0x26, 0x35, 0x7a,
	0xa5, 0x91, 0x76, 0xe3, 0xb7, 0x58, 0xc9, 0xa1, 0x01, 0x2c, 0x9f, 0x6a, 0xce, 0x92, 0x5c, 0xee,
	0xe6, 0x1f, 0x15, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x71, 0x4a, 0x12, 0x4f, 0x46, 0x00,
	0x00,
}
