// Code generated by protoc-gen-go.
// source: base.proto
// DO NOT EDIT!

package bbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EProtoId int32

const (
	EProtoId_GETINTOROOM     EProtoId = 1
	EProtoId_SHUIGUOJI       EProtoId = 2
	EProtoId_SHUIGUOJIHILOMP EProtoId = 3
	EProtoId_SHUIGUOJIRES    EProtoId = 4
	// 扎金花相关的逻辑
	EProtoId_ZJHROOM                          EProtoId = 5
	EProtoId_ZJHBET                           EProtoId = 6
	EProtoId_ZJHMSG                           EProtoId = 7
	EProtoId_ZJHQUERYNOSEATUSER               EProtoId = 8
	EProtoId_ZJHREQSEAT                       EProtoId = 9
	EProtoId_ZJHLOTTERY                       EProtoId = 10
	EProtoId_ZJHBROADCASTBEGINBET             EProtoId = 11
	EProtoId_LOGINSIGNINBONUS                 EProtoId = 12
	EProtoId_LOGINTURNTABLEBONUS              EProtoId = 13
	EProtoId_OLINEBONUS                       EProtoId = 14
	EProtoId_TIMINGBONUS                      EProtoId = 15
	EProtoId_THROOM                           EProtoId = 16
	EProtoId_THBET                            EProtoId = 17
	EProtoId_THBETBEGIN                       EProtoId = 18
	EProtoId_THBETBROADCAST                   EProtoId = 19
	EProtoId_THROOMADDUSERBROADCAST           EProtoId = 20
	EProtoId_PID_REQQUICKCONN                 EProtoId = 21
	EProtoId_PID_ACKQUICKCONN                 EProtoId = 22
	EProtoId_PID_NULLMSG                      EProtoId = 23
	EProtoId_PID_MATCHLIST_REQMOBILEMATCHLIST EProtoId = 24
	EProtoId_PID_GAME_LOGINGAME               EProtoId = 25
	EProtoId_PID_GAME_ENTERMATCH              EProtoId = 26
	EProtoId_PID_GAME_ACKENTERMATCH           EProtoId = 27
	EProtoId_PID_GAME_SENDGAMEINFO            EProtoId = 28
	EProtoId_PID_GAME_BLINDCOIN               EProtoId = 29
	EProtoId_PID_GAME_INITCARD                EProtoId = 30
	EProtoId_PID_GAME_SENDFLOPCARD            EProtoId = 31
	EProtoId_PID_GAME_SENDTURNCARD            EProtoId = 32
	EProtoId_PID_GAME_SENDRIVERCARD           EProtoId = 33
	EProtoId_PID_GAME_RAISEBET                EProtoId = 34
	EProtoId_PID_GAME_ACKRAISEBET             EProtoId = 35
	EProtoId_PID_GAME_FOLLOWBET               EProtoId = 36
	EProtoId_PID_GAME_ACKFOLLOWBET            EProtoId = 37
	EProtoId_PID_GAME_FOLDBET                 EProtoId = 38
	EProtoId_PID_GAME_ACKFOLDBET              EProtoId = 39
	EProtoId_PID_GAME_CHECKBET                EProtoId = 40
	EProtoId_PID_GAME_ACKCHECKBET             EProtoId = 41
	EProtoId_PID_GAME_SENDOVERTURN            EProtoId = 42
	EProtoId_PID_GAME_SENDADDUSER             EProtoId = 43
	EProtoId_PID_GAME_GAME_SHOWCARD           EProtoId = 44
	EProtoId_PID_GAME_GAME_ACKSHOWCARD        EProtoId = 45
	EProtoId_PID_GAME_GAME_TESTRESULT         EProtoId = 46
	EProtoId_PID_GAME_PRECOIN                 EProtoId = 47
	EProtoId_PID_GAME_GAMENOTICE              EProtoId = 48
	EProtoId_PID_GAME_GAME_ACKNOTICE          EProtoId = 49
	EProtoId_PID_GAME_GAME_CREATEDESK         EProtoId = 50
	EProtoId_PID_GAME_GAME_ACKCREATEDESK      EProtoId = 51
	EProtoId_PID_GAME_GAME_READY              EProtoId = 52
	EProtoId_PID_GAME_GAME_ACKREADY           EProtoId = 53
	EProtoId_PID_GAME_GAME_BEGIN              EProtoId = 54
	EProtoId_PID_GAME_GAME_GAMERECORD         EProtoId = 55
	EProtoId_PID_GAME_GAME_ACKGAMERECORD      EProtoId = 56
	EProtoId_PID_GAME_GAME_BEANGAMERECORD     EProtoId = 57
	EProtoId_PID_GAME_GAME_DISSOLVEDESK       EProtoId = 58
	EProtoId_PID_GAME_GAME_ACKDISSOLVEDESK    EProtoId = 59
	EProtoId_PID_GAME_LEAVEDESK               EProtoId = 60
	EProtoId_PID_GAME_ACKLEAVEDESK            EProtoId = 61
	EProtoId_PID_GAME_SENDDESKENDLOTTERY      EProtoId = 62
	EProtoId_PID_GAME_MESSAGE                 EProtoId = 63
	EProtoId_PID_GAME_SENDMESSAGE             EProtoId = 64
	EProtoId_PID_GAME_TOUNAMENTBLIND          EProtoId = 65
	EProtoId_PID_GAME_TOUNAMENTREWARDS        EProtoId = 66
	EProtoId_PID_GAME_TOUNAMENTRANK           EProtoId = 67
	EProtoId_PID_GAME_TOUNAMENTSUMMARY        EProtoId = 68
)

var EProtoId_name = map[int32]string{
	1:  "GETINTOROOM",
	2:  "SHUIGUOJI",
	3:  "SHUIGUOJIHILOMP",
	4:  "SHUIGUOJIRES",
	5:  "ZJHROOM",
	6:  "ZJHBET",
	7:  "ZJHMSG",
	8:  "ZJHQUERYNOSEATUSER",
	9:  "ZJHREQSEAT",
	10: "ZJHLOTTERY",
	11: "ZJHBROADCASTBEGINBET",
	12: "LOGINSIGNINBONUS",
	13: "LOGINTURNTABLEBONUS",
	14: "OLINEBONUS",
	15: "TIMINGBONUS",
	16: "THROOM",
	17: "THBET",
	18: "THBETBEGIN",
	19: "THBETBROADCAST",
	20: "THROOMADDUSERBROADCAST",
	21: "PID_REQQUICKCONN",
	22: "PID_ACKQUICKCONN",
	23: "PID_NULLMSG",
	24: "PID_MATCHLIST_REQMOBILEMATCHLIST",
	25: "PID_GAME_LOGINGAME",
	26: "PID_GAME_ENTERMATCH",
	27: "PID_GAME_ACKENTERMATCH",
	28: "PID_GAME_SENDGAMEINFO",
	29: "PID_GAME_BLINDCOIN",
	30: "PID_GAME_INITCARD",
	31: "PID_GAME_SENDFLOPCARD",
	32: "PID_GAME_SENDTURNCARD",
	33: "PID_GAME_SENDRIVERCARD",
	34: "PID_GAME_RAISEBET",
	35: "PID_GAME_ACKRAISEBET",
	36: "PID_GAME_FOLLOWBET",
	37: "PID_GAME_ACKFOLLOWBET",
	38: "PID_GAME_FOLDBET",
	39: "PID_GAME_ACKFOLDBET",
	40: "PID_GAME_CHECKBET",
	41: "PID_GAME_ACKCHECKBET",
	42: "PID_GAME_SENDOVERTURN",
	43: "PID_GAME_SENDADDUSER",
	44: "PID_GAME_GAME_SHOWCARD",
	45: "PID_GAME_GAME_ACKSHOWCARD",
	46: "PID_GAME_GAME_TESTRESULT",
	47: "PID_GAME_PRECOIN",
	48: "PID_GAME_GAMENOTICE",
	49: "PID_GAME_GAME_ACKNOTICE",
	50: "PID_GAME_GAME_CREATEDESK",
	51: "PID_GAME_GAME_ACKCREATEDESK",
	52: "PID_GAME_GAME_READY",
	53: "PID_GAME_GAME_ACKREADY",
	54: "PID_GAME_GAME_BEGIN",
	55: "PID_GAME_GAME_GAMERECORD",
	56: "PID_GAME_GAME_ACKGAMERECORD",
	57: "PID_GAME_GAME_BEANGAMERECORD",
	58: "PID_GAME_GAME_DISSOLVEDESK",
	59: "PID_GAME_GAME_ACKDISSOLVEDESK",
	60: "PID_GAME_LEAVEDESK",
	61: "PID_GAME_ACKLEAVEDESK",
	62: "PID_GAME_SENDDESKENDLOTTERY",
	63: "PID_GAME_MESSAGE",
	64: "PID_GAME_SENDMESSAGE",
	65: "PID_GAME_TOUNAMENTBLIND",
	66: "PID_GAME_TOUNAMENTREWARDS",
	67: "PID_GAME_TOUNAMENTRANK",
	68: "PID_GAME_TOUNAMENTSUMMARY",
}
var EProtoId_value = map[string]int32{
	"GETINTOROOM":                      1,
	"SHUIGUOJI":                        2,
	"SHUIGUOJIHILOMP":                  3,
	"SHUIGUOJIRES":                     4,
	"ZJHROOM":                          5,
	"ZJHBET":                           6,
	"ZJHMSG":                           7,
	"ZJHQUERYNOSEATUSER":               8,
	"ZJHREQSEAT":                       9,
	"ZJHLOTTERY":                       10,
	"ZJHBROADCASTBEGINBET":             11,
	"LOGINSIGNINBONUS":                 12,
	"LOGINTURNTABLEBONUS":              13,
	"OLINEBONUS":                       14,
	"TIMINGBONUS":                      15,
	"THROOM":                           16,
	"THBET":                            17,
	"THBETBEGIN":                       18,
	"THBETBROADCAST":                   19,
	"THROOMADDUSERBROADCAST":           20,
	"PID_REQQUICKCONN":                 21,
	"PID_ACKQUICKCONN":                 22,
	"PID_NULLMSG":                      23,
	"PID_MATCHLIST_REQMOBILEMATCHLIST": 24,
	"PID_GAME_LOGINGAME":               25,
	"PID_GAME_ENTERMATCH":              26,
	"PID_GAME_ACKENTERMATCH":           27,
	"PID_GAME_SENDGAMEINFO":            28,
	"PID_GAME_BLINDCOIN":               29,
	"PID_GAME_INITCARD":                30,
	"PID_GAME_SENDFLOPCARD":            31,
	"PID_GAME_SENDTURNCARD":            32,
	"PID_GAME_SENDRIVERCARD":           33,
	"PID_GAME_RAISEBET":                34,
	"PID_GAME_ACKRAISEBET":             35,
	"PID_GAME_FOLLOWBET":               36,
	"PID_GAME_ACKFOLLOWBET":            37,
	"PID_GAME_FOLDBET":                 38,
	"PID_GAME_ACKFOLDBET":              39,
	"PID_GAME_CHECKBET":                40,
	"PID_GAME_ACKCHECKBET":             41,
	"PID_GAME_SENDOVERTURN":            42,
	"PID_GAME_SENDADDUSER":             43,
	"PID_GAME_GAME_SHOWCARD":           44,
	"PID_GAME_GAME_ACKSHOWCARD":        45,
	"PID_GAME_GAME_TESTRESULT":         46,
	"PID_GAME_PRECOIN":                 47,
	"PID_GAME_GAMENOTICE":              48,
	"PID_GAME_GAME_ACKNOTICE":          49,
	"PID_GAME_GAME_CREATEDESK":         50,
	"PID_GAME_GAME_ACKCREATEDESK":      51,
	"PID_GAME_GAME_READY":              52,
	"PID_GAME_GAME_ACKREADY":           53,
	"PID_GAME_GAME_BEGIN":              54,
	"PID_GAME_GAME_GAMERECORD":         55,
	"PID_GAME_GAME_ACKGAMERECORD":      56,
	"PID_GAME_GAME_BEANGAMERECORD":     57,
	"PID_GAME_GAME_DISSOLVEDESK":       58,
	"PID_GAME_GAME_ACKDISSOLVEDESK":    59,
	"PID_GAME_LEAVEDESK":               60,
	"PID_GAME_ACKLEAVEDESK":            61,
	"PID_GAME_SENDDESKENDLOTTERY":      62,
	"PID_GAME_MESSAGE":                 63,
	"PID_GAME_SENDMESSAGE":             64,
	"PID_GAME_TOUNAMENTBLIND":          65,
	"PID_GAME_TOUNAMENTREWARDS":        66,
	"PID_GAME_TOUNAMENTRANK":           67,
	"PID_GAME_TOUNAMENTSUMMARY":        68,
}

func (x EProtoId) Enum() *EProtoId {
	p := new(EProtoId)
	*p = x
	return p
}
func (x EProtoId) String() string {
	return proto.EnumName(EProtoId_name, int32(x))
}
func (x *EProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProtoId_value, data, "EProtoId")
	if err != nil {
		return err
	}
	*x = EProtoId(value)
	return nil
}
func (EProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// general response protocol
type ProtoHeader struct {
	ApiVer           *string `protobuf:"bytes,1,opt,name=apiVer" json:"apiVer,omitempty"`
	SessionId        *string `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
	UserId           *uint32 `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	PacketId         *int32  `protobuf:"varint,4,opt,name=packetId" json:"packetId,omitempty"`
	Code             *int32  `protobuf:"varint,5,opt,name=code" json:"code,omitempty"`
	Error            *string `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
	ExtraTag         *int32  `protobuf:"varint,7,opt,name=extraTag" json:"extraTag,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProtoHeader) Reset()                    { *m = ProtoHeader{} }
func (m *ProtoHeader) String() string            { return proto.CompactTextString(m) }
func (*ProtoHeader) ProtoMessage()               {}
func (*ProtoHeader) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ProtoHeader) GetApiVer() string {
	if m != nil && m.ApiVer != nil {
		return *m.ApiVer
	}
	return ""
}

func (m *ProtoHeader) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *ProtoHeader) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ProtoHeader) GetPacketId() int32 {
	if m != nil && m.PacketId != nil {
		return *m.PacketId
	}
	return 0
}

func (m *ProtoHeader) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ProtoHeader) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *ProtoHeader) GetExtraTag() int32 {
	if m != nil && m.ExtraTag != nil {
		return *m.ExtraTag
	}
	return 0
}

type TerminalInfo struct {
	Channel          *string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	DeviceName       *string `protobuf:"bytes,2,opt,name=deviceName" json:"deviceName,omitempty"`
	Uuid             *string `protobuf:"bytes,3,opt,name=uuid" json:"uuid,omitempty"`
	Os               *string `protobuf:"bytes,4,opt,name=os" json:"os,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TerminalInfo) Reset()                    { *m = TerminalInfo{} }
func (m *TerminalInfo) String() string            { return proto.CompactTextString(m) }
func (*TerminalInfo) ProtoMessage()               {}
func (*TerminalInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TerminalInfo) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *TerminalInfo) GetDeviceName() string {
	if m != nil && m.DeviceName != nil {
		return *m.DeviceName
	}
	return ""
}

func (m *TerminalInfo) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *TerminalInfo) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return ""
}

type User struct {
	Mid                *string `protobuf:"bytes,1,opt,name=mid" json:"mid,omitempty"`
	Name               *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Pwd                *string `protobuf:"bytes,3,opt,name=pwd" json:"pwd,omitempty"`
	Coin               *int64  `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	Id                 *uint32 `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
	NickName           *string `protobuf:"bytes,6,opt,name=nickName" json:"nickName,omitempty"`
	LoginTurntable     *bool   `protobuf:"varint,7,opt,name=loginTurntable" json:"loginTurntable,omitempty"`
	LoginTurntableTime *string `protobuf:"bytes,8,opt,name=loginTurntableTime" json:"loginTurntableTime,omitempty"`
	Scores             *int32  `protobuf:"varint,9,opt,name=scores" json:"scores,omitempty"`
	LastSignTime       *string `protobuf:"bytes,10,opt,name=lastSignTime" json:"lastSignTime,omitempty"`
	SignCount          *int32  `protobuf:"varint,11,opt,name=signCount" json:"signCount,omitempty"`
	Diamond            *int64  `protobuf:"varint,12,opt,name=Diamond" json:"Diamond,omitempty"`
	OpenId             *string `protobuf:"bytes,13,opt,name=openId" json:"openId,omitempty"`
	HeadUrl            *string `protobuf:"bytes,14,opt,name=headUrl" json:"headUrl,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *User) GetMid() string {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *User) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

func (m *User) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *User) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *User) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *User) GetLoginTurntable() bool {
	if m != nil && m.LoginTurntable != nil {
		return *m.LoginTurntable
	}
	return false
}

func (m *User) GetLoginTurntableTime() string {
	if m != nil && m.LoginTurntableTime != nil {
		return *m.LoginTurntableTime
	}
	return ""
}

func (m *User) GetScores() int32 {
	if m != nil && m.Scores != nil {
		return *m.Scores
	}
	return 0
}

func (m *User) GetLastSignTime() string {
	if m != nil && m.LastSignTime != nil {
		return *m.LastSignTime
	}
	return ""
}

func (m *User) GetSignCount() int32 {
	if m != nil && m.SignCount != nil {
		return *m.SignCount
	}
	return 0
}

func (m *User) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *User) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *User) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*ProtoHeader)(nil), "bbproto.ProtoHeader")
	proto.RegisterType((*TerminalInfo)(nil), "bbproto.TerminalInfo")
	proto.RegisterType((*User)(nil), "bbproto.User")
	proto.RegisterEnum("bbproto.EProtoId", EProtoId_name, EProtoId_value)
}

var fileDescriptor2 = []byte{
	// 1016 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x54, 0xdb, 0x57, 0xdb, 0xc6,
	0x13, 0x3e, 0x06, 0x0c, 0x78, 0x31, 0xb0, 0x2c, 0x37, 0x71, 0x4b, 0x08, 0xbf, 0xfc, 0xda, 0x34,
	0x6d, 0xd3, 0xfb, 0xfd, 0x2a, 0x4b, 0x8b, 0xbd, 0x41, 0xd2, 0x82, 0xb4, 0x82, 0x93, 0xbe, 0xe4,
	0x08, 0x5b, 0x25, 0x3a, 0x31, 0x12, 0x47, 0x36, 0x6d, 0x5f, 0xfb, 0xd0, 0x3f, 0xba, 0x6f, 0x9d,
	0x5d, 0x59, 0xb2, 0x17, 0xe5, 0xc5, 0xec, 0x7e, 0xdf, 0xcc, 0xce, 0x37, 0xdf, 0x8c, 0x40, 0xe8,
	0x3a, 0x1a, 0xc5, 0x2f, 0xee, 0xf2, 0x6c, 0x9c, 0x91, 0xa5, 0xeb, 0x6b, 0x75, 0x38, 0xf9, 0xbb,
	0x81, 0x56, 0xce, 0xe5, 0xa9, 0x17, 0x47, 0x83, 0x38, 0x27, 0x6b, 0x68, 0x31, 0xba, 0x4b, 0x2e,
	0xe3, 0xdc, 0x68, 0x1c, 0x37, 0x9e, 0xb5, 0xc8, 0x06, 0x6a, 0x8d, 0xe2, 0xd1, 0x28, 0xc9, 0x52,
	0x36, 0x30, 0xe6, 0x14, 0x04, 0x21, 0xf7, 0xa3, 0x38, 0x87, 0xfb, 0x3c, 0xdc, 0x57, 0x09, 0x46,
	0xcb, 0x77, 0x51, 0xff, 0x6d, 0x3c, 0x06, 0x64, 0x01, 0x90, 0x26, 0x69, 0xa3, 0x85, 0x7e, 0x36,
	0x88, 0x8d, 0xa6, 0xba, 0xad, 0xa2, 0x66, 0x9c, 0xe7, 0x59, 0x6e, 0x2c, 0xaa, 0x74, 0x08, 0x8f,
	0xff, 0x1a, 0xe7, 0x91, 0x88, 0x6e, 0x8c, 0x25, 0x19, 0x70, 0xe2, 0xa2, 0xb6, 0x88, 0xf3, 0xdb,
	0x24, 0x8d, 0x86, 0x2c, 0xfd, 0x3d, 0x23, 0xeb, 0x68, 0xa9, 0xff, 0x26, 0x4a, 0xd3, 0x78, 0x38,
	0x11, 0x41, 0x10, 0x1a, 0xc4, 0x7f, 0x24, 0xfd, 0xd8, 0x8b, 0x6e, 0xe3, 0x89, 0x0a, 0xa8, 0x71,
	0x7f, 0x9f, 0x14, 0x1a, 0x5a, 0x10, 0x30, 0x97, 0x8d, 0x54, 0xf5, 0xd6, 0xc9, 0xbf, 0x0d, 0xb4,
	0x10, 0x82, 0x40, 0xb2, 0x82, 0xe6, 0x6f, 0x21, 0xa2, 0x51, 0xc6, 0xa7, 0xd3, 0x6c, 0xa0, 0xee,
	0xfe, 0x2c, 0x93, 0x95, 0xdc, 0x24, 0x55, 0xe9, 0xf3, 0xf2, 0x29, 0x48, 0x6a, 0x96, 0xad, 0xa5,
	0x49, 0xff, 0xad, 0x2a, 0x5b, 0xa8, 0xdf, 0x41, 0x6b, 0xc3, 0xec, 0x26, 0x49, 0xc5, 0x7d, 0x9e,
	0x8e, 0xa3, 0xeb, 0x61, 0xac, 0x7a, 0x58, 0x26, 0xfb, 0x88, 0xe8, 0xb8, 0x48, 0x20, 0x67, 0xb9,
	0x34, 0x6c, 0xd4, 0xcf, 0xf2, 0x78, 0x64, 0xb4, 0x94, 0x21, 0x5b, 0xa8, 0x3d, 0x8c, 0x46, 0xe3,
	0x20, 0xb9, 0x49, 0x55, 0x14, 0xaa, 0x9c, 0x06, 0xc4, 0xca, 0xee, 0xd3, 0xb1, 0xb1, 0xa2, 0x02,
	0xc1, 0x08, 0x3b, 0x89, 0x6e, 0xb3, 0x74, 0x60, 0xb4, 0x95, 0x36, 0x78, 0x29, 0xbb, 0x8b, 0xe5,
	0x28, 0x56, 0x55, 0x0e, 0x04, 0xbc, 0x81, 0xb9, 0x85, 0xf9, 0xd0, 0x58, 0x93, 0xc0, 0xf3, 0x7f,
	0x56, 0xd1, 0x32, 0x55, 0xf3, 0x64, 0x03, 0x60, 0x57, 0xba, 0x54, 0x30, 0x4f, 0x70, 0x9f, 0x73,
	0x17, 0x37, 0x60, 0x12, 0xad, 0xa0, 0x17, 0xb2, 0x6e, 0xc8, 0x5f, 0x32, 0x3c, 0x47, 0x36, 0xd1,
	0x7a, 0x75, 0xed, 0x31, 0x87, 0xbb, 0xe7, 0x78, 0x1e, 0x5a, 0x6e, 0x57, 0xa0, 0x4f, 0x03, 0xbc,
	0x00, 0x5e, 0x2d, 0xfd, 0xf6, 0xb2, 0xa7, 0x9e, 0x68, 0x82, 0x3b, 0x8b, 0x70, 0xe9, 0x50, 0x81,
	0x17, 0x27, 0x67, 0x37, 0xe8, 0xe2, 0x25, 0xf0, 0x85, 0xc0, 0xf9, 0x22, 0xa4, 0xfe, 0x2b, 0x8f,
	0x07, 0xd4, 0x14, 0x61, 0x40, 0x7d, 0xbc, 0x0c, 0x8a, 0x91, 0x4c, 0xa6, 0x17, 0x12, 0xc3, 0xad,
	0xc9, 0xdd, 0xe1, 0x42, 0x40, 0x24, 0x46, 0xc4, 0x40, 0x5b, 0xf2, 0x3d, 0x9f, 0x9b, 0xb6, 0x65,
	0x06, 0xa2, 0x43, 0xbb, 0xcc, 0x93, 0xaf, 0xaf, 0x80, 0x4b, 0xd8, 0xe1, 0x70, 0x0b, 0x58, 0xd7,
	0x03, 0x8c, 0x7b, 0x61, 0x80, 0xdb, 0x64, 0x17, 0x6d, 0x2a, 0x54, 0x84, 0xbe, 0x27, 0xcc, 0x8e,
	0x43, 0x0b, 0x62, 0x55, 0x3e, 0xcc, 0x1d, 0xe6, 0x4d, 0xee, 0x6b, 0xb2, 0x79, 0xc1, 0x5c, 0xe6,
	0x75, 0x0b, 0x60, 0x5d, 0xaa, 0x15, 0x45, 0x17, 0x98, 0xb4, 0x50, 0x53, 0xa8, 0x26, 0x36, 0x64,
	0x9e, 0x3a, 0xaa, 0xca, 0x98, 0xc0, 0xae, 0xad, 0x15, 0xf7, 0x52, 0x12, 0xde, 0x84, 0xe1, 0xee,
	0x14, 0xa9, 0xa6, 0x6d, 0xcb, 0xbe, 0xa6, 0xdc, 0x96, 0x94, 0x79, 0xce, 0xec, 0xd7, 0xd0, 0xe1,
	0x45, 0xc8, 0xac, 0x33, 0x8b, 0x7b, 0x1e, 0xde, 0x2e, 0x51, 0xd3, 0x3a, 0x9b, 0xa2, 0x3b, 0x52,
	0x93, 0x44, 0xbd, 0xd0, 0x71, 0xa4, 0x6b, 0xbb, 0xe4, 0x29, 0x3a, 0x96, 0x80, 0x6b, 0x0a, 0xab,
	0xe7, 0xb0, 0x40, 0xc8, 0x67, 0x5c, 0xde, 0x61, 0x0e, 0xad, 0x20, 0x6c, 0x48, 0x6f, 0x65, 0x54,
	0xd7, 0x74, 0xe9, 0x6b, 0xd5, 0xbc, 0x3c, 0xe1, 0x3d, 0xe9, 0x45, 0x85, 0x53, 0x0f, 0x0c, 0x55,
	0x49, 0x78, 0x5f, 0xea, 0xad, 0x08, 0x90, 0x30, 0xc3, 0x1d, 0x90, 0x3d, 0xb4, 0x5d, 0x71, 0x01,
	0xf5, 0x6c, 0x79, 0x60, 0xde, 0x29, 0xc7, 0x87, 0x5a, 0x9d, 0x0e, 0x78, 0x69, 0x5b, 0x1c, 0x2c,
	0x39, 0x22, 0xdb, 0x68, 0xa3, 0xc2, 0x99, 0xc7, 0x84, 0x65, 0xfa, 0x36, 0x7e, 0x54, 0x7b, 0xe9,
	0xd4, 0xe1, 0xe7, 0x8a, 0x7a, 0x5c, 0xa3, 0xe4, 0xb4, 0x14, 0x75, 0xac, 0x69, 0x93, 0x94, 0xcf,
	0x2e, 0xa9, 0xaf, 0xb8, 0x27, 0x5a, 0x21, 0xdf, 0x64, 0x01, 0x95, 0x23, 0x3a, 0x91, 0x3b, 0x32,
	0xdb, 0x4e, 0xc5, 0xfc, 0x4f, 0x53, 0x7c, 0xca, 0x1d, 0x87, 0x5f, 0x49, 0xfc, 0xa9, 0x56, 0x1f,
	0x32, 0xa6, 0xd4, 0xff, 0xcb, 0xc9, 0x94, 0x29, 0xb6, 0x44, 0xdf, 0xd3, 0xac, 0x2c, 0x12, 0x14,
	0xf1, 0xbe, 0x26, 0xc9, 0xea, 0x51, 0xeb, 0x4c, 0xc2, 0xcf, 0x1e, 0x4a, 0xaa, 0x98, 0x0f, 0x6a,
	0xad, 0x73, 0x68, 0x4f, 0xb6, 0x8f, 0x9f, 0x6b, 0x49, 0x92, 0x9a, 0x6c, 0x13, 0xfe, 0x50, 0x33,
	0xa5, 0xa0, 0x7b, 0xfc, 0x4a, 0x99, 0xf2, 0x11, 0x39, 0x42, 0x7b, 0x3a, 0x07, 0xf5, 0x2a, 0xfa,
	0x63, 0x72, 0x88, 0x0c, 0x9d, 0x16, 0x34, 0x10, 0xf0, 0xe1, 0x86, 0x8e, 0xc0, 0x2f, 0xb4, 0x6e,
	0xcf, 0x7d, 0xaa, 0x06, 0xfa, 0x89, 0xd6, 0xad, 0xfc, 0xf1, 0xb8, 0x60, 0x16, 0xc5, 0x9f, 0x92,
	0x03, 0xb4, 0x5b, 0xab, 0x35, 0x21, 0x3f, 0xab, 0x57, 0xb2, 0x7c, 0xf8, 0xa6, 0xa9, 0x4d, 0x83,
	0x33, 0xfc, 0x39, 0x79, 0x8c, 0x0e, 0x6a, 0xa9, 0x33, 0x01, 0x5f, 0xd4, 0x8a, 0xc2, 0xae, 0x9b,
	0xf6, 0x2b, 0xfc, 0x65, 0xbd, 0x79, 0x39, 0x63, 0xc5, 0x7d, 0x55, 0x4f, 0x2a, 0x3e, 0xd3, 0xaf,
	0xeb, 0x62, 0xe4, 0x8f, 0x6c, 0x10, 0x4c, 0xf9, 0xe6, 0x9d, 0x62, 0x66, 0x02, 0xbe, 0x25, 0xc7,
	0xe8, 0xf0, 0xe1, 0xbb, 0xa6, 0x37, 0x13, 0xf1, 0x1d, 0x79, 0x84, 0xf6, 0xf5, 0x08, 0x9b, 0x05,
	0x01, 0x77, 0x2e, 0x8b, 0x76, 0xbe, 0x27, 0x4f, 0xd0, 0x51, 0xad, 0x84, 0x16, 0xf2, 0x83, 0xfe,
	0xdd, 0x52, 0x73, 0x82, 0xff, 0xf8, 0x70, 0x3b, 0xa7, 0xd4, 0x4f, 0x9a, 0x70, 0xb9, 0x22, 0x12,
	0x86, 0x3f, 0xe5, 0xff, 0xcb, 0x9f, 0xb5, 0x81, 0xba, 0x34, 0x08, 0xcc, 0x2e, 0xc5, 0xbf, 0xd4,
	0x36, 0xab, 0x64, 0x7e, 0xd5, 0x26, 0x2a, 0x78, 0xe8, 0xc9, 0x69, 0x0b, 0xf5, 0x71, 0x63, 0x53,
	0x5b, 0xad, 0x8a, 0xf4, 0xe9, 0x15, 0x6c, 0x56, 0x80, 0x3b, 0xda, 0x60, 0xa6, 0xb4, 0xe9, 0x9d,
	0x61, 0xeb, 0xdd, 0xa9, 0x41, 0xe8, 0xba, 0x26, 0xc8, 0xb4, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x19, 0x60, 0x12, 0x8d, 0x6c, 0x08, 0x00, 0x00,
}
