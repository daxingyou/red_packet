// Code generated by protoc-gen-go.
// source: ddz_play.proto
// DO NOT EDIT!

package ddzproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from ddz_base.proto

// Ignoring public import of Poker from ddz_base.proto

// Ignoring public import of WeixinInfo from ddz_base.proto

// Ignoring public import of RoomTypeInfo from ddz_base.proto

// Ignoring public import of PlayerInfo from ddz_base.proto

// Ignoring public import of DdzDeskInfo from ddz_base.proto

// Ignoring public import of EProtoId from ddz_base.proto

// Ignoring public import of ErrorCode from ddz_base.proto

// Ignoring public import of PokerColor from ddz_base.proto

// Ignoring public import of DdzPaiType from ddz_base.proto

// Ignoring public import of ActType from ddz_base.proto

// Ignoring public import of DDZGameStatus from ddz_base.proto

// Ignoring public import of PlayerGameStatus from ddz_base.proto

// Ignoring public import of DDZRoomType from ddz_base.proto

// Ignoring public import of DeskGameStatus from ddz_base.proto

// 开局（接收服务端消息）
type DdzOpening struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzOpening) Reset()                    { *m = DdzOpening{} }
func (m *DdzOpening) String() string            { return proto.CompactTextString(m) }
func (*DdzOpening) ProtoMessage()               {}
func (*DdzOpening) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *DdzOpening) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 发牌
type DdzDealCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PlayerPokers     []*Poker     `protobuf:"bytes,2,rep,name=playerPokers" json:"playerPokers,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzDealCards) Reset()                    { *m = DdzDealCards{} }
func (m *DdzDealCards) String() string            { return proto.CompactTextString(m) }
func (*DdzDealCards) ProtoMessage()               {}
func (*DdzDealCards) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *DdzDealCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzDealCards) GetPlayerPokers() []*Poker {
	if m != nil {
		return m.PlayerPokers
	}
	return nil
}

// 明牌
type DdzShowHandPokers struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzShowHandPokers) Reset()                    { *m = DdzShowHandPokers{} }
func (m *DdzShowHandPokers) String() string            { return proto.CompactTextString(m) }
func (*DdzShowHandPokers) ProtoMessage()               {}
func (*DdzShowHandPokers) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *DdzShowHandPokers) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzShowHandPokers) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 明牌ack
type DdzShowHandPokersAck struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzShowHandPokersAck) Reset()                    { *m = DdzShowHandPokersAck{} }
func (m *DdzShowHandPokersAck) String() string            { return proto.CompactTextString(m) }
func (*DdzShowHandPokersAck) ProtoMessage()               {}
func (*DdzShowHandPokersAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *DdzShowHandPokersAck) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzShowHandPokersAck) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 叫地主
type DdzJiaoDiZhu struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Score            *int32       `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzJiaoDiZhu) Reset()                    { *m = DdzJiaoDiZhu{} }
func (m *DdzJiaoDiZhu) String() string            { return proto.CompactTextString(m) }
func (*DdzJiaoDiZhu) ProtoMessage()               {}
func (*DdzJiaoDiZhu) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *DdzJiaoDiZhu) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzJiaoDiZhu) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzJiaoDiZhu) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 叫地主回复
type DdzJiaoDiZhuAck struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzJiaoDiZhuAck) Reset()                    { *m = DdzJiaoDiZhuAck{} }
func (m *DdzJiaoDiZhuAck) String() string            { return proto.CompactTextString(m) }
func (*DdzJiaoDiZhuAck) ProtoMessage()               {}
func (*DdzJiaoDiZhuAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *DdzJiaoDiZhuAck) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzJiaoDiZhuAck) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 抢地主
type DdzRobDiZhu struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzRobDiZhu) Reset()                    { *m = DdzRobDiZhu{} }
func (m *DdzRobDiZhu) String() string            { return proto.CompactTextString(m) }
func (*DdzRobDiZhu) ProtoMessage()               {}
func (*DdzRobDiZhu) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *DdzRobDiZhu) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzRobDiZhu) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type DdzRobDiZhuAck struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzRobDiZhuAck) Reset()                    { *m = DdzRobDiZhuAck{} }
func (m *DdzRobDiZhuAck) String() string            { return proto.CompactTextString(m) }
func (*DdzRobDiZhuAck) ProtoMessage()               {}
func (*DdzRobDiZhuAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *DdzRobDiZhuAck) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzRobDiZhuAck) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 加倍
type DdzDouble struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Double           *int32       `protobuf:"varint,3,opt,name=double" json:"double,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzDouble) Reset()                    { *m = DdzDouble{} }
func (m *DdzDouble) String() string            { return proto.CompactTextString(m) }
func (*DdzDouble) ProtoMessage()               {}
func (*DdzDouble) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *DdzDouble) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzDouble) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzDouble) GetDouble() int32 {
	if m != nil && m.Double != nil {
		return *m.Double
	}
	return 0
}

type DdzDoubleAck struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Double           *int32       `protobuf:"varint,3,opt,name=double" json:"double,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzDoubleAck) Reset()                    { *m = DdzDoubleAck{} }
func (m *DdzDoubleAck) String() string            { return proto.CompactTextString(m) }
func (*DdzDoubleAck) ProtoMessage()               {}
func (*DdzDoubleAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *DdzDoubleAck) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzDoubleAck) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzDoubleAck) GetDouble() int32 {
	if m != nil && m.Double != nil {
		return *m.Double
	}
	return 0
}

// 叫地主结束，开始游戏 (广播)
type DdzStartPlay struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	FootPokers       []*Poker     `protobuf:"bytes,2,rep,name=footPokers" json:"footPokers,omitempty"`
	FootRate         *int32       `protobuf:"varint,3,opt,name=footRate" json:"footRate,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzStartPlay) Reset()                    { *m = DdzStartPlay{} }
func (m *DdzStartPlay) String() string            { return proto.CompactTextString(m) }
func (*DdzStartPlay) ProtoMessage()               {}
func (*DdzStartPlay) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *DdzStartPlay) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzStartPlay) GetFootPokers() []*Poker {
	if m != nil {
		return m.FootPokers
	}
	return nil
}

func (m *DdzStartPlay) GetFootRate() int32 {
	if m != nil && m.FootRate != nil {
		return *m.FootRate
	}
	return 0
}

// 闷抓
type DdzMenuZhua struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzMenuZhua) Reset()                    { *m = DdzMenuZhua{} }
func (m *DdzMenuZhua) String() string            { return proto.CompactTextString(m) }
func (*DdzMenuZhua) ProtoMessage()               {}
func (*DdzMenuZhua) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *DdzMenuZhua) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzMenuZhua) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type DdzMenuZhuaAck struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	HandPokers       []*Poker     `protobuf:"bytes,3,rep,name=handPokers" json:"handPokers,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzMenuZhuaAck) Reset()                    { *m = DdzMenuZhuaAck{} }
func (m *DdzMenuZhuaAck) String() string            { return proto.CompactTextString(m) }
func (*DdzMenuZhuaAck) ProtoMessage()               {}
func (*DdzMenuZhuaAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *DdzMenuZhuaAck) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzMenuZhuaAck) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzMenuZhuaAck) GetHandPokers() []*Poker {
	if m != nil {
		return m.HandPokers
	}
	return nil
}

// 看牌
type DdzSeeCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzSeeCards) Reset()                    { *m = DdzSeeCards{} }
func (m *DdzSeeCards) String() string            { return proto.CompactTextString(m) }
func (*DdzSeeCards) ProtoMessage()               {}
func (*DdzSeeCards) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *DdzSeeCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzSeeCards) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type DdzSeeCardsAck struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	HandPokers       []*Poker     `protobuf:"bytes,3,rep,name=handPokers" json:"handPokers,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzSeeCardsAck) Reset()                    { *m = DdzSeeCardsAck{} }
func (m *DdzSeeCardsAck) String() string            { return proto.CompactTextString(m) }
func (*DdzSeeCardsAck) ProtoMessage()               {}
func (*DdzSeeCardsAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *DdzSeeCardsAck) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzSeeCardsAck) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzSeeCardsAck) GetHandPokers() []*Poker {
	if m != nil {
		return m.HandPokers
	}
	return nil
}

// 拉/倒
type DdzPull struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Act              *int32       `protobuf:"varint,3,opt,name=act" json:"act,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzPull) Reset()                    { *m = DdzPull{} }
func (m *DdzPull) String() string            { return proto.CompactTextString(m) }
func (*DdzPull) ProtoMessage()               {}
func (*DdzPull) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

func (m *DdzPull) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzPull) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzPull) GetAct() int32 {
	if m != nil && m.Act != nil {
		return *m.Act
	}
	return 0
}

type DdzPullAck struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Act              *int32       `protobuf:"varint,3,opt,name=act" json:"act,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzPullAck) Reset()                    { *m = DdzPullAck{} }
func (m *DdzPullAck) String() string            { return proto.CompactTextString(m) }
func (*DdzPullAck) ProtoMessage()               {}
func (*DdzPullAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{16} }

func (m *DdzPullAck) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzPullAck) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzPullAck) GetAct() int32 {
	if m != nil && m.Act != nil {
		return *m.Act
	}
	return 0
}

// 出牌
type DdzOutCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	OutCards         []*Poker     `protobuf:"bytes,2,rep,name=outCards" json:"outCards,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzOutCards) Reset()                    { *m = DdzOutCards{} }
func (m *DdzOutCards) String() string            { return proto.CompactTextString(m) }
func (*DdzOutCards) ProtoMessage()               {}
func (*DdzOutCards) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

func (m *DdzOutCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzOutCards) GetOutCards() []*Poker {
	if m != nil {
		return m.OutCards
	}
	return nil
}

type DdzOutCardsAck struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	CardType         *DdzPaiType  `protobuf:"varint,3,opt,name=cardType,enum=ddzproto.DdzPaiType" json:"cardType,omitempty"`
	RemainPokers     *int32       `protobuf:"varint,4,opt,name=remainPokers" json:"remainPokers,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzOutCardsAck) Reset()                    { *m = DdzOutCardsAck{} }
func (m *DdzOutCardsAck) String() string            { return proto.CompactTextString(m) }
func (*DdzOutCardsAck) ProtoMessage()               {}
func (*DdzOutCardsAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{18} }

func (m *DdzOutCardsAck) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzOutCardsAck) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzOutCardsAck) GetCardType() DdzPaiType {
	if m != nil && m.CardType != nil {
		return *m.CardType
	}
	return DdzPaiType_ERRORCARD
}

func (m *DdzOutCardsAck) GetRemainPokers() int32 {
	if m != nil && m.RemainPokers != nil {
		return *m.RemainPokers
	}
	return 0
}

// 过牌
type DdzActGuo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzActGuo) Reset()                    { *m = DdzActGuo{} }
func (m *DdzActGuo) String() string            { return proto.CompactTextString(m) }
func (*DdzActGuo) ProtoMessage()               {}
func (*DdzActGuo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{19} }

func (m *DdzActGuo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzActGuo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

//
type DdzActGuoAck struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzActGuoAck) Reset()                    { *m = DdzActGuoAck{} }
func (m *DdzActGuoAck) String() string            { return proto.CompactTextString(m) }
func (*DdzActGuoAck) ProtoMessage()               {}
func (*DdzActGuoAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{20} }

func (m *DdzActGuoAck) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzActGuoAck) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 轮到谁操作
type DdzOverTurn struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Time             *int32       `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	ActType          *ActType     `protobuf:"varint,4,opt,name=actType,enum=ddzproto.ActType" json:"actType,omitempty"`
	CanDouble        *bool        `protobuf:"varint,5,opt,name=canDouble" json:"canDouble,omitempty"`
	PullOrPush       *int32       `protobuf:"varint,6,opt,name=pullOrPush" json:"pullOrPush,omitempty"`
	CanOutCards      *bool        `protobuf:"varint,7,opt,name=canOutCards" json:"canOutCards,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DdzOverTurn) Reset()                    { *m = DdzOverTurn{} }
func (m *DdzOverTurn) String() string            { return proto.CompactTextString(m) }
func (*DdzOverTurn) ProtoMessage()               {}
func (*DdzOverTurn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{21} }

func (m *DdzOverTurn) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzOverTurn) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzOverTurn) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *DdzOverTurn) GetActType() ActType {
	if m != nil && m.ActType != nil {
		return *m.ActType
	}
	return ActType_T_NORMAL_ACT
}

func (m *DdzOverTurn) GetCanDouble() bool {
	if m != nil && m.CanDouble != nil {
		return *m.CanDouble
	}
	return false
}

func (m *DdzOverTurn) GetPullOrPush() int32 {
	if m != nil && m.PullOrPush != nil {
		return *m.PullOrPush
	}
	return 0
}

func (m *DdzOverTurn) GetCanOutCards() bool {
	if m != nil && m.CanOutCards != nil {
		return *m.CanOutCards
	}
	return false
}

// 游戏信息(广播)
type DdzSendGameInfo struct {
	Header           *ProtoHeader  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PlayerInfo       []*PlayerInfo `protobuf:"bytes,2,rep,name=playerInfo" json:"playerInfo,omitempty"`
	DdzDeskInfo      *DdzDeskInfo  `protobuf:"bytes,3,opt,name=ddzDeskInfo" json:"ddzDeskInfo,omitempty"`
	SenderUserId     *uint32       `protobuf:"varint,4,opt,name=senderUserId" json:"senderUserId,omitempty"`
	IsReconnect      *int32        `protobuf:"varint,5,opt,name=isReconnect" json:"isReconnect,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DdzSendGameInfo) Reset()                    { *m = DdzSendGameInfo{} }
func (m *DdzSendGameInfo) String() string            { return proto.CompactTextString(m) }
func (*DdzSendGameInfo) ProtoMessage()               {}
func (*DdzSendGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{22} }

func (m *DdzSendGameInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DdzSendGameInfo) GetPlayerInfo() []*PlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *DdzSendGameInfo) GetDdzDeskInfo() *DdzDeskInfo {
	if m != nil {
		return m.DdzDeskInfo
	}
	return nil
}

func (m *DdzSendGameInfo) GetSenderUserId() uint32 {
	if m != nil && m.SenderUserId != nil {
		return *m.SenderUserId
	}
	return 0
}

func (m *DdzSendGameInfo) GetIsReconnect() int32 {
	if m != nil && m.IsReconnect != nil {
		return *m.IsReconnect
	}
	return 0
}

func init() {
	proto.RegisterType((*DdzOpening)(nil), "ddzproto.DdzOpening")
	proto.RegisterType((*DdzDealCards)(nil), "ddzproto.DdzDealCards")
	proto.RegisterType((*DdzShowHandPokers)(nil), "ddzproto.DdzShowHandPokers")
	proto.RegisterType((*DdzShowHandPokersAck)(nil), "ddzproto.DdzShowHandPokersAck")
	proto.RegisterType((*DdzJiaoDiZhu)(nil), "ddzproto.DdzJiaoDiZhu")
	proto.RegisterType((*DdzJiaoDiZhuAck)(nil), "ddzproto.DdzJiaoDiZhuAck")
	proto.RegisterType((*DdzRobDiZhu)(nil), "ddzproto.DdzRobDiZhu")
	proto.RegisterType((*DdzRobDiZhuAck)(nil), "ddzproto.DdzRobDiZhuAck")
	proto.RegisterType((*DdzDouble)(nil), "ddzproto.DdzDouble")
	proto.RegisterType((*DdzDoubleAck)(nil), "ddzproto.DdzDoubleAck")
	proto.RegisterType((*DdzStartPlay)(nil), "ddzproto.DdzStartPlay")
	proto.RegisterType((*DdzMenuZhua)(nil), "ddzproto.DdzMenuZhua")
	proto.RegisterType((*DdzMenuZhuaAck)(nil), "ddzproto.DdzMenuZhuaAck")
	proto.RegisterType((*DdzSeeCards)(nil), "ddzproto.DdzSeeCards")
	proto.RegisterType((*DdzSeeCardsAck)(nil), "ddzproto.DdzSeeCardsAck")
	proto.RegisterType((*DdzPull)(nil), "ddzproto.DdzPull")
	proto.RegisterType((*DdzPullAck)(nil), "ddzproto.DdzPullAck")
	proto.RegisterType((*DdzOutCards)(nil), "ddzproto.DdzOutCards")
	proto.RegisterType((*DdzOutCardsAck)(nil), "ddzproto.DdzOutCardsAck")
	proto.RegisterType((*DdzActGuo)(nil), "ddzproto.DdzActGuo")
	proto.RegisterType((*DdzActGuoAck)(nil), "ddzproto.DdzActGuoAck")
	proto.RegisterType((*DdzOverTurn)(nil), "ddzproto.DdzOverTurn")
	proto.RegisterType((*DdzSendGameInfo)(nil), "ddzproto.DdzSendGameInfo")
}

var fileDescriptor3 = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x95, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x71, 0xf3, 0xb7, 0x93, 0x34, 0x25, 0x26, 0x48, 0x16, 0xa7, 0x62, 0x04, 0x8a, 0x38,
	0xe4, 0x50, 0x9e, 0x20, 0x25, 0x28, 0x69, 0xa5, 0x28, 0x56, 0x92, 0x0a, 0x09, 0x21, 0xa1, 0x8d,
	0xbd, 0x25, 0x56, 0x1c, 0x6f, 0xb4, 0xb6, 0x41, 0xed, 0x9d, 0x17, 0xe2, 0xc6, 0xdb, 0x31, 0x3b,
	0x6b, 0x37, 0x81, 0x16, 0x94, 0xda, 0xea, 0x25, 0x8a, 0x3d, 0x33, 0xbf, 0xfd, 0xf6, 0x9b, 0xd9,
	0x35, 0xb4, 0x3c, 0xef, 0xe6, 0xcb, 0x26, 0x60, 0xd7, 0xbd, 0x8d, 0x14, 0xb1, 0x30, 0xeb, 0xf8,
	0x4c, 0xff, 0x5e, 0x50, 0x64, 0xc1, 0x22, 0xae, 0x23, 0xf6, 0x3b, 0x80, 0x81, 0x77, 0x33, 0xd9,
	0xf0, 0xd0, 0x0f, 0xbf, 0x9a, 0xaf, 0xa1, 0xba, 0xe4, 0xcc, 0xe3, 0xd2, 0x32, 0x4e, 0x8c, 0x6e,
	0xe3, 0xf4, 0x79, 0x2f, 0x2b, 0xec, 0x39, 0xea, 0x77, 0x44, 0x41, 0xfb, 0x33, 0x34, 0xb1, 0x68,
	0xc0, 0x59, 0xf0, 0x9e, 0x49, 0x2f, 0xda, 0xb3, 0x0c, 0xd3, 0x9a, 0x4a, 0x13, 0x97, 0x8e, 0x58,
	0x71, 0x19, 0x59, 0x07, 0x27, 0x25, 0x4c, 0x3e, 0xde, 0x49, 0x56, 0xef, 0xed, 0x0b, 0x68, 0x23,
	0x7d, 0xb6, 0x14, 0xdf, 0x47, 0x2c, 0xf4, 0x74, 0xee, 0xbe, 0x4b, 0xb4, 0xa0, 0x9a, 0x44, 0x5c,
	0x9e, 0x7b, 0x08, 0x37, 0xba, 0x47, 0xf6, 0x18, 0x3a, 0x77, 0x58, 0x7d, 0x77, 0x95, 0x17, 0x37,
	0xa7, 0x8d, 0x5f, 0xf8, 0x4c, 0x0c, 0xfc, 0x4f, 0xcb, 0x24, 0x27, 0xc6, 0x3c, 0x82, 0x4a, 0xe4,
	0x0a, 0xc9, 0xad, 0x12, 0x3e, 0x56, 0xec, 0x11, 0x1c, 0xef, 0x52, 0x0b, 0xe8, 0x1b, 0x40, 0x03,
	0x49, 0x53, 0xb1, 0x28, 0x22, 0xcf, 0x1e, 0x42, 0x6b, 0x87, 0x52, 0x40, 0xce, 0x14, 0x0e, 0xd5,
	0x9c, 0x88, 0x64, 0x11, 0xf0, 0xbc, 0x5e, 0xe1, 0xb3, 0x47, 0x80, 0xd4, 0xac, 0x4b, 0x3d, 0x7b,
	0xf4, 0x2a, 0xbf, 0xb4, 0x3b, 0xd8, 0x80, 0xb0, 0xb3, 0x98, 0xc9, 0xd8, 0xc1, 0x19, 0xdd, 0x17,
	0xfb, 0x0a, 0xe0, 0x4a, 0x88, 0xf8, 0xbf, 0x03, 0x6d, 0x3e, 0x85, 0xba, 0x4a, 0x9a, 0xb2, 0x38,
	0x5b, 0x4d, 0xf7, 0x69, 0xcc, 0xc3, 0x04, 0x0d, 0x66, 0x79, 0xed, 0x0d, 0xa8, 0x4f, 0x19, 0xa5,
	0x80, 0x19, 0xb8, 0x8b, 0xe5, 0xed, 0xf1, 0x40, 0x89, 0xf7, 0x1e, 0x4b, 0xad, 0x79, 0xc6, 0xf9,
	0x83, 0xce, 0xfc, 0xfd, 0x9a, 0x33, 0xca, 0x63, 0x6b, 0x1e, 0x43, 0x0d, 0x57, 0x73, 0x92, 0x20,
	0xc8, 0xbb, 0x4c, 0x03, 0x4a, 0xcc, 0x8d, 0xd3, 0xb6, 0x39, 0x74, 0x59, 0x2a, 0x5c, 0x01, 0xe1,
	0x7f, 0x10, 0x3f, 0x92, 0xa9, 0x93, 0x24, 0x7e, 0x90, 0xa9, 0x2f, 0xa1, 0x2e, 0xd2, 0x92, 0x7f,
	0x5d, 0xa2, 0x3f, 0x0c, 0x32, 0x3a, 0x23, 0x17, 0xd0, 0xfb, 0x06, 0xea, 0x2e, 0x22, 0xe6, 0xd7,
	0x1b, 0x3d, 0xbd, 0xad, 0xd3, 0xce, 0xb6, 0x50, 0xd9, 0xc1, 0x7c, 0x15, 0x33, 0x3b, 0xd0, 0x94,
	0x7c, 0xcd, 0xfc, 0x30, 0x6d, 0x49, 0x99, 0x36, 0x78, 0x46, 0x57, 0x40, 0xdf, 0x8d, 0x87, 0x89,
	0xc8, 0x3b, 0x33, 0x1f, 0xe8, 0x6c, 0x6a, 0x46, 0x81, 0xdb, 0xe8, 0xa7, 0xa1, 0xcd, 0xfe, 0xc6,
	0xe5, 0x3c, 0x91, 0x61, 0x5e, 0x3f, 0x9a, 0x50, 0x8e, 0xfd, 0x75, 0x7a, 0x92, 0x4d, 0x1b, 0x6a,
	0xd8, 0x4d, 0x32, 0xa7, 0x4c, 0xe6, 0xb4, 0xb7, 0x94, 0xbe, 0x0e, 0x98, 0x6d, 0x38, 0x74, 0x59,
	0xa8, 0xaf, 0x2c, 0xab, 0x82, 0x59, 0x75, 0xd3, 0x04, 0xd8, 0xe0, 0x18, 0x4d, 0xa4, 0x93, 0x44,
	0x4b, 0xab, 0x4a, 0xa8, 0x67, 0xd0, 0xc0, 0xb4, 0xac, 0x63, 0x56, 0x4d, 0x25, 0xda, 0xbf, 0x0c,
	0xfa, 0x38, 0xcc, 0x78, 0xe8, 0x0d, 0xd9, 0x9a, 0x9f, 0x87, 0x57, 0x7b, 0xdb, 0xd8, 0xc5, 0x35,
	0xe8, 0x73, 0xab, 0x8a, 0xd2, 0x39, 0xd9, 0x69, 0x9d, 0x73, 0x1b, 0x33, 0xdf, 0x42, 0xc3, 0x53,
	0xdf, 0xf3, 0x68, 0x45, 0xa9, 0xa5, 0xbf, 0xa9, 0x83, 0x6d, 0x50, 0xb5, 0x39, 0x42, 0x31, 0x5c,
	0x5e, 0x6a, 0x53, 0xca, 0x64, 0x0a, 0x6a, 0xf7, 0xa3, 0x29, 0x77, 0x45, 0x18, 0x72, 0x1c, 0x6e,
	0xb5, 0xc9, 0xca, 0xd9, 0xc1, 0xa8, 0xe4, 0x3c, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x4a,
	0x32, 0xa4, 0x8c, 0x08, 0x00, 0x00,
}
