// Code generated by protoc-gen-go.
// source: base.proto
// DO NOT EDIT!

/*
Package ddzproto is a generated protocol buffer package.

It is generated from these files:
	base.proto
	ddz_desk.proto
	ddz_hall.proto
	ddz_play.proto

It has these top-level messages:
	ProtoHeader
	WeixinInfo
	CardInfo
	PlayOptions
	RoomTypeInfo
	ComposeCard
	PlayerCard
	PlayerInfo
	DeskGameInfo
	Game_DissolveDesk
	Game_AckDissolveDesk
	Game_ReqDissolveDesk
	Game_AckReqDissolveDesk
	Game_LeaveDesk
	Game_AckLeaveDesk
	Game_Ready
	Game_AckReady
	Game_Message
	Game_SendMessage
	WinCoinInfo
	EndLotteryInfo
	Game_SendCurrentResult
	Game_SendEndLottery
	ServerInfo
	Game_QuickConn
	Game_AckQuickConn
	Game_Login
	Game_AckLogin
	Game_Notice
	Game_AckNotice
	Game_GameRecord
	BeanUserRecord
	BeanGameRecord
	Game_AckGameRecord
	Game_Feedback
	Game_CreateRoom
	Game_AckCreateRoom
	Game_EnterRoom
	Game_AckEnterRoom
	Game_Opening
	Game_DealCards
	Game_ExchangeCards
	Game_AckExchangeCards
	Game_DingQue
	DingQueEndBean
	Game_DingQueEnd
	Game_BroadcastBeginDingQue
	Game_BroadcastBeginExchange
	Game_GetInCard
	Game_SendOutCard
	Game_AckSendOutCard
	Game_ActPeng
	Game_AckActPeng
	Game_ActGang
	Game_AckActGang
	Game_ActHu
	Game_AckActHu
	Game_ActGuo
	Game_AckActGuo
	Game_OverTurn
	Game_SendGameInfo
*/
package ddzproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EProtoId int32

const (
	EProtoId_PID_QUICK_CONN     EProtoId = 1
	EProtoId_PID_QUICK_CONN_ACK EProtoId = 2
	EProtoId_PID_GAME_LOGIN     EProtoId = 3
	EProtoId_PID_GAME_LOGIN_ACK EProtoId = 4
	EProtoId_PID_CREATEROOM     EProtoId = 5
	EProtoId_PID_CREATEROOM_ACK EProtoId = 6
	EProtoId_PID_ENTER_ROOM     EProtoId = 7
	EProtoId_PID_ENTER_ROOM_ACK EProtoId = 8
	EProtoId_PID_SEND_GAMEINFO  EProtoId = 9
	EProtoId_PID_READY          EProtoId = 10
	EProtoId_PID_READY_ACK      EProtoId = 11
	EProtoId_PID_OPENING        EProtoId = 12
	EProtoId_PID_DEAL_CARDS     EProtoId = 13
	EProtoId_PID_CALL_DIZHU     EProtoId = 14
	EProtoId_PID_CALL_DIZHU_ACK EProtoId = 15
	// //////////////////////////////////////////
	// 欢乐斗地主
	EProtoId_PID_ROB_DIZHU           EProtoId = 16
	EProtoId_PID_ROB_DIZHU_ACK       EProtoId = 17
	EProtoId_PID_DOUBLE              EProtoId = 18
	EProtoId_PID_DOUBLE_ACK          EProtoId = 19
	EProtoId_PID_NOT_DOUBLE          EProtoId = 20
	EProtoId_PID_NOT_DOUBLE_ACK      EProtoId = 21
	EProtoId_PID_SHOW_HANDPOKERS     EProtoId = 22
	EProtoId_PID_SHOW_HANDPOKERS_ACK EProtoId = 23
	// //////////////////////////////////////////
	// 四川斗地主
	EProtoId_PID_MEN_ZHUA           EProtoId = 24
	EProtoId_PID_MEN_ZHUA_ACK       EProtoId = 25
	EProtoId_PID_LOOK_POKER         EProtoId = 26
	EProtoId_PID_LOOK_POKER_ACK     EProtoId = 27
	EProtoId_PID_DAO                EProtoId = 28
	EProtoId_PID_DAO_ACK            EProtoId = 29
	EProtoId_PID_LA                 EProtoId = 30
	EProtoId_PID_LA_ACK             EProtoId = 31
	EProtoId_PID_SEND_OUT_POKER     EProtoId = 32
	EProtoId_PID_SEND_OUT_POKER_ACK EProtoId = 33
	EProtoId_PID_GUO_POKER          EProtoId = 34
	EProtoId_PID_GUO_POKER_ACK      EProtoId = 35
	EProtoId_PID_OVERTURN           EProtoId = 36
	EProtoId_PID_CURRENTRESULT      EProtoId = 37
	EProtoId_PID_SENDENDLOTTERY     EProtoId = 38
	EProtoId_PID_DISSOLVE_DESK      EProtoId = 39
	EProtoId_PID_DISSOLVE_DESK_ACK  EProtoId = 40
	EProtoId_PID_LEAVE_DESK         EProtoId = 41
	EProtoId_PID_LEAVE_DESK_ACK     EProtoId = 42
	EProtoId_PID_MESSAGE            EProtoId = 43
	EProtoId_PID_SEND_MESSAGE       EProtoId = 44
	EProtoId_PID_GAME_GAMERECORD    EProtoId = 45
	EProtoId_PID_GAME_ACKGAMERECORD EProtoId = 46
)

var EProtoId_name = map[int32]string{
	1:  "PID_QUICK_CONN",
	2:  "PID_QUICK_CONN_ACK",
	3:  "PID_GAME_LOGIN",
	4:  "PID_GAME_LOGIN_ACK",
	5:  "PID_CREATEROOM",
	6:  "PID_CREATEROOM_ACK",
	7:  "PID_ENTER_ROOM",
	8:  "PID_ENTER_ROOM_ACK",
	9:  "PID_SEND_GAMEINFO",
	10: "PID_READY",
	11: "PID_READY_ACK",
	12: "PID_OPENING",
	13: "PID_DEAL_CARDS",
	14: "PID_CALL_DIZHU",
	15: "PID_CALL_DIZHU_ACK",
	16: "PID_ROB_DIZHU",
	17: "PID_ROB_DIZHU_ACK",
	18: "PID_DOUBLE",
	19: "PID_DOUBLE_ACK",
	20: "PID_NOT_DOUBLE",
	21: "PID_NOT_DOUBLE_ACK",
	22: "PID_SHOW_HANDPOKERS",
	23: "PID_SHOW_HANDPOKERS_ACK",
	24: "PID_MEN_ZHUA",
	25: "PID_MEN_ZHUA_ACK",
	26: "PID_LOOK_POKER",
	27: "PID_LOOK_POKER_ACK",
	28: "PID_DAO",
	29: "PID_DAO_ACK",
	30: "PID_LA",
	31: "PID_LA_ACK",
	32: "PID_SEND_OUT_POKER",
	33: "PID_SEND_OUT_POKER_ACK",
	34: "PID_GUO_POKER",
	35: "PID_GUO_POKER_ACK",
	36: "PID_OVERTURN",
	37: "PID_CURRENTRESULT",
	38: "PID_SENDENDLOTTERY",
	39: "PID_DISSOLVE_DESK",
	40: "PID_DISSOLVE_DESK_ACK",
	41: "PID_LEAVE_DESK",
	42: "PID_LEAVE_DESK_ACK",
	43: "PID_MESSAGE",
	44: "PID_SEND_MESSAGE",
	45: "PID_GAME_GAMERECORD",
	46: "PID_GAME_ACKGAMERECORD",
}
var EProtoId_value = map[string]int32{
	"PID_QUICK_CONN":          1,
	"PID_QUICK_CONN_ACK":      2,
	"PID_GAME_LOGIN":          3,
	"PID_GAME_LOGIN_ACK":      4,
	"PID_CREATEROOM":          5,
	"PID_CREATEROOM_ACK":      6,
	"PID_ENTER_ROOM":          7,
	"PID_ENTER_ROOM_ACK":      8,
	"PID_SEND_GAMEINFO":       9,
	"PID_READY":               10,
	"PID_READY_ACK":           11,
	"PID_OPENING":             12,
	"PID_DEAL_CARDS":          13,
	"PID_CALL_DIZHU":          14,
	"PID_CALL_DIZHU_ACK":      15,
	"PID_ROB_DIZHU":           16,
	"PID_ROB_DIZHU_ACK":       17,
	"PID_DOUBLE":              18,
	"PID_DOUBLE_ACK":          19,
	"PID_NOT_DOUBLE":          20,
	"PID_NOT_DOUBLE_ACK":      21,
	"PID_SHOW_HANDPOKERS":     22,
	"PID_SHOW_HANDPOKERS_ACK": 23,
	"PID_MEN_ZHUA":            24,
	"PID_MEN_ZHUA_ACK":        25,
	"PID_LOOK_POKER":          26,
	"PID_LOOK_POKER_ACK":      27,
	"PID_DAO":                 28,
	"PID_DAO_ACK":             29,
	"PID_LA":                  30,
	"PID_LA_ACK":              31,
	"PID_SEND_OUT_POKER":      32,
	"PID_SEND_OUT_POKER_ACK":  33,
	"PID_GUO_POKER":           34,
	"PID_GUO_POKER_ACK":       35,
	"PID_OVERTURN":            36,
	"PID_CURRENTRESULT":       37,
	"PID_SENDENDLOTTERY":      38,
	"PID_DISSOLVE_DESK":       39,
	"PID_DISSOLVE_DESK_ACK":   40,
	"PID_LEAVE_DESK":          41,
	"PID_LEAVE_DESK_ACK":      42,
	"PID_MESSAGE":             43,
	"PID_SEND_MESSAGE":        44,
	"PID_GAME_GAMERECORD":     45,
	"PID_GAME_ACKGAMERECORD":  46,
}

func (x EProtoId) Enum() *EProtoId {
	p := new(EProtoId)
	*p = x
	return p
}
func (x EProtoId) String() string {
	return proto.EnumName(EProtoId_name, int32(x))
}
func (x *EProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProtoId_value, data, "EProtoId")
	if err != nil {
		return err
	}
	*x = EProtoId(value)
	return nil
}
func (EProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ErrorCode int32

const (
	ErrorCode_EC_SUCCESS ErrorCode = 0
	// -101   -200	游戏异常
	ErrorCode_EC_CREATE_DESK_DIAMOND_NOTENOUGH ErrorCode = -101
	ErrorCode_EC_CREATE_DESK_USER_NOTFOUND     ErrorCode = -102
	ErrorCode_EC_INTO_DESK_NOTFOUND            ErrorCode = -103
	ErrorCode_EC_GAME_READY_REPEAT             ErrorCode = -110
	ErrorCode_EC_GAME_READY_CHIP_NOT_ENOUGH    ErrorCode = -111
)

var ErrorCode_name = map[int32]string{
	0:    "EC_SUCCESS",
	-101: "EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "EC_CREATE_DESK_USER_NOTFOUND",
	-103: "EC_INTO_DESK_NOTFOUND",
	-110: "EC_GAME_READY_REPEAT",
	-111: "EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var ErrorCode_value = map[string]int32{
	"EC_SUCCESS":                       0,
	"EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"EC_INTO_DESK_NOTFOUND":            -103,
	"EC_GAME_READY_REPEAT":             -110,
	"EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}
func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (x *ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorCode_value, data, "ErrorCode")
	if err != nil {
		return err
	}
	*x = ErrorCode(value)
	return nil
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 房间类型信息：包含房间类型和对应的局数、封顶、玩法等信息
// 房间类型枚举
type MJRoomType int32

const (
	MJRoomType_roomType_xueZhanDaoDi    MJRoomType = 0
	MJRoomType_roomType_sanRenLiangFang MJRoomType = 1
	MJRoomType_roomType_siRenLiangFang  MJRoomType = 2
	MJRoomType_roomType_deYangMaJiang   MJRoomType = 3
	MJRoomType_roomType_daoDaoHu        MJRoomType = 4
	MJRoomType_roomType_xueLiuChengHe   MJRoomType = 5
)

var MJRoomType_name = map[int32]string{
	0: "roomType_xueZhanDaoDi",
	1: "roomType_sanRenLiangFang",
	2: "roomType_siRenLiangFang",
	3: "roomType_deYangMaJiang",
	4: "roomType_daoDaoHu",
	5: "roomType_xueLiuChengHe",
}
var MJRoomType_value = map[string]int32{
	"roomType_xueZhanDaoDi":    0,
	"roomType_sanRenLiangFang": 1,
	"roomType_siRenLiangFang":  2,
	"roomType_deYangMaJiang":   3,
	"roomType_daoDaoHu":        4,
	"roomType_xueLiuChengHe":   5,
}

func (x MJRoomType) Enum() *MJRoomType {
	p := new(MJRoomType)
	*p = x
	return p
}
func (x MJRoomType) String() string {
	return proto.EnumName(MJRoomType_name, int32(x))
}
func (x *MJRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJRoomType_value, data, "MJRoomType")
	if err != nil {
		return err
	}
	*x = MJRoomType(value)
	return nil
}
func (MJRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 麻将花色
type MahjongColor int32

const (
	MahjongColor_WAN  MahjongColor = 1
	MahjongColor_TIAO MahjongColor = 2
	MahjongColor_TONG MahjongColor = 3
)

var MahjongColor_name = map[int32]string{
	1: "WAN",
	2: "TIAO",
	3: "TONG",
}
var MahjongColor_value = map[string]int32{
	"WAN":  1,
	"TIAO": 2,
	"TONG": 3,
}

func (x MahjongColor) Enum() *MahjongColor {
	p := new(MahjongColor)
	*p = x
	return p
}
func (x MahjongColor) String() string {
	return proto.EnumName(MahjongColor_name, int32(x))
}
func (x *MahjongColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MahjongColor_value, data, "MahjongColor")
	if err != nil {
		return err
	}
	*x = MahjongColor(value)
	return nil
}
func (MahjongColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 杠的类型
type GangType int32

const (
	GangType_G_MINGGANG GangType = 1
	GangType_G_BAGANG   GangType = 2
	GangType_G_ANGANG   GangType = 3
)

var GangType_name = map[int32]string{
	1: "G_MINGGANG",
	2: "G_BAGANG",
	3: "G_ANGANG",
}
var GangType_value = map[string]int32{
	"G_MINGGANG": 1,
	"G_BAGANG":   2,
	"G_ANGANG":   3,
}

func (x GangType) Enum() *GangType {
	p := new(GangType)
	*p = x
	return p
}
func (x GangType) String() string {
	return proto.EnumName(GangType_name, int32(x))
}
func (x *GangType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GangType_value, data, "GangType")
	if err != nil {
		return err
	}
	*x = GangType(value)
	return nil
}
func (GangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 碰杠类型(客户端显示用)
type ComposeCardType int32

const (
	ComposeCardType_C_MINGGANG ComposeCardType = 1
	ComposeCardType_C_BAGANG   ComposeCardType = 2
	ComposeCardType_C_ANGANG   ComposeCardType = 3
	ComposeCardType_C_PENG     ComposeCardType = 4
)

var ComposeCardType_name = map[int32]string{
	1: "C_MINGGANG",
	2: "C_BAGANG",
	3: "C_ANGANG",
	4: "C_PENG",
}
var ComposeCardType_value = map[string]int32{
	"C_MINGGANG": 1,
	"C_BAGANG":   2,
	"C_ANGANG":   3,
	"C_PENG":     4,
}

func (x ComposeCardType) Enum() *ComposeCardType {
	p := new(ComposeCardType)
	*p = x
	return p
}
func (x ComposeCardType) String() string {
	return proto.EnumName(ComposeCardType_name, int32(x))
}
func (x *ComposeCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ComposeCardType_value, data, "ComposeCardType")
	if err != nil {
		return err
	}
	*x = ComposeCardType(value)
	return nil
}
func (ComposeCardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 胡牌的类型
type DdzPaiType int32

const (
	DdzPaiType_ERRORCARD          DdzPaiType = 0
	DdzPaiType_SINGLECARD         DdzPaiType = 1
	DdzPaiType_DOUBLECARD         DdzPaiType = 2
	DdzPaiType_THREECARD          DdzPaiType = 3
	DdzPaiType_BOMBCARD           DdzPaiType = 4
	DdzPaiType_THREEONECARD       DdzPaiType = 5
	DdzPaiType_THREETWOCARD       DdzPaiType = 6
	DdzPaiType_BOMBTWOCARD        DdzPaiType = 7
	DdzPaiType_BOMBTWOOOCARD      DdzPaiType = 8
	DdzPaiType_CONNECTCARD        DdzPaiType = 9
	DdzPaiType_COMPANYCARD        DdzPaiType = 10
	DdzPaiType_AIRCRAFTCARD       DdzPaiType = 11
	DdzPaiType_AIRCRAFTSINGLECARD DdzPaiType = 12
	DdzPaiType_AIRCRAFTDOUBLECARD DdzPaiType = 13
	DdzPaiType_SUPERBOMB          DdzPaiType = 14
	DdzPaiType_FOURWITHONEDOUBLE  DdzPaiType = 15
)

var DdzPaiType_name = map[int32]string{
	0:  "ERRORCARD",
	1:  "SINGLECARD",
	2:  "DOUBLECARD",
	3:  "THREECARD",
	4:  "BOMBCARD",
	5:  "THREEONECARD",
	6:  "THREETWOCARD",
	7:  "BOMBTWOCARD",
	8:  "BOMBTWOOOCARD",
	9:  "CONNECTCARD",
	10: "COMPANYCARD",
	11: "AIRCRAFTCARD",
	12: "AIRCRAFTSINGLECARD",
	13: "AIRCRAFTDOUBLECARD",
	14: "SUPERBOMB",
	15: "FOURWITHONEDOUBLE",
}
var DdzPaiType_value = map[string]int32{
	"ERRORCARD":          0,
	"SINGLECARD":         1,
	"DOUBLECARD":         2,
	"THREECARD":          3,
	"BOMBCARD":           4,
	"THREEONECARD":       5,
	"THREETWOCARD":       6,
	"BOMBTWOCARD":        7,
	"BOMBTWOOOCARD":      8,
	"CONNECTCARD":        9,
	"COMPANYCARD":        10,
	"AIRCRAFTCARD":       11,
	"AIRCRAFTSINGLECARD": 12,
	"AIRCRAFTDOUBLECARD": 13,
	"SUPERBOMB":          14,
	"FOURWITHONEDOUBLE":  15,
}

func (x DdzPaiType) Enum() *DdzPaiType {
	p := new(DdzPaiType)
	*p = x
	return p
}
func (x DdzPaiType) String() string {
	return proto.EnumName(DdzPaiType_name, int32(x))
}
func (x *DdzPaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzPaiType_value, data, "DdzPaiType")
	if err != nil {
		return err
	}
	*x = DdzPaiType(value)
	return nil
}
func (DdzPaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type MJUserGameStatus int32

const (
	MJUserGameStatus_U_INIT     MJUserGameStatus = 0
	MJUserGameStatus_U_DINGQUE  MJUserGameStatus = 1
	MJUserGameStatus_U_EXCHANGE MJUserGameStatus = 2
	MJUserGameStatus_U_PLAYING  MJUserGameStatus = 3
	MJUserGameStatus_U_FINISH   MJUserGameStatus = 4
)

var MJUserGameStatus_name = map[int32]string{
	0: "U_INIT",
	1: "U_DINGQUE",
	2: "U_EXCHANGE",
	3: "U_PLAYING",
	4: "U_FINISH",
}
var MJUserGameStatus_value = map[string]int32{
	"U_INIT":     0,
	"U_DINGQUE":  1,
	"U_EXCHANGE": 2,
	"U_PLAYING":  3,
	"U_FINISH":   4,
}

func (x MJUserGameStatus) Enum() *MJUserGameStatus {
	p := new(MJUserGameStatus)
	*p = x
	return p
}
func (x MJUserGameStatus) String() string {
	return proto.EnumName(MJUserGameStatus_name, int32(x))
}
func (x *MJUserGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJUserGameStatus_value, data, "MJUserGameStatus")
	if err != nil {
		return err
	}
	*x = MJUserGameStatus(value)
	return nil
}
func (MJUserGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DeskGameStatus int32

const (
	DeskGameStatus_INIT     DeskGameStatus = 0
	DeskGameStatus_FAPAI    DeskGameStatus = 1
	DeskGameStatus_EXCHANGE DeskGameStatus = 2
	DeskGameStatus_DINGQUE  DeskGameStatus = 3
	DeskGameStatus_PLAYING  DeskGameStatus = 4
	DeskGameStatus_FINISH   DeskGameStatus = 5
)

var DeskGameStatus_name = map[int32]string{
	0: "INIT",
	1: "FAPAI",
	2: "EXCHANGE",
	3: "DINGQUE",
	4: "PLAYING",
	5: "FINISH",
}
var DeskGameStatus_value = map[string]int32{
	"INIT":     0,
	"FAPAI":    1,
	"EXCHANGE": 2,
	"DINGQUE":  3,
	"PLAYING":  4,
	"FINISH":   5,
}

func (x DeskGameStatus) Enum() *DeskGameStatus {
	p := new(DeskGameStatus)
	*p = x
	return p
}
func (x DeskGameStatus) String() string {
	return proto.EnumName(DeskGameStatus_name, int32(x))
}
func (x *DeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeskGameStatus_value, data, "DeskGameStatus")
	if err != nil {
		return err
	}
	*x = DeskGameStatus(value)
	return nil
}
func (DeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// ProtoHeader 需要在每个 Message 中作为第一个字段
type ProtoHeader struct {
	Version          *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Code             *int32  `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	Error            *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProtoHeader) Reset()                    { *m = ProtoHeader{} }
func (m *ProtoHeader) String() string            { return proto.CompactTextString(m) }
func (*ProtoHeader) ProtoMessage()               {}
func (*ProtoHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProtoHeader) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ProtoHeader) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ProtoHeader) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ProtoHeader) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

// 微信信息
type WeixinInfo struct {
	OpenId           *string `protobuf:"bytes,1,opt,name=openId" json:"openId,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	HeadUrl          *string `protobuf:"bytes,3,opt,name=headUrl" json:"headUrl,omitempty"`
	Sex              *int32  `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
	City             *string `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	UnionId          *string `protobuf:"bytes,6,opt,name=unionId" json:"unionId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WeixinInfo) Reset()                    { *m = WeixinInfo{} }
func (m *WeixinInfo) String() string            { return proto.CompactTextString(m) }
func (*WeixinInfo) ProtoMessage()               {}
func (*WeixinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WeixinInfo) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *WeixinInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WeixinInfo) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *WeixinInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *WeixinInfo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *WeixinInfo) GetUnionId() string {
	if m != nil && m.UnionId != nil {
		return *m.UnionId
	}
	return ""
}

// 麻将牌
type CardInfo struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id               *int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CardInfo) Reset()                    { *m = CardInfo{} }
func (m *CardInfo) String() string            { return proto.CompactTextString(m) }
func (*CardInfo) ProtoMessage()               {}
func (*CardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CardInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CardInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 玩法：包括自摸、点炮、以及可多选的玩法
type PlayOptions struct {
	ZiMoRadio        *int32  `protobuf:"varint,1,opt,name=ziMoRadio" json:"ziMoRadio,omitempty"`
	DianGangHuaRadio *int32  `protobuf:"varint,2,opt,name=dianGangHuaRadio" json:"dianGangHuaRadio,omitempty"`
	OthersCheckBox   []int32 `protobuf:"varint,3,rep,name=othersCheckBox" json:"othersCheckBox,omitempty"`
	HuRadio          *int32  `protobuf:"varint,4,opt,name=huRadio" json:"huRadio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayOptions) Reset()                    { *m = PlayOptions{} }
func (m *PlayOptions) String() string            { return proto.CompactTextString(m) }
func (*PlayOptions) ProtoMessage()               {}
func (*PlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PlayOptions) GetZiMoRadio() int32 {
	if m != nil && m.ZiMoRadio != nil {
		return *m.ZiMoRadio
	}
	return 0
}

func (m *PlayOptions) GetDianGangHuaRadio() int32 {
	if m != nil && m.DianGangHuaRadio != nil {
		return *m.DianGangHuaRadio
	}
	return 0
}

func (m *PlayOptions) GetOthersCheckBox() []int32 {
	if m != nil {
		return m.OthersCheckBox
	}
	return nil
}

func (m *PlayOptions) GetHuRadio() int32 {
	if m != nil && m.HuRadio != nil {
		return *m.HuRadio
	}
	return 0
}

type RoomTypeInfo struct {
	MjRoomType       *MJRoomType  `protobuf:"varint,1,opt,name=mjRoomType,enum=ddzproto.MJRoomType" json:"mjRoomType,omitempty"`
	BoardsCout       *int32       `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	CapMax           *int64       `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	PlayOptions      *PlayOptions `protobuf:"bytes,4,opt,name=playOptions" json:"playOptions,omitempty"`
	CardsNum         *int32       `protobuf:"varint,5,opt,name=cardsNum" json:"cardsNum,omitempty"`
	Settlement       *int32       `protobuf:"varint,6,opt,name=settlement" json:"settlement,omitempty"`
	BaseValue        *int64       `protobuf:"varint,7,opt,name=baseValue" json:"baseValue,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RoomTypeInfo) Reset()                    { *m = RoomTypeInfo{} }
func (m *RoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomTypeInfo) ProtoMessage()               {}
func (*RoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RoomTypeInfo) GetMjRoomType() MJRoomType {
	if m != nil && m.MjRoomType != nil {
		return *m.MjRoomType
	}
	return MJRoomType_roomType_xueZhanDaoDi
}

func (m *RoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *RoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *RoomTypeInfo) GetPlayOptions() *PlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetCardsNum() int32 {
	if m != nil && m.CardsNum != nil {
		return *m.CardsNum
	}
	return 0
}

func (m *RoomTypeInfo) GetSettlement() int32 {
	if m != nil && m.Settlement != nil {
		return *m.Settlement
	}
	return 0
}

func (m *RoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

type ComposeCard struct {
	Value            *int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type             *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ComposeCard) Reset()                    { *m = ComposeCard{} }
func (m *ComposeCard) String() string            { return proto.CompactTextString(m) }
func (*ComposeCard) ProtoMessage()               {}
func (*ComposeCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ComposeCard) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ComposeCard) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type PlayerCard struct {
	HandCard         []*CardInfo    `protobuf:"bytes,1,rep,name=handCard" json:"handCard,omitempty"`
	ComposeCard      []*ComposeCard `protobuf:"bytes,2,rep,name=composeCard" json:"composeCard,omitempty"`
	OutCard          []int32        `protobuf:"varint,3,rep,name=outCard" json:"outCard,omitempty"`
	HuCard           *int32         `protobuf:"varint,4,opt,name=huCard" json:"huCard,omitempty"`
	UserId           *uint32        `protobuf:"varint,5,opt,name=UserId" json:"UserId,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PlayerCard) Reset()                    { *m = PlayerCard{} }
func (m *PlayerCard) String() string            { return proto.CompactTextString(m) }
func (*PlayerCard) ProtoMessage()               {}
func (*PlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PlayerCard) GetHandCard() []*CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *PlayerCard) GetComposeCard() []*ComposeCard {
	if m != nil {
		return m.ComposeCard
	}
	return nil
}

func (m *PlayerCard) GetOutCard() []int32 {
	if m != nil {
		return m.OutCard
	}
	return nil
}

func (m *PlayerCard) GetHuCard() int32 {
	if m != nil && m.HuCard != nil {
		return *m.HuCard
	}
	return 0
}

func (m *PlayerCard) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type PlayerInfo struct {
	IsBanker         *bool       `protobuf:"varint,1,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerCard       *PlayerCard `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	Coin             *int64      `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string     `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32      `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32     `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool       `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32      `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	BDingQue         *int32      `protobuf:"varint,9,opt,name=bDingQue" json:"bDingQue,omitempty"`
	BExchanged       *int32      `protobuf:"varint,10,opt,name=bExchanged" json:"bExchanged,omitempty"`
	NHuPai           *int32      `protobuf:"varint,11,opt,name=nHuPai" json:"nHuPai,omitempty"`
	QuePai           *int32      `protobuf:"varint,12,opt,name=quePai" json:"quePai,omitempty"`
	WxInfo           *WeixinInfo `protobuf:"bytes,13,opt,name=wxInfo" json:"wxInfo,omitempty"`
	GameStatus       *int32      `protobuf:"varint,14,opt,name=GameStatus" json:"GameStatus,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *PlayerInfo) GetPlayerCard() *PlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

func (m *PlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *PlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *PlayerInfo) GetBDingQue() int32 {
	if m != nil && m.BDingQue != nil {
		return *m.BDingQue
	}
	return 0
}

func (m *PlayerInfo) GetBExchanged() int32 {
	if m != nil && m.BExchanged != nil {
		return *m.BExchanged
	}
	return 0
}

func (m *PlayerInfo) GetNHuPai() int32 {
	if m != nil && m.NHuPai != nil {
		return *m.NHuPai
	}
	return 0
}

func (m *PlayerInfo) GetQuePai() int32 {
	if m != nil && m.QuePai != nil {
		return *m.QuePai
	}
	return 0
}

func (m *PlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *PlayerInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

type DeskGameInfo struct {
	GameStatus       *int32        `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *RoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32        `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32       `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32        `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	DelayTime        *int32        `protobuf:"varint,6,opt,name=delayTime" json:"delayTime,omitempty"`
	NInitActionTime  *int32        `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32        `protobuf:"varint,8,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	InitRoomCoin     *int64        `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32        `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32        `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string       `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RemainCards      *int32        `protobuf:"varint,13,opt,name=remainCards" json:"remainCards,omitempty"`
	Banker           *uint32       `protobuf:"varint,14,opt,name=Banker" json:"Banker,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DeskGameInfo) Reset()                    { *m = DeskGameInfo{} }
func (m *DeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*DeskGameInfo) ProtoMessage()               {}
func (*DeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *DeskGameInfo) GetRoomTypeInfo() *RoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *DeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *DeskGameInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *DeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *DeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *DeskGameInfo) GetRemainCards() int32 {
	if m != nil && m.RemainCards != nil {
		return *m.RemainCards
	}
	return 0
}

func (m *DeskGameInfo) GetBanker() uint32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

func init() {
	proto.RegisterType((*ProtoHeader)(nil), "ddzproto.ProtoHeader")
	proto.RegisterType((*WeixinInfo)(nil), "ddzproto.WeixinInfo")
	proto.RegisterType((*CardInfo)(nil), "ddzproto.CardInfo")
	proto.RegisterType((*PlayOptions)(nil), "ddzproto.PlayOptions")
	proto.RegisterType((*RoomTypeInfo)(nil), "ddzproto.RoomTypeInfo")
	proto.RegisterType((*ComposeCard)(nil), "ddzproto.ComposeCard")
	proto.RegisterType((*PlayerCard)(nil), "ddzproto.PlayerCard")
	proto.RegisterType((*PlayerInfo)(nil), "ddzproto.PlayerInfo")
	proto.RegisterType((*DeskGameInfo)(nil), "ddzproto.DeskGameInfo")
	proto.RegisterEnum("ddzproto.EProtoId", EProtoId_name, EProtoId_value)
	proto.RegisterEnum("ddzproto.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("ddzproto.MJRoomType", MJRoomType_name, MJRoomType_value)
	proto.RegisterEnum("ddzproto.MahjongColor", MahjongColor_name, MahjongColor_value)
	proto.RegisterEnum("ddzproto.GangType", GangType_name, GangType_value)
	proto.RegisterEnum("ddzproto.ComposeCardType", ComposeCardType_name, ComposeCardType_value)
	proto.RegisterEnum("ddzproto.DdzPaiType", DdzPaiType_name, DdzPaiType_value)
	proto.RegisterEnum("ddzproto.MJUserGameStatus", MJUserGameStatus_name, MJUserGameStatus_value)
	proto.RegisterEnum("ddzproto.DeskGameStatus", DeskGameStatus_name, DeskGameStatus_value)
}

var fileDescriptor0 = []byte{
	// 1705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x56, 0x4b, 0x72, 0xdb, 0x46,
	0x13, 0xfe, 0xf9, 0x12, 0xc9, 0x21, 0x29, 0x8d, 0x60, 0x49, 0xa6, 0x5f, 0x7f, 0x6c, 0xc6, 0x49,
	0x6c, 0xda, 0xd6, 0xc2, 0xa9, 0xca, 0x1e, 0x02, 0x46, 0x24, 0x2c, 0x12, 0x43, 0x83, 0x84, 0x15,
	0x79, 0x83, 0x82, 0x48, 0x44, 0x82, 0x25, 0x01, 0x0c, 0x48, 0xda, 0x92, 0x2f, 0x91, 0x4a, 0x76,
	0x49, 0xf6, 0x59, 0x64, 0x97, 0x23, 0xe4, 0x04, 0x39, 0x40, 0x2e, 0x90, 0x5b, 0x24, 0x3d, 0x0d,
	0x0c, 0x00, 0xf9, 0x51, 0xb6, 0x8b, 0xd3, 0xf3, 0x4d, 0x7f, 0xdd, 0x5f, 0x77, 0x0f, 0x86, 0x90,
	0x63, 0x77, 0xe1, 0xed, 0xce, 0xa3, 0x70, 0x19, 0x2a, 0xb5, 0xd9, 0xec, 0x3d, 0xfe, 0xea, 0x1c,
	0x90, 0xc6, 0x48, 0xfc, 0xe8, 0x7b, 0xee, 0xcc, 0x8b, 0x94, 0x0d, 0x52, 0x7d, 0xeb, 0x45, 0x0b,
	0x3f, 0x0c, 0xda, 0x85, 0xfb, 0x85, 0x47, 0x75, 0x65, 0x9d, 0xac, 0xad, 0x16, 0x5e, 0x64, 0xcc,
	0xda, 0x45, 0x58, 0xb7, 0x94, 0x26, 0x29, 0x4f, 0xc3, 0x99, 0xd7, 0x2e, 0xc1, 0xaa, 0xa2, 0xb4,
	0x48, 0xc5, 0x8b, 0xa2, 0x30, 0x6a, 0x97, 0x05, 0xb8, 0x73, 0x46, 0xc8, 0xa1, 0xe7, 0x5f, 0xfa,
	0x81, 0x11, 0x7c, 0x17, 0x8a, 0xa3, 0xe1, 0xdc, 0x0b, 0xe0, 0x68, 0xec, 0x8a, 0x92, 0x5a, 0xe0,
	0x4f, 0xcf, 0x4c, 0xf7, 0xc2, 0x43, 0x67, 0x75, 0xc1, 0x76, 0x0a, 0xbc, 0x76, 0x74, 0x8e, 0xfe,
	0xea, 0x4a, 0x83, 0x94, 0x16, 0xde, 0x25, 0x7a, 0xab, 0x20, 0x95, 0xbf, 0xbc, 0x6a, 0x57, 0x24,
	0x76, 0x15, 0x40, 0x5c, 0xe0, 0x6e, 0x0d, 0xc9, 0xbe, 0x26, 0x35, 0xcd, 0x8d, 0x66, 0x48, 0x05,
	0xd0, 0xe5, 0xd5, 0xdc, 0x43, 0x22, 0x8c, 0xea, 0xad, 0x7b, 0xbe, 0x8a, 0x59, 0x2a, 0x0a, 0x21,
	0x45, 0x7f, 0x16, 0x07, 0xdc, 0x99, 0x42, 0xba, 0xe7, 0xee, 0x15, 0x9f, 0x2f, 0xc1, 0xd5, 0x42,
	0xd9, 0x24, 0xf5, 0xf7, 0xfe, 0x30, 0xb4, 0xdc, 0x99, 0x1f, 0x26, 0x87, 0xdb, 0x84, 0xce, 0x7c,
	0x37, 0xe8, 0xb9, 0xc1, 0x49, 0x7f, 0xe5, 0xc6, 0x3b, 0xb1, 0x9f, 0x1d, 0xb2, 0x1e, 0x2e, 0x4f,
	0x41, 0x1d, 0xed, 0xd4, 0x9b, 0x9e, 0xed, 0x85, 0x97, 0xe0, 0xb3, 0x04, 0x76, 0x91, 0xc5, 0x2a,
	0x06, 0x62, 0xe0, 0x9d, 0x3f, 0x0b, 0xa4, 0x69, 0x85, 0xe1, 0xc5, 0x04, 0x42, 0xc2, 0xf0, 0x1e,
	0x11, 0x72, 0xf1, 0x46, 0x5a, 0x90, 0x67, 0xfd, 0xf9, 0xd6, 0xae, 0xac, 0xc1, 0xee, 0xf0, 0x85,
	0xdc, 0x53, 0x20, 0xd8, 0xe3, 0x10, 0xb2, 0x5a, 0x68, 0xe1, 0x6a, 0x99, 0xf0, 0x82, 0x8e, 0x53,
	0x77, 0x3e, 0x74, 0x2f, 0x31, 0x87, 0x92, 0xd2, 0x25, 0x8d, 0x79, 0x96, 0x03, 0x72, 0x36, 0x9e,
	0x6f, 0x67, 0xee, 0xf2, 0x09, 0x82, 0xe6, 0x53, 0xe1, 0xce, 0x5c, 0x5d, 0xa0, 0x8e, 0x15, 0xc1,
	0xb0, 0xf0, 0x96, 0xcb, 0x73, 0xef, 0xc2, 0x0b, 0x96, 0x28, 0x65, 0x45, 0xc8, 0x20, 0x9a, 0xe3,
	0x15, 0x8a, 0x56, 0x15, 0x24, 0x1d, 0x20, 0xd1, 0xc2, 0x8b, 0x79, 0xb8, 0xf0, 0x84, 0xc8, 0x99,
	0xa4, 0x05, 0x59, 0x1a, 0xd4, 0x1b, 0x03, 0xec, 0xfc, 0x50, 0x20, 0x44, 0x90, 0x7a, 0x11, 0x62,
	0x1f, 0x92, 0xda, 0xa9, 0x1b, 0xcc, 0xc4, 0x6f, 0x80, 0x97, 0x20, 0x38, 0x25, 0x0b, 0x2e, 0x2d,
	0x19, 0x10, 0x4c, 0x33, 0x02, 0xf0, 0x54, 0xba, 0x9e, 0x45, 0x9e, 0x1d, 0x14, 0x06, 0x39, 0x10,
	0x17, 0x4b, 0x0e, 0x92, 0x9c, 0xae, 0x70, 0x5d, 0x96, 0x12, 0xd9, 0x71, 0x97, 0x8a, 0x24, 0x5b,
	0x9d, 0xdf, 0x8a, 0x32, 0x22, 0xe4, 0x02, 0x15, 0xfc, 0xc5, 0x9e, 0x1b, 0x9c, 0x79, 0x11, 0x26,
	0x50, 0x13, 0x15, 0x99, 0xa7, 0x11, 0x63, 0x1a, 0x8d, 0x7c, 0x45, 0x72, 0xd9, 0x60, 0xc3, 0xfb,
	0x41, 0xa2, 0x7d, 0xbe, 0x87, 0xcb, 0xf9, 0x96, 0xad, 0xc8, 0x38, 0x92, 0x69, 0x59, 0xc3, 0x69,
	0x81, 0xc0, 0xfd, 0x05, 0x7f, 0x17, 0x00, 0x6f, 0x15, 0x79, 0x01, 0x70, 0x6c, 0x41, 0xcb, 0x5f,
	0xb5, 0x6b, 0x78, 0x00, 0xfc, 0x1d, 0xeb, 0x7e, 0x70, 0xf2, 0x12, 0xa4, 0xad, 0xcb, 0xfa, 0x1c,
	0xb3, 0xcb, 0x29, 0x28, 0x78, 0xe2, 0xcd, 0xda, 0x44, 0xba, 0x0d, 0xfa, 0xab, 0x91, 0xeb, 0xb7,
	0x1b, 0x72, 0xfd, 0xfd, 0xca, 0x13, 0xeb, 0x26, 0xae, 0x1f, 0x92, 0xb5, 0x77, 0x97, 0x22, 0xd3,
	0x76, 0xeb, 0xc3, 0x4c, 0x72, 0xf3, 0x08, 0x9e, 0x7b, 0x10, 0xf7, 0x78, 0xe9, 0x2e, 0x57, 0x8b,
	0xf6, 0x3a, 0x96, 0xee, 0xaf, 0x22, 0x69, 0xea, 0xde, 0xe2, 0x4c, 0x6c, 0x7c, 0x02, 0x14, 0x57,
	0xfb, 0x29, 0x69, 0x46, 0xb9, 0x76, 0x4e, 0xe4, 0xda, 0xc9, 0x48, 0xae, 0x35, 0x3b, 0x34, 0x53,
	0x2c, 0xad, 0xe8, 0xb9, 0xf8, 0x9a, 0xd8, 0x22, 0x4d, 0x77, 0xba, 0xf4, 0xdf, 0x7a, 0x49, 0x91,
	0xca, 0x28, 0x0e, 0x50, 0x09, 0x6b, 0x18, 0x4c, 0x7c, 0x50, 0xb3, 0x22, 0x3b, 0x71, 0xe6, 0xc1,
	0x69, 0x34, 0xc5, 0xcd, 0x79, 0x93, 0x6c, 0x40, 0xfc, 0xfe, 0x52, 0xcd, 0xb0, 0x55, 0x39, 0x8f,
	0xb8, 0xa1, 0xa7, 0x07, 0x6a, 0x92, 0xcd, 0x07, 0xb3, 0x08, 0x4a, 0x13, 0x95, 0xab, 0x63, 0xe5,
	0xb6, 0x49, 0x6b, 0xba, 0x8a, 0x22, 0x51, 0x59, 0x98, 0x2d, 0x68, 0x7d, 0x22, 0x9d, 0x2c, 0xc3,
	0xa5, 0x7b, 0x9e, 0xd9, 0x1b, 0xb2, 0x0c, 0x22, 0x67, 0xc8, 0xe1, 0x18, 0x8a, 0xd7, 0xc4, 0x52,
	0xdf, 0x20, 0x8d, 0xc8, 0xbb, 0x70, 0xfd, 0x40, 0x34, 0xc6, 0x02, 0xb5, 0xc6, 0x5a, 0x24, 0x9d,
	0x25, 0x14, 0x6d, 0x75, 0xff, 0xae, 0x92, 0x1a, 0xc3, 0x2b, 0xd5, 0x98, 0x81, 0x97, 0xf5, 0x91,
	0xa1, 0x3b, 0x2f, 0x6d, 0x43, 0x3b, 0x70, 0x34, 0x6e, 0x9a, 0xb4, 0x00, 0x8c, 0xca, 0x75, 0x9b,
	0xa3, 0x6a, 0x07, 0xb4, 0x28, 0xb1, 0x3d, 0x75, 0xc8, 0x9c, 0x01, 0xef, 0x19, 0x26, 0x2d, 0x49,
	0x6c, 0x66, 0x43, 0x6c, 0x59, 0x62, 0x35, 0x8b, 0xa9, 0x13, 0x66, 0x71, 0x3e, 0xa4, 0x15, 0x89,
	0xcd, 0x6c, 0x88, 0x5d, 0x93, 0x58, 0x66, 0x82, 0xd5, 0x41, 0x6c, 0x55, 0x62, 0x33, 0x1b, 0x62,
	0x6b, 0x20, 0xd2, 0xa6, 0xb0, 0x8f, 0x99, 0x19, 0x93, 0x1a, 0xe6, 0x3e, 0xa7, 0x75, 0x98, 0xfe,
	0xba, 0x30, 0x83, 0x67, 0xfd, 0x88, 0x12, 0x28, 0x52, 0x2b, 0x5d, 0xe2, 0xc1, 0x06, 0x34, 0x7a,
	0x43, 0x98, 0xf8, 0x88, 0x99, 0x86, 0xd9, 0xa3, 0x4d, 0xc9, 0xaa, 0x33, 0x75, 0xe0, 0x68, 0xaa,
	0xa5, 0x8f, 0x69, 0x2b, 0x8d, 0x5a, 0x1d, 0x0c, 0x1c, 0xdd, 0x78, 0xdd, 0xb7, 0xe9, 0x7a, 0x1a,
	0x75, 0x6a, 0x43, 0x87, 0x1b, 0x29, 0x07, 0xdf, 0x4b, 0xa0, 0x54, 0x06, 0x97, 0x9a, 0x10, 0xb9,
	0x09, 0x05, 0x20, 0xc8, 0xc4, 0xed, 0xbd, 0x01, 0xa3, 0x4a, 0xca, 0x8c, 0x6b, 0xc4, 0xdc, 0x90,
	0x36, 0x93, 0x4f, 0x24, 0x6e, 0x4b, 0x32, 0x67, 0x36, 0xc4, 0x6e, 0x43, 0xbf, 0xdd, 0x40, 0x0d,
	0xfa, 0xfc, 0xd0, 0xe9, 0xab, 0xa6, 0x3e, 0xe2, 0x07, 0xcc, 0x1a, 0xd3, 0x1d, 0xe5, 0x0e, 0xb9,
	0xf9, 0x89, 0x0d, 0x3c, 0x75, 0x13, 0x06, 0xb9, 0x29, 0x36, 0x87, 0xcc, 0x74, 0x20, 0x34, 0x95,
	0xb6, 0xa1, 0x0d, 0x69, 0xde, 0x82, 0xb8, 0x5b, 0x32, 0x92, 0x01, 0xe7, 0x07, 0x0e, 0x3a, 0xa0,
	0xb7, 0x65, 0x24, 0x99, 0x0d, 0xb1, 0x77, 0xe0, 0x6a, 0xa9, 0x62, 0x26, 0x2a, 0xa7, 0x77, 0xa5,
	0xc2, 0xb0, 0xc0, 0xdd, 0x7b, 0xd0, 0xa0, 0x6b, 0x78, 0x4a, 0xa5, 0xff, 0x97, 0x1a, 0x0c, 0x62,
	0x96, 0xcf, 0xa4, 0x47, 0xac, 0x23, 0xb7, 0x27, 0x09, 0xd3, 0x7d, 0xe5, 0x36, 0xd9, 0xf9, 0xd8,
	0x8e, 0x67, 0x1e, 0x48, 0xc5, 0x7b, 0x36, 0x4f, 0xe0, 0x1d, 0xa9, 0x78, 0x6a, 0x42, 0xe4, 0xe7,
	0x32, 0x57, 0xfe, 0x8a, 0x59, 0x13, 0xdb, 0x32, 0xe9, 0x43, 0x09, 0xd4, 0x6c, 0xcb, 0x82, 0x9e,
	0xb2, 0xd8, 0xd8, 0x1e, 0x4c, 0xe8, 0x17, 0xf9, 0x30, 0xe0, 0xef, 0x80, 0x4f, 0xa0, 0xdd, 0x8e,
	0xe8, 0x97, 0x12, 0xae, 0x1b, 0xe3, 0x31, 0x1f, 0xbc, 0x62, 0xd0, 0x25, 0xe3, 0x03, 0xfa, 0x95,
	0x72, 0x8b, 0x6c, 0x7f, 0x64, 0x46, 0xca, 0x47, 0xa9, 0x6c, 0x4c, 0x95, 0xf0, 0xc7, 0xa9, 0x6c,
	0xa9, 0x0d, 0xb1, 0x5d, 0xa9, 0xd4, 0x90, 0x8d, 0xc7, 0x6a, 0x8f, 0xd1, 0x27, 0xb2, 0x12, 0x98,
	0xb5, 0xb4, 0x3e, 0x95, 0x75, 0xc6, 0xd9, 0x12, 0xff, 0x59, 0x4c, 0xe3, 0x96, 0x4e, 0x9f, 0x49,
	0x91, 0x70, 0x03, 0x3c, 0xe6, 0xf6, 0x76, 0xbb, 0xff, 0x14, 0x48, 0x9d, 0x89, 0x17, 0x8f, 0x06,
	0x8f, 0x20, 0x21, 0x3b, 0xd3, 0x9c, 0xb1, 0xad, 0x69, 0xe0, 0x95, 0xfe, 0x4f, 0x79, 0x46, 0xee,
	0xc3, 0x3a, 0x9e, 0xc0, 0x38, 0x22, 0xdd, 0x50, 0x87, 0xdc, 0xc4, 0x2e, 0x63, 0x26, 0xb7, 0x7b,
	0x7d, 0xfa, 0xeb, 0xbf, 0xc9, 0x9f, 0x82, 0xf2, 0x98, 0xdc, 0xfd, 0x00, 0x6e, 0x8f, 0x41, 0x64,
	0xc0, 0xee, 0x73, 0xdb, 0xd4, 0xe9, 0x2f, 0x19, 0xb4, 0x43, 0xb6, 0x01, 0x6a, 0x98, 0x13, 0x1e,
	0x03, 0x53, 0xcc, 0xcf, 0x19, 0xe6, 0x01, 0xd9, 0x02, 0x0c, 0x86, 0x1d, 0x8f, 0xa6, 0xc5, 0x46,
	0xe0, 0x9a, 0xfe, 0x94, 0x41, 0xba, 0xe4, 0xde, 0x75, 0x88, 0xd6, 0x37, 0x46, 0x38, 0x02, 0x49,
	0x74, 0x3f, 0xa6, 0xd8, 0xee, 0x1f, 0xf0, 0x55, 0xcf, 0xbd, 0x4c, 0xa0, 0x38, 0xf2, 0x23, 0xe0,
	0x5c, 0xae, 0xbc, 0xd7, 0xf0, 0x81, 0xd2, 0xdd, 0x50, 0xf7, 0x21, 0xed, 0xbb, 0xa4, 0x9d, 0x6e,
	0x2d, 0xdc, 0xc0, 0xf2, 0x82, 0x01, 0xbc, 0xa0, 0x4e, 0xf6, 0xe1, 0x1f, 0xdc, 0x77, 0x30, 0x36,
	0xd9, 0xae, 0x7f, 0x6d, 0xb3, 0x28, 0xb4, 0x4e, 0x37, 0x67, 0xde, 0x11, 0x18, 0x87, 0xee, 0x0b,
	0xb1, 0x4f, 0xc5, 0x8d, 0xbd, 0x99, 0xed, 0x01, 0x95, 0x1b, 0xf6, 0x57, 0x70, 0xf7, 0xe5, 0x8f,
	0x40, 0x20, 0x03, 0x7f, 0x05, 0xef, 0x31, 0x78, 0xac, 0x79, 0xb4, 0xd2, 0x7d, 0x42, 0x9a, 0x43,
	0xf7, 0xf4, 0x4d, 0x18, 0x9c, 0x68, 0xe1, 0x79, 0x18, 0x29, 0x55, 0x52, 0x3a, 0x54, 0xc5, 0xa5,
	0x5b, 0x23, 0xe5, 0x89, 0x01, 0x73, 0x54, 0xc4, 0x5f, 0x1c, 0xae, 0xa8, 0x52, 0xf7, 0x1b, 0x52,
	0x13, 0xaf, 0x3c, 0xcc, 0x0e, 0x2a, 0xd9, 0x73, 0x86, 0x70, 0x75, 0xf5, 0x54, 0xd8, 0x2b, 0xc0,
	0x57, 0xbf, 0xd6, 0x73, 0xf6, 0x54, 0x5c, 0x15, 0xe3, 0x15, 0xfc, 0x54, 0xf1, 0x9c, 0x41, 0x36,
	0x72, 0x8f, 0x13, 0x79, 0x5c, 0xfb, 0xe0, 0xb8, 0x76, 0xed, 0xb8, 0x96, 0x1e, 0x17, 0x73, 0xab,
	0x39, 0x70, 0x4f, 0xf6, 0x68, 0xb9, 0xfb, 0x3b, 0xbc, 0x53, 0xf4, 0xd9, 0x7b, 0xf8, 0x92, 0xa3,
	0x1b, 0xb8, 0x67, 0x99, 0x65, 0x71, 0x4b, 0x5c, 0x98, 0xa0, 0x2b, 0x78, 0x1d, 0x83, 0xcf, 0x01,
	0xc3, 0x75, 0x41, 0xac, 0xe3, 0x9b, 0x0a, 0xd7, 0x45, 0x01, 0x9f, 0xf4, 0x2d, 0x16, 0x2f, 0x4b,
	0x82, 0x66, 0x8f, 0x0f, 0xf7, 0x70, 0x55, 0x16, 0x43, 0x8a, 0x9b, 0xdc, 0x8c, 0xf7, 0x2b, 0xa9,
	0x65, 0x72, 0xc8, 0xd1, 0xb2, 0x26, 0x26, 0x45, 0x9c, 0x90, 0x86, 0xaa, 0xb8, 0x03, 0x12, 0x03,
	0x8f, 0x4d, 0x35, 0x81, 0x11, 0x1f, 0x29, 0xa6, 0x4d, 0xd0, 0x50, 0x8f, 0x0d, 0xc3, 0x91, 0x6a,
	0x1e, 0xa1, 0x81, 0x08, 0xbf, 0xaa, 0x61, 0x69, 0x96, 0xba, 0x1f, 0x43, 0x1a, 0x62, 0x32, 0xa5,
	0x25, 0x97, 0x40, 0x33, 0x6f, 0xcf, 0x25, 0xd2, 0x12, 0x89, 0x8c, 0xed, 0x11, 0xb3, 0x04, 0x37,
	0x7c, 0x13, 0xa0, 0xf0, 0xd0, 0xdc, 0xd6, 0xa1, 0x31, 0xe9, 0x43, 0xf4, 0xc9, 0x85, 0xbd, 0xd1,
	0x7d, 0x4d, 0xe8, 0xf0, 0x85, 0x78, 0x41, 0x64, 0x0f, 0x14, 0x21, 0xa6, 0x0d, 0x63, 0x61, 0x4c,
	0x40, 0x2e, 0xf0, 0x62, 0xc3, 0xc0, 0x99, 0xbd, 0x97, 0x36, 0x8b, 0xd5, 0xb2, 0x1d, 0xf6, 0xad,
	0x06, 0x57, 0x35, 0xcc, 0x7b, 0x31, 0xde, 0x1e, 0x0d, 0xd4, 0x23, 0x03, 0xcb, 0x00, 0x6a, 0xd9,
	0xce, 0x3e, 0x1c, 0x1d, 0xf7, 0xa1, 0x10, 0x47, 0x64, 0x5d, 0x3e, 0x83, 0x12, 0xcf, 0xd0, 0x27,
	0x89, 0xdf, 0x3a, 0xa9, 0xec, 0xab, 0x23, 0xd5, 0x88, 0xeb, 0x9a, 0xf3, 0x08, 0xf7, 0xb3, 0xa4,
	0x2b, 0xe1, 0x65, 0x9d, 0x38, 0x2f, 0x8b, 0xb0, 0x12, 0xd7, 0x95, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x99, 0x09, 0x06, 0x72, 0x78, 0x0d, 0x00, 0x00,
}
