// Code generated by protoc-gen-go.
// source: base.proto
// DO NOT EDIT!

/*
Package ddzproto is a generated protocol buffer package.

It is generated from these files:
	base.proto
	ddz_desk.proto
	ddz_hall.proto
	ddz_play.proto

It has these top-level messages:
	ProtoHeader
	Poker
	WeixinInfo
	RoomTypeInfo
	PlayerInfo
	DeskGameInfo
	Game_DissolveDesk
	Game_AckDissolveDesk
	Game_ReqDissolveDesk
	Game_AckReqDissolveDesk
	Game_LeaveDesk
	Game_AckLeaveDesk
	Game_Ready
	Game_AckReady
	Game_Message
	Game_SendMessage
	WinCoinInfo
	EndLotteryInfo
	Game_SendCurrentResult
	Game_SendEndLottery
	ServerInfo
	Game_QuickConn
	Game_AckQuickConn
	Game_Login
	Game_AckLogin
	Game_Notice
	Game_AckNotice
	Game_GameRecord
	BeanUserRecord
	BeanGameRecord
	Game_AckGameRecord
	Game_Feedback
	Game_CreateRoom
	Game_AckCreateRoom
	Game_EnterRoom
	Game_AckEnterRoom
	Game_Opening
	Game_DealCards
	Game_ShowHandPokers
	Game_ShowHandPokersAck
	Game_JiaoDiZhu
	Game_JiaoDiZhuAck
	Game_RobDiZhu
	Game_RobDiZhuAck
	Game_Double
	Game_DoubleAck
	Game_StartPlay
	Game_MenuZhua
	Game_MenuZhuaAck
	Game_SeeCards
	Game_SeeCardsAck
	Game_Pull
	Game_PullAck
	Game_OutCards
	Game_OutCardsAck
	Game_ActGuo
	Game_ActGuoAck
	Game_OverTurn
	Game_SendGameInfo
*/
package ddzproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EProtoId int32

const (
	// //////////////////////////////////
	//
	EProtoId_PID_QUICK_CONN     EProtoId = 1
	EProtoId_PID_QUICK_CONN_ACK EProtoId = 2
	EProtoId_PID_GAME_LOGIN     EProtoId = 3
	EProtoId_PID_GAME_LOGIN_ACK EProtoId = 4
	EProtoId_PID_CREATEROOM     EProtoId = 5
	EProtoId_PID_CREATEROOM_ACK EProtoId = 6
	EProtoId_PID_ENTER_ROOM     EProtoId = 7
	EProtoId_PID_ENTER_ROOM_ACK EProtoId = 8
	EProtoId_PID_SEND_GAMEINFO  EProtoId = 9
	EProtoId_PID_READY          EProtoId = 10
	EProtoId_PID_READY_ACK      EProtoId = 11
	EProtoId_PID_OPENING        EProtoId = 12
	EProtoId_PID_DEAL_CARDS     EProtoId = 13
	EProtoId_PID_JIAO_DIZHU     EProtoId = 14
	EProtoId_PID_JIAO_DIZHU_ACK EProtoId = 15
	// //////////////////////////////////////////
	// 欢乐斗地主
	EProtoId_PID_ROB_DIZHU           EProtoId = 16
	EProtoId_PID_ROB_DIZHU_ACK       EProtoId = 17
	EProtoId_PID_DOUBLE              EProtoId = 18
	EProtoId_PID_DOUBLE_ACK          EProtoId = 19
	EProtoId_PID_SHOW_HANDPOKERS     EProtoId = 20
	EProtoId_PID_SHOW_HANDPOKERS_ACK EProtoId = 21
	// //////////////////////////////////////////
	// 四川斗地主
	EProtoId_PID_MEN_ZHUA      EProtoId = 22
	EProtoId_PID_MEN_ZHUA_ACK  EProtoId = 23
	EProtoId_PID_SEE_CARDS     EProtoId = 24
	EProtoId_PID_SEE_CARDS_ACK EProtoId = 25
	EProtoId_PID_PULL          EProtoId = 26
	EProtoId_PID_PULL_ACK      EProtoId = 27
	// //////////////////////////////////////////
	EProtoId_PID_OUT_CARDS     EProtoId = 28
	EProtoId_PID_OUT_CARDS_ACK EProtoId = 29
	EProtoId_PID_ACT_GUO       EProtoId = 30
	EProtoId_PID_ACT_GUO_ACK   EProtoId = 31
	// //////////////////////////////////////////
	EProtoId_PID_START_PLAY     EProtoId = 32
	EProtoId_PID_OVERTURN       EProtoId = 33
	EProtoId_PID_CURRENTRESULT  EProtoId = 34
	EProtoId_PID_SENDENDLOTTERY EProtoId = 35
	// //////////////////////////////////////////
	EProtoId_PID_DISSOLVE_DESK       EProtoId = 36
	EProtoId_PID_DISSOLVE_DESK_ACK   EProtoId = 37
	EProtoId_PID_LEAVE_DESK          EProtoId = 38
	EProtoId_PID_LEAVE_DESK_ACK      EProtoId = 39
	EProtoId_PID_MESSAGE             EProtoId = 40
	EProtoId_PID_SEND_MESSAGE        EProtoId = 41
	EProtoId_PID_GAME_GAMERECORD     EProtoId = 42
	EProtoId_PID_GAME_GAMERECORD_ACK EProtoId = 43
)

var EProtoId_name = map[int32]string{
	1:  "PID_QUICK_CONN",
	2:  "PID_QUICK_CONN_ACK",
	3:  "PID_GAME_LOGIN",
	4:  "PID_GAME_LOGIN_ACK",
	5:  "PID_CREATEROOM",
	6:  "PID_CREATEROOM_ACK",
	7:  "PID_ENTER_ROOM",
	8:  "PID_ENTER_ROOM_ACK",
	9:  "PID_SEND_GAMEINFO",
	10: "PID_READY",
	11: "PID_READY_ACK",
	12: "PID_OPENING",
	13: "PID_DEAL_CARDS",
	14: "PID_JIAO_DIZHU",
	15: "PID_JIAO_DIZHU_ACK",
	16: "PID_ROB_DIZHU",
	17: "PID_ROB_DIZHU_ACK",
	18: "PID_DOUBLE",
	19: "PID_DOUBLE_ACK",
	20: "PID_SHOW_HANDPOKERS",
	21: "PID_SHOW_HANDPOKERS_ACK",
	22: "PID_MEN_ZHUA",
	23: "PID_MEN_ZHUA_ACK",
	24: "PID_SEE_CARDS",
	25: "PID_SEE_CARDS_ACK",
	26: "PID_PULL",
	27: "PID_PULL_ACK",
	28: "PID_OUT_CARDS",
	29: "PID_OUT_CARDS_ACK",
	30: "PID_ACT_GUO",
	31: "PID_ACT_GUO_ACK",
	32: "PID_START_PLAY",
	33: "PID_OVERTURN",
	34: "PID_CURRENTRESULT",
	35: "PID_SENDENDLOTTERY",
	36: "PID_DISSOLVE_DESK",
	37: "PID_DISSOLVE_DESK_ACK",
	38: "PID_LEAVE_DESK",
	39: "PID_LEAVE_DESK_ACK",
	40: "PID_MESSAGE",
	41: "PID_SEND_MESSAGE",
	42: "PID_GAME_GAMERECORD",
	43: "PID_GAME_GAMERECORD_ACK",
}
var EProtoId_value = map[string]int32{
	"PID_QUICK_CONN":          1,
	"PID_QUICK_CONN_ACK":      2,
	"PID_GAME_LOGIN":          3,
	"PID_GAME_LOGIN_ACK":      4,
	"PID_CREATEROOM":          5,
	"PID_CREATEROOM_ACK":      6,
	"PID_ENTER_ROOM":          7,
	"PID_ENTER_ROOM_ACK":      8,
	"PID_SEND_GAMEINFO":       9,
	"PID_READY":               10,
	"PID_READY_ACK":           11,
	"PID_OPENING":             12,
	"PID_DEAL_CARDS":          13,
	"PID_JIAO_DIZHU":          14,
	"PID_JIAO_DIZHU_ACK":      15,
	"PID_ROB_DIZHU":           16,
	"PID_ROB_DIZHU_ACK":       17,
	"PID_DOUBLE":              18,
	"PID_DOUBLE_ACK":          19,
	"PID_SHOW_HANDPOKERS":     20,
	"PID_SHOW_HANDPOKERS_ACK": 21,
	"PID_MEN_ZHUA":            22,
	"PID_MEN_ZHUA_ACK":        23,
	"PID_SEE_CARDS":           24,
	"PID_SEE_CARDS_ACK":       25,
	"PID_PULL":                26,
	"PID_PULL_ACK":            27,
	"PID_OUT_CARDS":           28,
	"PID_OUT_CARDS_ACK":       29,
	"PID_ACT_GUO":             30,
	"PID_ACT_GUO_ACK":         31,
	"PID_START_PLAY":          32,
	"PID_OVERTURN":            33,
	"PID_CURRENTRESULT":       34,
	"PID_SENDENDLOTTERY":      35,
	"PID_DISSOLVE_DESK":       36,
	"PID_DISSOLVE_DESK_ACK":   37,
	"PID_LEAVE_DESK":          38,
	"PID_LEAVE_DESK_ACK":      39,
	"PID_MESSAGE":             40,
	"PID_SEND_MESSAGE":        41,
	"PID_GAME_GAMERECORD":     42,
	"PID_GAME_GAMERECORD_ACK": 43,
}

func (x EProtoId) Enum() *EProtoId {
	p := new(EProtoId)
	*p = x
	return p
}
func (x EProtoId) String() string {
	return proto.EnumName(EProtoId_name, int32(x))
}
func (x *EProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProtoId_value, data, "EProtoId")
	if err != nil {
		return err
	}
	*x = EProtoId(value)
	return nil
}
func (EProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ErrorCode int32

const (
	ErrorCode_EC_SUCCESS ErrorCode = 0
	// -101   -200	游戏异常
	ErrorCode_EC_CREATE_DESK_DIAMOND_NOTENOUGH ErrorCode = -101
	ErrorCode_EC_CREATE_DESK_USER_NOTFOUND     ErrorCode = -102
	ErrorCode_EC_INTO_DESK_NOTFOUND            ErrorCode = -103
	ErrorCode_EC_INTO_DESK_ISFULL              ErrorCode = -104
	ErrorCode_EC_GAME_READY_REPEAT             ErrorCode = -110
	ErrorCode_EC_GAME_READY_CHIP_NOT_ENOUGH    ErrorCode = -111
)

var ErrorCode_name = map[int32]string{
	0:    "EC_SUCCESS",
	-101: "EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "EC_CREATE_DESK_USER_NOTFOUND",
	-103: "EC_INTO_DESK_NOTFOUND",
	-104: "EC_INTO_DESK_ISFULL",
	-110: "EC_GAME_READY_REPEAT",
	-111: "EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var ErrorCode_value = map[string]int32{
	"EC_SUCCESS":                       0,
	"EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"EC_INTO_DESK_NOTFOUND":            -103,
	"EC_INTO_DESK_ISFULL":              -104,
	"EC_GAME_READY_REPEAT":             -110,
	"EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}
func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (x *ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorCode_value, data, "ErrorCode")
	if err != nil {
		return err
	}
	*x = ErrorCode(value)
	return nil
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 扑克花色
type PokerColor int32

const (
	PokerColor_HONGTAO  PokerColor = 1
	PokerColor_FANGKUAI PokerColor = 2
	PokerColor_HEITAO   PokerColor = 3
	PokerColor_MEIHUA   PokerColor = 4
)

var PokerColor_name = map[int32]string{
	1: "HONGTAO",
	2: "FANGKUAI",
	3: "HEITAO",
	4: "MEIHUA",
}
var PokerColor_value = map[string]int32{
	"HONGTAO":  1,
	"FANGKUAI": 2,
	"HEITAO":   3,
	"MEIHUA":   4,
}

func (x PokerColor) Enum() *PokerColor {
	p := new(PokerColor)
	*p = x
	return p
}
func (x PokerColor) String() string {
	return proto.EnumName(PokerColor_name, int32(x))
}
func (x *PokerColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PokerColor_value, data, "PokerColor")
	if err != nil {
		return err
	}
	*x = PokerColor(value)
	return nil
}
func (PokerColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 牌型
type CardType int32

const (
	CardType_SINGLE            CardType = 1
	CardType_PAIR              CardType = 2
	CardType_CONNECTORS        CardType = 3
	CardType_CONNECT_PAIRS     CardType = 4
	CardType_THREE_CARDS       CardType = 5
	CardType_THREE_WITH_ONE    CardType = 6
	CardType_THREE_WITH_PAIR   CardType = 7
	CardType_FOUR_WITH_TWO     CardType = 8
	CardType_FOUR_WITH_2_PAIRS CardType = 9
	CardType_PLANE_CARDS       CardType = 10
	CardType_BOMB_CARDS        CardType = 11
	CardType_ROCKET_CARDS      CardType = 12
)

var CardType_name = map[int32]string{
	1:  "SINGLE",
	2:  "PAIR",
	3:  "CONNECTORS",
	4:  "CONNECT_PAIRS",
	5:  "THREE_CARDS",
	6:  "THREE_WITH_ONE",
	7:  "THREE_WITH_PAIR",
	8:  "FOUR_WITH_TWO",
	9:  "FOUR_WITH_2_PAIRS",
	10: "PLANE_CARDS",
	11: "BOMB_CARDS",
	12: "ROCKET_CARDS",
}
var CardType_value = map[string]int32{
	"SINGLE":            1,
	"PAIR":              2,
	"CONNECTORS":        3,
	"CONNECT_PAIRS":     4,
	"THREE_CARDS":       5,
	"THREE_WITH_ONE":    6,
	"THREE_WITH_PAIR":   7,
	"FOUR_WITH_TWO":     8,
	"FOUR_WITH_2_PAIRS": 9,
	"PLANE_CARDS":       10,
	"BOMB_CARDS":        11,
	"ROCKET_CARDS":      12,
}

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}
func (x CardType) String() string {
	return proto.EnumName(CardType_name, int32(x))
}
func (x *CardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CardType_value, data, "CardType")
	if err != nil {
		return err
	}
	*x = CardType(value)
	return nil
}
func (CardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 轮到玩家操作时：可执行何种操作
type ActType int32

const (
	ActType_T_NORMAL_ACT ActType = 1
	ActType_T_JIAO_DIZHU ActType = 2
	ActType_T_ROB_DIZHU  ActType = 3
	ActType_T_DOUBLE     ActType = 4
	ActType_T_MEN_ZHUA   ActType = 5
	ActType_T_PULL_PUSH  ActType = 6
)

var ActType_name = map[int32]string{
	1: "T_NORMAL_ACT",
	2: "T_JIAO_DIZHU",
	3: "T_ROB_DIZHU",
	4: "T_DOUBLE",
	5: "T_MEN_ZHUA",
	6: "T_PULL_PUSH",
}
var ActType_value = map[string]int32{
	"T_NORMAL_ACT": 1,
	"T_JIAO_DIZHU": 2,
	"T_ROB_DIZHU":  3,
	"T_DOUBLE":     4,
	"T_MEN_ZHUA":   5,
	"T_PULL_PUSH":  6,
}

func (x ActType) Enum() *ActType {
	p := new(ActType)
	*p = x
	return p
}
func (x ActType) String() string {
	return proto.EnumName(ActType_name, int32(x))
}
func (x *ActType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActType_value, data, "ActType")
	if err != nil {
		return err
	}
	*x = ActType(value)
	return nil
}
func (ActType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DDZGameStatus int32

const (
	DDZGameStatus_U_INIT       DDZGameStatus = 0
	DDZGameStatus_U_JIAO_DIZHU DDZGameStatus = 1
	DDZGameStatus_U_ROB_DIZHU  DDZGameStatus = 2
	DDZGameStatus_U_PLAYING    DDZGameStatus = 3
	DDZGameStatus_U_FINISH     DDZGameStatus = 4
)

var DDZGameStatus_name = map[int32]string{
	0: "U_INIT",
	1: "U_JIAO_DIZHU",
	2: "U_ROB_DIZHU",
	3: "U_PLAYING",
	4: "U_FINISH",
}
var DDZGameStatus_value = map[string]int32{
	"U_INIT":       0,
	"U_JIAO_DIZHU": 1,
	"U_ROB_DIZHU":  2,
	"U_PLAYING":    3,
	"U_FINISH":     4,
}

func (x DDZGameStatus) Enum() *DDZGameStatus {
	p := new(DDZGameStatus)
	*p = x
	return p
}
func (x DDZGameStatus) String() string {
	return proto.EnumName(DDZGameStatus_name, int32(x))
}
func (x *DDZGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DDZGameStatus_value, data, "DDZGameStatus")
	if err != nil {
		return err
	}
	*x = DDZGameStatus(value)
	return nil
}
func (DDZGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 玩家当前状态
type PlayerGameStatus int32

const (
	PlayerGameStatus_S_INIT       PlayerGameStatus = 0
	PlayerGameStatus_S_DEALCARDS  PlayerGameStatus = 1
	PlayerGameStatus_S_JIAO_DIZHU PlayerGameStatus = 2
	PlayerGameStatus_S_ROB_DIZHU  PlayerGameStatus = 3
	PlayerGameStatus_S_DOUBLE     PlayerGameStatus = 4
	PlayerGameStatus_S_NO_DOUBLE  PlayerGameStatus = 5
	PlayerGameStatus_S_PULL       PlayerGameStatus = 6
	PlayerGameStatus_S_PUSH       PlayerGameStatus = 7
	PlayerGameStatus_S_ACTING     PlayerGameStatus = 8
	PlayerGameStatus_S_WAIT       PlayerGameStatus = 9
	PlayerGameStatus_S_GAME_END   PlayerGameStatus = 10
)

var PlayerGameStatus_name = map[int32]string{
	0:  "S_INIT",
	1:  "S_DEALCARDS",
	2:  "S_JIAO_DIZHU",
	3:  "S_ROB_DIZHU",
	4:  "S_DOUBLE",
	5:  "S_NO_DOUBLE",
	6:  "S_PULL",
	7:  "S_PUSH",
	8:  "S_ACTING",
	9:  "S_WAIT",
	10: "S_GAME_END",
}
var PlayerGameStatus_value = map[string]int32{
	"S_INIT":       0,
	"S_DEALCARDS":  1,
	"S_JIAO_DIZHU": 2,
	"S_ROB_DIZHU":  3,
	"S_DOUBLE":     4,
	"S_NO_DOUBLE":  5,
	"S_PULL":       6,
	"S_PUSH":       7,
	"S_ACTING":     8,
	"S_WAIT":       9,
	"S_GAME_END":   10,
}

func (x PlayerGameStatus) Enum() *PlayerGameStatus {
	p := new(PlayerGameStatus)
	*p = x
	return p
}
func (x PlayerGameStatus) String() string {
	return proto.EnumName(PlayerGameStatus_name, int32(x))
}
func (x *PlayerGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlayerGameStatus_value, data, "PlayerGameStatus")
	if err != nil {
		return err
	}
	*x = PlayerGameStatus(value)
	return nil
}
func (PlayerGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DDZRoomType int32

const (
	DDZRoomType_T_NORMAL_DDZ  DDZRoomType = 1
	DDZRoomType_T_HAPPY_DDZ   DDZRoomType = 2
	DDZRoomType_T_SICHUAN_DDZ DDZRoomType = 3
)

var DDZRoomType_name = map[int32]string{
	1: "T_NORMAL_DDZ",
	2: "T_HAPPY_DDZ",
	3: "T_SICHUAN_DDZ",
}
var DDZRoomType_value = map[string]int32{
	"T_NORMAL_DDZ":  1,
	"T_HAPPY_DDZ":   2,
	"T_SICHUAN_DDZ": 3,
}

func (x DDZRoomType) Enum() *DDZRoomType {
	p := new(DDZRoomType)
	*p = x
	return p
}
func (x DDZRoomType) String() string {
	return proto.EnumName(DDZRoomType_name, int32(x))
}
func (x *DDZRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DDZRoomType_value, data, "DDZRoomType")
	if err != nil {
		return err
	}
	*x = DDZRoomType(value)
	return nil
}
func (DDZRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DeskGameStatus int32

const (
	DeskGameStatus_INIT       DeskGameStatus = 0
	DeskGameStatus_DEAL_CARDS DeskGameStatus = 1
	DeskGameStatus_JIAO_DIZHU DeskGameStatus = 2
	DeskGameStatus_PLAYING    DeskGameStatus = 3
	DeskGameStatus_FINISH     DeskGameStatus = 4
)

var DeskGameStatus_name = map[int32]string{
	0: "INIT",
	1: "DEAL_CARDS",
	2: "JIAO_DIZHU",
	3: "PLAYING",
	4: "FINISH",
}
var DeskGameStatus_value = map[string]int32{
	"INIT":       0,
	"DEAL_CARDS": 1,
	"JIAO_DIZHU": 2,
	"PLAYING":    3,
	"FINISH":     4,
}

func (x DeskGameStatus) Enum() *DeskGameStatus {
	p := new(DeskGameStatus)
	*p = x
	return p
}
func (x DeskGameStatus) String() string {
	return proto.EnumName(DeskGameStatus_name, int32(x))
}
func (x *DeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeskGameStatus_value, data, "DeskGameStatus")
	if err != nil {
		return err
	}
	*x = DeskGameStatus(value)
	return nil
}
func (DeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// 通信协议包头
type ProtoHeader struct {
	Version          *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Code             *int32  `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	Error            *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProtoHeader) Reset()                    { *m = ProtoHeader{} }
func (m *ProtoHeader) String() string            { return proto.CompactTextString(m) }
func (*ProtoHeader) ProtoMessage()               {}
func (*ProtoHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProtoHeader) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ProtoHeader) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ProtoHeader) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ProtoHeader) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

type Poker struct {
	Suit             *PokerColor `protobuf:"varint,1,opt,name=suit,enum=ddzproto.PokerColor" json:"suit,omitempty"`
	Num              *int32      `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Value            *int32      `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Poker) Reset()                    { *m = Poker{} }
func (m *Poker) String() string            { return proto.CompactTextString(m) }
func (*Poker) ProtoMessage()               {}
func (*Poker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Poker) GetSuit() PokerColor {
	if m != nil && m.Suit != nil {
		return *m.Suit
	}
	return PokerColor_HONGTAO
}

func (m *Poker) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *Poker) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// 微信信息
type WeixinInfo struct {
	OpenId           *string `protobuf:"bytes,1,opt,name=openId" json:"openId,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	HeadUrl          *string `protobuf:"bytes,3,opt,name=headUrl" json:"headUrl,omitempty"`
	Sex              *int32  `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
	City             *string `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	UnionId          *string `protobuf:"bytes,6,opt,name=unionId" json:"unionId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WeixinInfo) Reset()                    { *m = WeixinInfo{} }
func (m *WeixinInfo) String() string            { return proto.CompactTextString(m) }
func (*WeixinInfo) ProtoMessage()               {}
func (*WeixinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WeixinInfo) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *WeixinInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WeixinInfo) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *WeixinInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *WeixinInfo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *WeixinInfo) GetUnionId() string {
	if m != nil && m.UnionId != nil {
		return *m.UnionId
	}
	return ""
}

type RoomTypeInfo struct {
	RoomType         *DDZRoomType `protobuf:"varint,1,opt,name=roomType,enum=ddzproto.DDZRoomType" json:"roomType,omitempty"`
	BoardsCount      *int32       `protobuf:"varint,2,opt,name=boardsCount" json:"boardsCount,omitempty"`
	CapMax           *int64       `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	BaseValue        *int64       `protobuf:"varint,4,opt,name=baseValue" json:"baseValue,omitempty"`
	IsJiaoFen        *bool        `protobuf:"varint,5,opt,name=isJiaoFen" json:"isJiaoFen,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RoomTypeInfo) Reset()                    { *m = RoomTypeInfo{} }
func (m *RoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomTypeInfo) ProtoMessage()               {}
func (*RoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RoomTypeInfo) GetRoomType() DDZRoomType {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return DDZRoomType_T_NORMAL_DDZ
}

func (m *RoomTypeInfo) GetBoardsCount() int32 {
	if m != nil && m.BoardsCount != nil {
		return *m.BoardsCount
	}
	return 0
}

func (m *RoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *RoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *RoomTypeInfo) GetIsJiaoFen() bool {
	if m != nil && m.IsJiaoFen != nil {
		return *m.IsJiaoFen
	}
	return false
}

type PlayerInfo struct {
	IsDiZhu          *bool             `protobuf:"varint,1,opt,name=isDiZhu" json:"isDiZhu,omitempty"`
	PlayerPokers     []*Poker          `protobuf:"bytes,2,rep,name=playerPokers" json:"playerPokers,omitempty"`
	Coin             *int64            `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string           `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32            `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32           `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool             `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32            `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	Status           *PlayerGameStatus `protobuf:"varint,9,opt,name=status,enum=ddzproto.PlayerGameStatus" json:"status,omitempty"`
	WxInfo           *WeixinInfo       `protobuf:"bytes,10,opt,name=wxInfo" json:"wxInfo,omitempty"`
	OnlineStatus     *int32            `protobuf:"varint,11,opt,name=onlineStatus" json:"onlineStatus,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PlayerInfo) GetIsDiZhu() bool {
	if m != nil && m.IsDiZhu != nil {
		return *m.IsDiZhu
	}
	return false
}

func (m *PlayerInfo) GetPlayerPokers() []*Poker {
	if m != nil {
		return m.PlayerPokers
	}
	return nil
}

func (m *PlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *PlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *PlayerInfo) GetStatus() PlayerGameStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return PlayerGameStatus_S_INIT
}

func (m *PlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *PlayerInfo) GetOnlineStatus() int32 {
	if m != nil && m.OnlineStatus != nil {
		return *m.OnlineStatus
	}
	return 0
}

type DeskGameInfo struct {
	GameStatus       *int32        `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *RoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32        `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32       `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32        `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	NInitActionTime  *int32        `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	InitRoomCoin     *int64        `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32        `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32        `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string       `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	DiZhuUserId      *uint32       `protobuf:"varint,14,opt,name=diZhuUserId" json:"diZhuUserId,omitempty"`
	FootPokers       []*Poker      `protobuf:"bytes,15,rep,name=footPokers" json:"footPokers,omitempty"`
	FootRate         *int32        `protobuf:"varint,16,opt,name=footRate" json:"footRate,omitempty"`
	PlayRate         *int32        `protobuf:"varint,17,opt,name=playRate" json:"playRate,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DeskGameInfo) Reset()                    { *m = DeskGameInfo{} }
func (m *DeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*DeskGameInfo) ProtoMessage()               {}
func (*DeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *DeskGameInfo) GetRoomTypeInfo() *RoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *DeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *DeskGameInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *DeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *DeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *DeskGameInfo) GetDiZhuUserId() uint32 {
	if m != nil && m.DiZhuUserId != nil {
		return *m.DiZhuUserId
	}
	return 0
}

func (m *DeskGameInfo) GetFootPokers() []*Poker {
	if m != nil {
		return m.FootPokers
	}
	return nil
}

func (m *DeskGameInfo) GetFootRate() int32 {
	if m != nil && m.FootRate != nil {
		return *m.FootRate
	}
	return 0
}

func (m *DeskGameInfo) GetPlayRate() int32 {
	if m != nil && m.PlayRate != nil {
		return *m.PlayRate
	}
	return 0
}

func init() {
	proto.RegisterType((*ProtoHeader)(nil), "ddzproto.ProtoHeader")
	proto.RegisterType((*Poker)(nil), "ddzproto.Poker")
	proto.RegisterType((*WeixinInfo)(nil), "ddzproto.WeixinInfo")
	proto.RegisterType((*RoomTypeInfo)(nil), "ddzproto.RoomTypeInfo")
	proto.RegisterType((*PlayerInfo)(nil), "ddzproto.PlayerInfo")
	proto.RegisterType((*DeskGameInfo)(nil), "ddzproto.DeskGameInfo")
	proto.RegisterEnum("ddzproto.EProtoId", EProtoId_name, EProtoId_value)
	proto.RegisterEnum("ddzproto.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("ddzproto.PokerColor", PokerColor_name, PokerColor_value)
	proto.RegisterEnum("ddzproto.CardType", CardType_name, CardType_value)
	proto.RegisterEnum("ddzproto.ActType", ActType_name, ActType_value)
	proto.RegisterEnum("ddzproto.DDZGameStatus", DDZGameStatus_name, DDZGameStatus_value)
	proto.RegisterEnum("ddzproto.PlayerGameStatus", PlayerGameStatus_name, PlayerGameStatus_value)
	proto.RegisterEnum("ddzproto.DDZRoomType", DDZRoomType_name, DDZRoomType_value)
	proto.RegisterEnum("ddzproto.DeskGameStatus", DeskGameStatus_name, DeskGameStatus_value)
}

var fileDescriptor0 = []byte{
	// 1504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x56, 0xdb, 0x52, 0xdb, 0x56,
	0x17, 0xfe, 0x8d, 0xcf, 0xcb, 0xc6, 0x6c, 0x04, 0x24, 0xce, 0xe9, 0x2f, 0x21, 0x49, 0x93, 0xb8,
	0x6d, 0x2e, 0x78, 0x81, 0x8e, 0x90, 0x37, 0xb6, 0x62, 0x5b, 0xdb, 0xd5, 0x21, 0x0c, 0xe9, 0x85,
	0xc6, 0x60, 0x65, 0xa2, 0x01, 0x2c, 0x46, 0xb6, 0x13, 0xe8, 0x65, 0x2f, 0x7b, 0xd7, 0x5e, 0xb5,
	0xe9, 0x63, 0xf4, 0x6d, 0x3a, 0xd3, 0x67, 0x69, 0xd7, 0x5e, 0xd2, 0xb6, 0x04, 0x49, 0x26, 0xc3,
	0x78, 0x7f, 0xfb, 0xd3, 0x3a, 0x7c, 0xeb, 0x20, 0x01, 0x9c, 0x4c, 0xe6, 0xc1, 0xab, 0xcb, 0x38,
	0x5a, 0x44, 0x5a, 0x6d, 0x3a, 0xfd, 0x89, 0x7e, 0xed, 0x0d, 0xa0, 0x31, 0x96, 0x3f, 0xfa, 0xc1,
	0x64, 0x1a, 0xc4, 0xda, 0x06, 0x54, 0x3f, 0x04, 0xf1, 0x3c, 0x8c, 0x66, 0xed, 0xc2, 0x6e, 0xe1,
	0x45, 0x5d, 0x6b, 0x41, 0x65, 0x39, 0x0f, 0x62, 0x73, 0xda, 0x5e, 0xc3, 0xf3, 0xba, 0xd6, 0x84,
	0xd2, 0x69, 0x34, 0x0d, 0xda, 0x45, 0x3c, 0x95, 0xb5, 0x75, 0x28, 0x07, 0x71, 0x1c, 0xc5, 0xed,
	0x92, 0x24, 0xef, 0xf5, 0xa0, 0x3c, 0x8e, 0xce, 0xd0, 0xcc, 0x1e, 0x94, 0xe6, 0xcb, 0x70, 0x41,
	0x36, 0x5a, 0xfb, 0xdb, 0xaf, 0x94, 0xbb, 0x57, 0x74, 0x6d, 0x44, 0xe7, 0x51, 0xac, 0x35, 0xa0,
	0x38, 0x5b, 0x5e, 0x90, 0x59, 0x32, 0xf4, 0x61, 0x72, 0xbe, 0x4c, 0xed, 0xee, 0x9d, 0x01, 0x1c,
	0x05, 0xe1, 0x55, 0x38, 0x33, 0x67, 0xef, 0x22, 0x19, 0x43, 0x74, 0x19, 0xcc, 0x30, 0x86, 0x24,
	0x26, 0x06, 0xb5, 0x59, 0x78, 0x7a, 0x66, 0x4d, 0x2e, 0x02, 0x7a, 0xbc, 0x2e, 0xc3, 0x7e, 0x8f,
	0x09, 0x78, 0xf1, 0x39, 0x19, 0xa8, 0x4b, 0xe3, 0xf3, 0xe0, 0x8a, 0xc2, 0x2a, 0x53, 0xcc, 0xe1,
	0xe2, 0xba, 0x5d, 0x56, 0xdc, 0xe5, 0x0c, 0x13, 0x44, 0x73, 0x15, 0x8a, 0xfa, 0xe7, 0x02, 0x34,
	0xed, 0x28, 0xba, 0x70, 0xaf, 0x2f, 0x03, 0xf2, 0xf7, 0x1c, 0x6a, 0x71, 0x7a, 0x4e, 0x33, 0xd8,
	0xc9, 0x32, 0xe8, 0x76, 0xdf, 0x2a, 0xb2, 0xb6, 0x05, 0x8d, 0x93, 0x68, 0x12, 0x4f, 0xe7, 0x46,
	0xb4, 0x9c, 0x2d, 0xd2, 0x54, 0x30, 0xda, 0xd3, 0xc9, 0xe5, 0x68, 0x72, 0x45, 0xa1, 0x14, 0xb5,
	0x4d, 0xa8, 0x4b, 0xe5, 0xdf, 0x50, 0x7a, 0x25, 0x05, 0x85, 0xf3, 0xd7, 0xe1, 0x24, 0x3a, 0x0c,
	0x66, 0x14, 0x55, 0x6d, 0xef, 0x97, 0x35, 0x80, 0xf1, 0xf9, 0xe4, 0x1a, 0xa5, 0x96, 0x21, 0x60,
	0x90, 0xe1, 0xbc, 0x1b, 0xbe, 0x7d, 0xbf, 0xa4, 0x08, 0x6a, 0xda, 0x33, 0x68, 0x5e, 0xd2, 0x35,
	0x29, 0x38, 0x47, 0x5f, 0xc5, 0x17, 0x8d, 0xfd, 0x8d, 0x5b, 0xca, 0x26, 0xe5, 0x09, 0x67, 0xa9,
	0xeb, 0xbc, 0x50, 0xa5, 0xbc, 0x2e, 0x65, 0x15, 0x69, 0x5a, 0xdb, 0x0a, 0xd5, 0x96, 0x9c, 0x8a,
	0x8f, 0xb3, 0x20, 0x6e, 0x57, 0xc9, 0x29, 0x12, 0x4e, 0x6c, 0xd4, 0xf5, 0xba, 0x5d, 0xa3, 0x07,
	0x3a, 0x50, 0x99, 0x2f, 0x26, 0x8b, 0xe5, 0xbc, 0x5d, 0x27, 0x59, 0xee, 0xe7, 0xdc, 0x53, 0x70,
	0x3d, 0xf4, 0xe4, 0x10, 0x43, 0x7b, 0x0a, 0x95, 0x8f, 0x57, 0x32, 0x97, 0x36, 0x20, 0xb7, 0x91,
	0x6f, 0x82, 0x5c, 0x69, 0xb7, 0xa1, 0x19, 0xcd, 0xce, 0xc3, 0x59, 0xfa, 0x54, 0xbb, 0x41, 0xe5,
	0xff, 0x67, 0x0d, 0x9a, 0xdd, 0x60, 0x7e, 0x26, 0xcd, 0x11, 0x4d, 0x03, 0xc8, 0x4c, 0x93, 0x22,
	0x65, 0xed, 0x5b, 0x68, 0xc6, 0xb9, 0xaa, 0x91, 0xfa, 0x8d, 0xfd, 0x3b, 0x99, 0x9b, 0x1b, 0x35,
	0x45, 0xc9, 0x13, 0xfd, 0x2c, 0xec, 0xb9, 0xa4, 0x79, 0xd1, 0xf7, 0xe4, 0x74, 0x11, 0x7e, 0x08,
	0xbc, 0x44, 0x84, 0x12, 0x89, 0x80, 0xae, 0x24, 0x1a, 0xcd, 0xdc, 0x10, 0x55, 0x4b, 0x84, 0xba,
	0x0b, 0x1b, 0x18, 0x6e, 0xb8, 0xd0, 0xb3, 0x8b, 0xaa, 0x32, 0x11, 0x22, 0x2e, 0x3d, 0x19, 0x52,
	0xf6, 0x3a, 0xc9, 0xbe, 0x03, 0xeb, 0xa7, 0xcb, 0x38, 0x96, 0x92, 0x24, 0x8d, 0x01, 0x44, 0xbe,
	0x03, 0xad, 0x45, 0xb4, 0x98, 0x9c, 0x67, 0x38, 0x65, 0x2b, 0x3d, 0xca, 0x44, 0x30, 0xb0, 0x13,
	0x54, 0xbe, 0x49, 0x75, 0xc2, 0xce, 0x9a, 0xca, 0xea, 0xa7, 0xa1, 0xb5, 0x28, 0xb4, 0x27, 0x00,
	0xef, 0xa2, 0x68, 0x91, 0x76, 0xc0, 0xc6, 0x97, 0x3b, 0x00, 0x6b, 0x2e, 0x49, 0xf6, 0x64, 0x11,
	0xb4, 0x19, 0xd9, 0x47, 0x44, 0xa6, 0x4e, 0xc8, 0xa6, 0x44, 0x3a, 0x9f, 0xaa, 0x50, 0xe3, 0x34,
	0xf6, 0xe6, 0x14, 0xdd, 0xb7, 0xc6, 0x66, 0xd7, 0xff, 0xc1, 0x33, 0x8d, 0x81, 0x6f, 0x08, 0xcb,
	0x62, 0x05, 0x0c, 0x55, 0xbb, 0x89, 0xf9, 0xba, 0x31, 0x60, 0x6b, 0x8a, 0xdb, 0xd3, 0x47, 0xdc,
	0x1f, 0x8a, 0x9e, 0x69, 0xb1, 0xa2, 0xe2, 0x66, 0x18, 0x71, 0x4b, 0x8a, 0x6b, 0xd8, 0x5c, 0x77,
	0xb9, 0x2d, 0xc4, 0x88, 0x95, 0x15, 0x37, 0xc3, 0x88, 0x5b, 0x51, 0x5c, 0x6e, 0x21, 0xea, 0x13,
	0xb7, 0xaa, 0xb8, 0x19, 0x46, 0xdc, 0x1a, 0xaa, 0xbb, 0x29, 0x71, 0x87, 0x5b, 0x89, 0x53, 0xd3,
	0x3a, 0x14, 0xac, 0x8e, 0x1b, 0xa4, 0x2e, 0x61, 0xb4, 0xdc, 0x3d, 0x66, 0x80, 0xf5, 0x5e, 0x5f,
	0x1d, 0xe9, 0xc1, 0x06, 0xb6, 0x77, 0x43, 0x42, 0x62, 0xcc, 0x2d, 0xd3, 0xea, 0xb1, 0xa6, 0xf2,
	0xda, 0xe5, 0xfa, 0xd0, 0x37, 0x74, 0xbb, 0xeb, 0xb0, 0x75, 0x85, 0xbd, 0x36, 0x75, 0xe1, 0x77,
	0xcd, 0xb7, 0x7d, 0x8f, 0xb5, 0x54, 0x24, 0x19, 0x46, 0x06, 0x37, 0x56, 0x3e, 0xc4, 0x41, 0x4a,
	0x65, 0x2a, 0xb8, 0x15, 0x44, 0xcc, 0x4d, 0x1c, 0x24, 0x20, 0x4f, 0xc2, 0x3b, 0x18, 0x72, 0xa6,
	0xad, 0x3c, 0xd3, 0x99, 0x38, 0x5b, 0xd8, 0x64, 0x5b, 0x94, 0x57, 0x5f, 0x1c, 0xf9, 0x7d, 0xdd,
	0xea, 0x8e, 0xc5, 0x80, 0xdb, 0x0e, 0xdb, 0xd6, 0x1e, 0xc0, 0xdd, 0x2f, 0x5c, 0xd0, 0x53, 0x3b,
	0x58, 0xdc, 0xa6, 0xbc, 0x1c, 0x71, 0xcb, 0x47, 0x77, 0x3a, 0xbb, 0x83, 0x3d, 0xc9, 0xf2, 0x08,
	0xf1, 0xee, 0xaa, 0x58, 0x1d, 0xce, 0xd3, 0x54, 0xdb, 0x99, 0x90, 0x29, 0x44, 0xcc, 0x7b, 0xb8,
	0x42, 0x6a, 0x12, 0x1e, 0x7b, 0xc3, 0x21, 0xbb, 0xaf, 0xec, 0xcb, 0x13, 0xdd, 0x3f, 0x50, 0x96,
	0x84, 0xe7, 0xa6, 0x96, 0x1e, 0x2a, 0x4b, 0x2b, 0x88, 0x98, 0x8f, 0x94, 0xe0, 0xba, 0xe1, 0xfa,
	0x3d, 0x4f, 0xb0, 0xff, 0x63, 0x57, 0x6f, 0xe4, 0x00, 0x62, 0x7d, 0xa5, 0xb4, 0x70, 0x5c, 0xdd,
	0x76, 0xfd, 0xf1, 0x50, 0x3f, 0x66, 0xbb, 0xca, 0xab, 0x78, 0xc3, 0x6d, 0xd7, 0xb3, 0x2d, 0xf6,
	0x58, 0xb9, 0x30, 0x3c, 0xdb, 0xc6, 0x8e, 0xb0, 0xb9, 0xe3, 0x0d, 0x5d, 0xb6, 0xa7, 0x4a, 0x23,
	0x9b, 0x01, 0xff, 0x0f, 0x85, 0x8b, 0xcd, 0x72, 0xcc, 0x9e, 0x28, 0x7a, 0xd7, 0x74, 0x1c, 0x31,
	0x7c, 0xc3, 0xb1, 0xc6, 0xce, 0x80, 0x3d, 0xd5, 0xee, 0xc1, 0xce, 0x67, 0x30, 0x85, 0xf1, 0x4c,
	0x85, 0x31, 0xe4, 0xba, 0xa2, 0x7f, 0xad, 0xac, 0x67, 0x18, 0x71, 0x9f, 0xab, 0xc4, 0x46, 0xdc,
	0x71, 0xf4, 0x1e, 0x67, 0x2f, 0x94, 0xe6, 0xd4, 0x93, 0x0a, 0x7d, 0xa9, 0x2a, 0x4a, 0x93, 0x21,
	0xff, 0xd8, 0xdc, 0x10, 0x76, 0x97, 0x75, 0x54, 0x45, 0x6f, 0x5d, 0x90, 0xf1, 0x6f, 0x3a, 0xf8,
	0x26, 0xa8, 0x73, 0xf9, 0x52, 0x35, 0xf0, 0x3d, 0x2b, 0x3b, 0x87, 0x1b, 0xbe, 0xe3, 0x19, 0x06,
	0x9a, 0x65, 0xff, 0xd3, 0xbe, 0x83, 0x5d, 0x3c, 0x27, 0x03, 0x94, 0x84, 0xd4, 0x35, 0xf5, 0x91,
	0x40, 0xbf, 0x96, 0x70, 0xb9, 0x25, 0xbc, 0x5e, 0x9f, 0xfd, 0xf9, 0x6f, 0xfa, 0xaf, 0xa0, 0xbd,
	0x84, 0x87, 0xb7, 0xe8, 0x9e, 0x83, 0xe3, 0x84, 0xdc, 0x43, 0xe1, 0x59, 0x5d, 0xf6, 0x29, 0xa3,
	0xee, 0xc1, 0x0e, 0x52, 0x4d, 0xcb, 0x15, 0x09, 0x71, 0xc5, 0xf9, 0x23, 0xe3, 0xec, 0xc2, 0xd6,
	0x0d, 0x8e, 0xe9, 0x1c, 0xca, 0x36, 0xf9, 0x3d, 0x63, 0x3c, 0x86, 0x6d, 0x64, 0x50, 0x66, 0xc9,
	0xec, 0xd9, 0x7c, 0x8c, 0xce, 0xd9, 0x6f, 0x19, 0xa5, 0x03, 0x8f, 0x6e, 0x52, 0x8c, 0xbe, 0x39,
	0x96, 0xee, 0xfc, 0x34, 0xfe, 0x5f, 0x57, 0xdc, 0xce, 0xf7, 0x38, 0x38, 0xf9, 0x4f, 0x86, 0x6a,
	0x5f, 0x58, 0x3d, 0x57, 0x17, 0xb8, 0xa3, 0xb0, 0x4f, 0x0f, 0x75, 0xab, 0x37, 0xf0, 0x74, 0x13,
	0x37, 0x13, 0x40, 0xa5, 0xcf, 0x4d, 0x79, 0x53, 0x94, 0xbf, 0x71, 0x2d, 0xc8, 0x69, 0x28, 0x75,
	0xfe, 0x2e, 0x40, 0xcd, 0xc0, 0x57, 0x34, 0xbd, 0xaf, 0xf1, 0xc2, 0xc1, 0xd1, 0xc7, 0x11, 0x2c,
	0x68, 0x35, 0x28, 0x8d, 0x75, 0xd3, 0xc6, 0x47, 0x51, 0x62, 0xb9, 0xe2, 0xb8, 0xe1, 0x0a, 0x9c,
	0x37, 0xf9, 0x76, 0x5e, 0x4f, 0xcf, 0xbe, 0x64, 0x38, 0xb8, 0xcb, 0xb0, 0xe0, 0x6e, 0xdf, 0x5e,
	0xcd, 0x8e, 0xdc, 0xd9, 0xad, 0x04, 0x38, 0x32, 0xdd, 0xbe, 0x2f, 0x2c, 0x8e, 0x4b, 0x0c, 0xbb,
	0x3b, 0x87, 0x91, 0xf1, 0xaa, 0x34, 0x86, 0x2a, 0xda, 0x09, 0xe6, 0x1e, 0x89, 0x64, 0x81, 0x65,
	0xd0, 0x7e, 0xea, 0xa3, 0x4e, 0x4d, 0x35, 0xd4, 0x2d, 0xe5, 0x03, 0x64, 0x5c, 0x07, 0x62, 0x74,
	0x90, 0x9e, 0x1b, 0x72, 0x28, 0x6c, 0x61, 0x0c, 0xb8, 0x9a, 0xbb, 0x66, 0xe7, 0x02, 0xaa, 0xf8,
	0x4a, 0xa2, 0xd4, 0xf0, 0xd2, 0x45, 0x0d, 0xed, 0x91, 0x2e, 0xe7, 0xd4, 0xc5, 0x04, 0x09, 0xc9,
	0xed, 0xb1, 0x35, 0xca, 0x22, 0xb7, 0xad, 0x8a, 0x52, 0x42, 0x57, 0x2d, 0xa5, 0x92, 0xf4, 0xe7,
	0x66, 0x8b, 0xa4, 0x9c, 0xd0, 0x69, 0xf0, 0xc7, 0x9e, 0xd3, 0x67, 0x95, 0xce, 0x8f, 0xb0, 0x8e,
	0x5f, 0x3f, 0xb9, 0x77, 0x3c, 0xea, 0xe9, 0x61, 0x37, 0x98, 0x2e, 0x36, 0x26, 0xba, 0xf3, 0xf2,
	0xee, 0x0a, 0xf2, 0x79, 0x2f, 0xe7, 0x6e, 0x4d, 0xae, 0x68, 0x8f, 0x26, 0x5c, 0xae, 0x5f, 0xf2,
	0xee, 0xf9, 0x87, 0xf8, 0x38, 0x1a, 0x2f, 0x75, 0xfe, 0x2a, 0xe0, 0x0c, 0xdd, 0xfe, 0x88, 0x90,
	0x05, 0x53, 0x0e, 0xd0, 0x9c, 0x43, 0xbb, 0x3a, 0xc9, 0x9e, 0x12, 0x74, 0x3e, 0x4b, 0xd0, 0xb9,
	0x9d, 0xa0, 0x93, 0x25, 0x48, 0xd7, 0x96, 0x50, 0x40, 0x39, 0x31, 0x4f, 0x8b, 0xae, 0xa2, 0x7e,
	0x63, 0x2c, 0xd5, 0xe4, 0x31, 0x54, 0x51, 0xc6, 0x59, 0x4b, 0x6e, 0x8e, 0x74, 0x0c, 0x42, 0x7e,
	0x0e, 0x83, 0x93, 0xb4, 0x2e, 0x8e, 0x3a, 0x83, 0x8e, 0x01, 0x8d, 0xfc, 0x07, 0x61, 0xbe, 0x0a,
	0x88, 0x27, 0x22, 0xb8, 0xb8, 0xb5, 0xc7, 0xe3, 0x63, 0x02, 0xd6, 0x64, 0x43, 0xb8, 0xbe, 0x63,
	0x1a, 0xa8, 0xb1, 0x45, 0x50, 0xb1, 0xe3, 0x40, 0x4b, 0x7d, 0xed, 0xa4, 0x79, 0x63, 0x73, 0xa6,
	0x59, 0xa3, 0xc3, 0xdc, 0xfb, 0xa9, 0x20, 0xcf, 0x37, 0x52, 0xc6, 0x91, 0xc8, 0x14, 0xc5, 0x48,
	0x95, 0x9e, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x25, 0x1c, 0x20, 0x8e, 0xef, 0x0b, 0x00, 0x00,
}
