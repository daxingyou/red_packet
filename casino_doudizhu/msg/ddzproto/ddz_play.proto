syntax = "proto2";

import public "ddz_base.proto";
package ddzproto;
option optimize_for = LITE_RUNTIME;

////////////////////////////////////////////////////////////////////
// 通信协议

// 开局（接收服务端消息）
message DdzOpening {
    optional ProtoHeader header = 1;
}

// 发牌
message DdzDealCards {
    optional ProtoHeader header = 1;
    repeated Poker playerPokers = 2; //发给我的牌
}

// 明牌
message DdzShowHandPokers {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人
}

// 明牌ack
message DdzShowHandPokersAck {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人(广播)
}

// 叫地主
message DdzJiaoDiZhu {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人
    optional int32 score = 3; // 分数（可选）：1，2，3分
    optional bool jiao = 4; //true 叫地主 false 不叫地主
}

// 叫地主回复
message DdzJiaoDiZhuAck {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人 (广播给其它用户)
    optional bool jiao = 3; //true 叫地主 ，false 不叫地主

}

// 抢地主
message DdzRobDiZhu {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人
    optional bool rob = 3; // 抢还是不抢

}

message DdzRobDiZhuAck {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人 (广播给其它用户)
    optional bool rob = 3; // 抢还是不抢

}


enum DdzDoubleType {
    JIA = 1;
    BUJIA = 2;
}

// 加倍
message DdzDouble {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人
    optional DdzDoubleType double = 3; // 1=加倍, 2=不加倍
}

message DdzDoubleAck {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人 (广播给其它用户)
    optional DdzDoubleType double = 3; // 1=加倍, 2=不加倍
}

// 叫地主结束，开始游戏 (广播)
message DdzStartPlay {
    optional ProtoHeader header = 1;
    repeated Poker footPokers = 2; //3张底牌
    optional int32 footRate = 3; //底牌倍率
    optional uint32 dizhu = 4; //地主
}

//////////////////////////////////////////////////////////
// 四川斗地主

// 闷抓
message DdzMenuZhua {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人
}

message DdzMenuZhuaAck {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人 (广播给其它用户)
    repeated Poker handPokers = 3; // 发给我的手牌
}

// 看牌
message DdzSeeCards {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人
}

message DdzSeeCardsAck {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人 (广播给其它用户)
    repeated Poker handPokers = 3; // 发给我的手牌
}

// 拉/倒
message DdzPull {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人
    optional int32 act = 3; // 1=拉; 2=倒
}

message DdzPullAck {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 操作人 (广播给其它用户)
    optional int32 act = 3; // 1=拉; 2=倒
}

//////////////////////////////////////////////////////////

// 出牌
message DdzOutCards {
    optional ProtoHeader header = 1;
    repeated Poker outCards = 2; //打出的牌
}

message DdzOutCardsAck {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //出牌的人(广播)
    optional DdzPaiType cardType = 3; //打出的牌型
    optional int32 remainPokers = 4; //手牌还剩多少张
    repeated Poker outCards = 5; //打出的牌
}

// 过牌
message DdzActGuo {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
}

// 
message DdzActGuoAck {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //操作人(广播时用)
}

// 轮到谁操作
message DdzOverTurn {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 当前谁正在操作
    optional int32 time = 3; // 剩余操作时间
    optional ActType actType = 4; // 1:普通出牌 2:叫地主 3:抢地主 4：加倍 5：闷抓/看牌 6：拉/倒
    optional bool canDouble = 5; //可否加倍（玩家金币数过少，不许加倍）
    optional int32 pullOrPush = 6; //actType=4时：1=拉 2=倒
    optional bool canOutCards = 7; //能否出牌：false=“要不起”
}

////////////////////////////////////////////////////////

// 游戏信息(广播)
message DdzSendGameInfo {
    optional ProtoHeader header = 1;

    repeated PlayerInfo playerInfo = 2; //玩家数据（玩家数据包括其id昵称筹码头像等基本信息，其手牌数据，以及自己打出的牌的数据）

    optional DdzDeskInfo ddzDeskInfo = 3; //桌面信息（包括：游戏是否结束，当前轮到哪个玩家，倒计时剩余时间）

    optional uint32 senderUserId = 4; // 发起请求的人

    optional int32 isReconnect = 5; // 1=正常连接（默认） 2=断线重连

}

